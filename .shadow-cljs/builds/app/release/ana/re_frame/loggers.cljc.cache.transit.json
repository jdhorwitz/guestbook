["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),console.debug.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___47490 = arguments.length;\nvar i__4731__auto___47491 = (0);\nwhile(true){\nif((i__4731__auto___47491 < len__4730__auto___47490)){\nargs__4736__auto__.push((arguments[i__4731__auto___47491]));\n\nvar G__47492 = (i__4731__auto___47491 + (1));\ni__4731__auto___47491 = G__47492;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__47487 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__47487) : level.call(null,G__47487));\n})(),args);\n});\n\nre_frame.loggers.console.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.loggers.console.cljs$lang$applyTo = (function (seq47480){\nvar G__47481 = cljs.core.first(seq47480);\nvar seq47480__$1 = cljs.core.next(seq47480);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47481,seq47480__$1);\n});\n\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^K","~$cljs.core","^L","~$goog","^M"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$difference","^K"],"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^F",["^T",["^O",["^K","~:refer",["^Q"]]]]]],"~:flags",["^ ","^O",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1597780543506,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :debug     (js/console.debug.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :debug    (partial log :debug)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAACG,AAAsBH,AACvB,AAAI,AAASA,AACX,AAACI,AAAsBJ,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACK,AAAyBL;AAD5B,AAAA;;AAW7B,AAAA,AAAA,AAAAM,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE;AACA,AAACC,AAAM,AAAAC,AAAA,AAAAC,AAAQzB;AAAR,AAAA,AAAAwB,AAAAA,AAACH,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA,AAAA,AAAMU,AACHC;AADH,AAEE;AACA,AAACC,AAAM5B,AAAQ6B,AAAMF;;AAEvB;;;AAAA,AAAMG;AAAN,AAAA,AAAAL,AAGGzB","names",["re-frame.loggers/loggers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.debug.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq47480","G__47481","cljs.core/first","cljs.core/next","self__4717__auto__","level","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__47487","cljs.core/deref","re-frame.loggers/set-loggers!","new-loggers","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["~:macro","^L"],[1597770669000],["^[","goog/math/math.js"],[1597770556544,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^M","~$goog.array","~$goog.asserts"]]],["^[","re_frame/loggers.cljc"],[1597780074492,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L","^K"]]],["^[","goog/array/array.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1B"]]],["^[","goog/debug/error.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/dom/nodetype.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/object/object.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],"~:SHADOW-TIMESTAMP",[1597770557000,1597770669000],["^[","goog/math/long.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1B","~$goog.reflect"]]],["^[","goog/string/internal.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/functions/functions.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/structs/map.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/asserts/asserts.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/base.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",[]]],["^[","goog/structs/structs.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","~$goog.object"]]],["^[","goog/string/string.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.string.internal"]]],["^[","goog/reflect/reflect.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/string/stringbuffer.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/iter/iter.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","~$goog.functions","~$goog.math"]]],["^[","cljs/core.cljs"],[1597770669034,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["~$goog.math.Long","~$goog.math.Integer","^1I","^1O","^1A","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/math/integer.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","clojure/set.cljs"],[1597770669034,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L"]]],["^[","goog/uri/utils.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","^1I"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M"],"^N",["^D",["^O"]],"^P",["^ ","^Q","^K"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^1Z",true,"^E","~$re-frame.loggers/loggers","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",37,"^8",7,"^9",37,"^:",14,"~:arglists",["^T",["~$quote",["^T",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^T",["^27","^28"]]],"^25",["^T",[["^27","~$&","^28"]]],"~:arglists-meta",["^T",[null]]]],"^E","~$re-frame.loggers/console","^6","re_frame/loggers.cljc","^:",14,"^29",["^ ","^2:",true,"^2;",1,"^2<",1,"^2=",[["^T",["^27","^28"]]],"^25",["^T",[["^27","~$&","^28"]]],"^2>",["^T",[null]]],"^2=",[["^T",["^27","^28"]]],"~:protocol-impl",null,"^2;",1,"^2>",["^T",[null]],"^8",1,"^2:",true,"~:methods",[["^ ","^2;",1,"^2:",true,"^20","~$any"]],"^7",37,"~:ret-tag","^2B","^9",37,"^2<",1,"~:fn-var",true,"^25",["^T",[["^27","~$&","^28"]]]],"~$set-loggers!",["^ ","^24",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^25",["^T",["^26",["^T",[["~$new-loggers"]]]]]],"^E","~$re-frame.loggers/set-loggers!","^6","re_frame/loggers.cljc","^:",19,"^2=",["^T",[["^2F"]]],"^2@",null,"^2>",["^T",[null,null]],"^8",1,"^2:",false,"^7",43,"^2C",["^D",[null,"^2B"]],"^9",43,"^2<",1,"^2D",true,"^25",["^T",["^26",["^T",[["^2F"]]]]]],"~$get-loggers",["^ ","^24",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^25",["^T",["^26",["^T",[[]]]]],"^22","Get the current logging functions used by re-frame."],"^E","~$re-frame.loggers/get-loggers","^6","re_frame/loggers.cljc","^:",18,"^2=",["^T",[[]]],"^2@",null,"^2>",["^T",[null,null]],"^8",1,"^2:",false,"^7",48,"^2C","^2B","^9",48,"^2<",0,"^2D",true,"^25",["^T",["^26",["^T",[[]]]]],"^22","Get the current logging functions used by re-frame."]],"^R",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^D",["~:group","~:warn","~:debug","~:error","~:groupEnd","~:log"]],"~:order",["^2P","^2L","^2N","^2M","^2K","^2O"]],"^W",["^ ","^O",["^D",[]]],"^X",["^ "],"^Y",["^M","^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1;",[["^2T","~:static-fns"],true,["^2T","~:elide-asserts"],true,["^2T","~:optimize-constants"],null,["^2T","^12"],null,["^2T","~:external-config"],null,["^2T","~:tooling-config"],null,["^2T","~:emit-constants"],null,["^2T","~:load-tests"],false,["^2T","~:infer-externs"],true,["^2T","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^2T","~:fn-invoke-direct"],null,["^2T","~:source-map"],null]]]