["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___47874 = arguments.length;\nvar i__4731__auto___47875 = (0);\nwhile(true){\nif((i__4731__auto___47875 < len__4730__auto___47874)){\nargs__4736__auto__.push((arguments[i__4731__auto___47875]));\n\nvar G__47876 = (i__4731__auto___47875 + (1));\ni__4731__auto___47875 = G__47876;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__47838){\nvar map__47839 = p__47838;\nvar map__47839__$1 = (((((!((map__47839 == null))))?(((((map__47839.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47839.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47839):map__47839);\nvar m = map__47839__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47839__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47839__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47839__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5733__auto___47877 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5733__auto___47877){\nvar unknown_keys_47878 = temp__5733__auto___47877;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_47878], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4131__auto__ = id;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n});\n\nre_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq47830){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq47830));\n});\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__47845 = arguments.length;\nswitch (G__47845) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n});\n\nre_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3;\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___47884 = arguments.length;\nvar i__4731__auto___47885 = (0);\nwhile(true){\nif((i__4731__auto___47885 < len__4730__auto___47884)){\nargs__4736__auto__.push((arguments[i__4731__auto___47885]));\n\nvar G__47886 = (i__4731__auto___47885 + (1));\ni__4731__auto___47885 = G__47886;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\n});\n\nre_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n});\n\nre_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nre_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq47848){\nvar G__47849 = cljs.core.first(seq47848);\nvar seq47848__$1 = cljs.core.next(seq47848);\nvar G__47850 = cljs.core.first(seq47848__$1);\nvar seq47848__$2 = cljs.core.next(seq47848__$1);\nvar G__47851 = cljs.core.first(seq47848__$2);\nvar seq47848__$3 = cljs.core.next(seq47848__$2);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47849,G__47850,G__47851,seq47848__$3);\n});\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__47855 = arguments.length;\nswitch (G__47855) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n});\n\nre_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3;\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___47893 = arguments.length;\nvar i__4731__auto___47894 = (0);\nwhile(true){\nif((i__4731__auto___47894 < len__4730__auto___47893)){\nargs__4736__auto__.push((arguments[i__4731__auto___47894]));\n\nvar G__47895 = (i__4731__auto___47894 + (1));\ni__4731__auto___47894 = G__47895;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\n});\n\nre_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n});\n\nre_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nre_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq47860){\nvar G__47861 = cljs.core.first(seq47860);\nvar seq47860__$1 = cljs.core.next(seq47860);\nvar G__47862 = cljs.core.first(seq47860__$1);\nvar seq47860__$2 = cljs.core.next(seq47860__$1);\nvar G__47863 = cljs.core.first(seq47860__$2);\nvar seq47860__$3 = cljs.core.next(seq47860__$2);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47861,G__47862,G__47863,seq47860__$3);\n});\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar f = temp__5733__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__47902 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__47902;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__47867 = arguments.length;\nswitch (G__47867) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\n});\n\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n});\n\nre_frame.interceptor.context.cljs$lang$maxFixedArity = 3;\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of iterceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat anologous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__47747__auto___47909 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__47747__auto___47909;\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^K","~$re-frame.interop","^L","~$re-frame.trace","^M","~$trace","^M","~$clojure.set","^O","~$set","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$console","^K","~$empty-queue","^L","~$debug-enabled?","^L"],"~:require-macros",["^ ","^M","^M","^N","^M","^Q","^Q"],"~:form",["~#list",["~$ns","^F",["^[",["^T",["^K","~:refer",["^V"]],["^L","^11",["^W","^X"]],["^M","~:as","^N","~:include-macros",true],["^O","^12","^P"]]]]],"~:flags",["^ ","^T",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^K","^L","^M","^O"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1597780543726,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAQA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAEL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAK,AAACC,AAAKD,AACN,AAACE,AAAEJ,AAA2B,AAAA,AAAIE,AAAEG,AAAKC;;AAGhD,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AACUb;AADV,AAAAiB,AAAAJ,AAAA,AACmBQ;AADnB,AAAAJ,AAAAJ,AAAA,AACsBS;AADtB,AAAAL,AAAAJ,AAAA,AAC6BU;AAD7B,AAEE,AAAMC;AAAN,AACE,AAAAC,AAAsB,AAACL,AAAI,AAACO,AACA,AAAA,AAAI3B,AAAEG,AAAKC,AACXN;AAF5B,AAAA,AAAA2B;AAAA,AAAAA,AAASC;AAAT,AAGE,AAAA,AAAA,AAAA,AAACE,AAAyC5B,AAAsB0B;;AAHlE;;AADF;;AAFF,AAAA,AAOW,AAAAG,AAAIR;AAAJ,AAAA,AAAAQ;AAAAA;;AAAA;;AAPX,AAAA,AAQWP,AACAC;;;AATX,AAAA,AAAA,AAAMZ;;AAAN;AAAA,AAAA,AAAA,AAAAO,AAAMP;AAAN,AAAA,AAAAQ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAaA,AAAA,AAAA,AAAAb,AAAM0B;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAA,AAAUA;;;AAFb,AAAA,AAAA,AAAMF,AAGFE,AAAQC;AAHZ,AAIG,AAAA,AAAA,AAACC,AAAOF,AAAkBC;;;AAJ7B,AAAA,AAAA,AAAMH,AAKFE,AAAQC,AAAIE;AALhB,AAMG,AAAA,AAAA,AAACC,AAAOJ,AAAkBC,AAAKE;;;AANlC,AAAA,AAAA,AAAML;;AAAN,AAQA,AAAA,AAAMO,AACHL,AAAQC,AAAIK;AADf,AAEE,AAAA,AAAA,AAACC,AAASP,AAAkBC,AAAKK;;AAEnC,AAAA,AAAA,AAAAlC,AAAMoC;AAAN,AAAA,AAAAnC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAhC;;;AAAA,AAAA,AAAA,AAAA,AAAMgC,AACHR,AAAQC,AAAIe,AAAIC;AADnB,AAEE,AAAA,AAAA,AAACC,AAAMC,AAAUnB,AAAkBC,AAAKe,AAAEC;;;AAF5C,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAG,AAAAC,AAAAL;;;AAAA,AAMA,AAAA,AAAA,AAAArC,AAAMiD;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAtB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMsB,AACFrB;AADJ,AAEG,AAAA,AAAYA;;;AAFf,AAAA,AAAA,AAAMqB,AAGFrB,AAAQC;AAHZ,AAIG,AAAA,AAAA,AAACC,AAAOF,AAAoBC;;;AAJ/B,AAAA,AAAA,AAAMoB,AAKFrB,AAAQC,AAAIE;AALhB,AAMG,AAAA,AAAA,AAACC,AAAOJ,AAAoBC,AAAKE;;;AANpC,AAAA,AAAA,AAAMkB;;AAAN,AAQA,AAAA,AAAMC,AACHtB,AAAQC,AAAIK;AADf,AAEE,AAAA,AAAA,AAACC,AAASP,AAAoBC,AAAKK;;AAErC,AAAA,AAAA,AAAAlC,AAAMmD;AAAN,AAAA,AAAAlD,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA/C;;;AAAA,AAAA,AAAA,AAAA,AAAM+C,AACHvB,AAAQC,AAAIe,AAAIC;AADnB,AAEE,AAAA,AAAA,AAACC,AAAMC,AAAUnB,AAAoBC,AAAKe,AAAEC;;;AAF9C,AAAA,AAAA,AAAMM;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAd,AAAAa;AAAAA,AAAA,AAAAZ,AAAAY;AAAAE,AAAA,AAAAf,AAAAa;AAAAA,AAAA,AAAAZ,AAAAY;AAAAG,AAAA,AAAAhB,AAAAa;AAAAA,AAAA,AAAAZ,AAAAY;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAA,AAAAU,AAAAC,AAAAC,AAAAH;;;AAAA,AAOA,AAAA,AAAOI,AACJ5B,AAAQ6B,AAAYC;AADvB,AAEE,AAAAtC,AAAW,AAACR,AAAI6C,AAAYC;AAA5B,AAAA,AAAAtC;AAAA,AAAAA,AAASwB;AAAT,AACE,AAACA,AAAAA,AAAAA,AAAEhB,AAAAA;;AACHA;;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAO+B,AAwBH/B,AAAQ8B;AAxBZ,AAyBG,AAAO9B,AAAQA;;AAAf,AACE,AAAMgC,AAAM,AAAA,AAAQhC;AAApB,AACE,AAAI,AAACiC,AAAOD;AACVhC;;AACA,AAAM6B,AAAY,AAACK,AAAKF;AAClBG,AAAM,AAAA,AAAQnC;AADpB,AAEE,AAAWA,AACA,AAAA,AAAA,AAACoC,AAAa,AAACC,AAAIL,AACL,AAACM,AAAKH,AAAMN,AAC1B,AAACD,AAAsBC,AAAYC;;;;;;;AAGzD,AAAA,AAAMS,AACHvC,AAAQwC;AADX,AAEE,AAAA,AAACC,AAAOzC,AACA,AAAC0C,AAAKC,AAAKC,AACXJ;;AAGV,AAAA;;;AAAA,AAAApE,AAAO0E;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA/C,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAO+C,AAEHC,AAAMP;AAFV,AAIM,AAAA,AAAA,AAAClB,AAAsByB,AACvB,AAACR,AAAQC;;;AALf,AAAA,AAAA,AAAOM,AAMHC,AAAMP,AAAaQ;AANvB,AAOO,AAACC,AAAQF,AAAMP,AACf,AAAA,AAAClB,AAAmB0B;;;AAR3B,AAAA,AAAA,AAAOF;;AAAP,AAWA;;;;;;;;;AAAA,AAAOI,AAQJlD;AARH,AASMA,AACA,AAAA,AAACmD,AACD,AAACZ,AAAQ,AAAA,AAAQvC;;AAGvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAMoD,AAiDHC,AAAQb;AAjDX,AAkDE,AAAA,AAAAc;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAf,AAAAgB,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AACwBX,AAAAA;AADxB,AAAA,AAAAiB,AAAAF;;AAAA;AAAA;;AAEI,AAACN,AAAQI,AAAQb,AACjB,AAAA,AAACT,AACDmB,AACA,AAAA,AAAA,AAACnB","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/set","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__47838","map__47839","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq47830","self__4718__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5733__auto__","unknown-keys","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","G__47845","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","not-found","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq47848","G__47849","cljs.core/first","cljs.core/next","G__47850","G__47851","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update-in","G__47855","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq47860","G__47861","G__47862","G__47863","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/pop","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","re-frame.interceptor/enqueue","interceptors","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/into","re-frame.interop/empty-queue","G__47867","re-frame.interceptor/context","event","db","re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2","re-frame.interceptor/change-direction","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__47747__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/*current-trace*","cljs.core/merge"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1597770557000,1597770557000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",15,"~:deps-ids",["^D",[3,14,10]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development","~$module$node_modules$process$browser"]]],["^18","reagent/impl/batching.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","~$reagent.debug","~$reagent.impl.util"]]],["^18","goog/dom/tagname.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.dom.HtmlElement"]]],["^18","goog/labs/useragent/platform.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.labs.userAgent.util","~$goog.string"]]],["~:macro","^Q"],[1597770669000],["^18","goog/math/math.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.array","~$goog.asserts"]]],["^18","goog/events/eventtype.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^18","goog/labs/useragent/browser.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","^1Q","~$goog.object","~$goog.string.internal"]]],["^18","re_frame/loggers.cljc"],[1597780074492,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","^O"]]],["^1S","^1N"],[1597780074000],["^18","goog/array/array.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1U"]]],["^1E","node_modules/prop-types/checkPropTypes.js"],[1597770557000,1597770557000,1549836454000,"^1F",["^ ","^1G",4,"^1H",["^D",[3,2]],"^1I",["^1J","~$module$node_modules$prop_types$lib$ReactPropTypesSecret","^1M"]]],["^18","reagent/impl/util.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","~$clojure.string"]]],["^18","goog/useragent/useragent.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^1Q","~$goog.reflect","^1R"]]],["^1S","~$net.cgrand.macrovich"],[1597780074000],["^18","goog/debug/error.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","goog/events/events.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1U","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^1V","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^18","goog/events/browserfeature.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1W"]]],["^18","goog/dom/nodetype.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^1S","~$reagent.core"],[1597780074000],["^1E","node_modules/scheduler/cjs/scheduler.development.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",8,"^1H",["^D",[3]],"^1I",["^1J","^1M"]]],["^18","reagent/ratom.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","^1O","^1N","~$reagent.impl.batching","^O","^1X"]]],["^1E","node_modules/scheduler/cjs/scheduler.production.min.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",7,"^1H",["^D",[]],"^1I",["^1J"]]],["^18","re_frame/interop.cljs"],[1597780074492,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","~$goog.async.nextTick","~$goog.events","^29","~$reagent.ratom"]]],["^18","goog/disposable/disposable.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.disposable.IDisposable"]]],["^1E","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",11,"^1H",["^D",[]],"^1I",["^1J"]]],["^1E","node_modules/react/index.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",6,"^1H",["^D",[1,3,5]],"^1I",["^1J","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development","^1M"]]],["^18","shadow/js.js"],[1597770557031,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","goog/object/object.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","reagent/impl/template.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[6]],"^1I",["^R","^Q","^?","^1[","~$clojure.walk","^1O","~$reagent.impl.component","^2:","^2=","^1N","^1X"]]],["^1E","node_modules/react-dom/cjs/react-dom.production.min.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",10,"^1H",["^D",[0,6,9]],"^1I",["^1J","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1597770557000,1597770669000],["^1E","node_modules/react/cjs/react.development.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",5,"^1H",["^D",[0,4,3]],"^1I",["^1J","^2C","~$module$node_modules$prop_types$checkPropTypes","^1M"]]],["^1S","^2="],[1597780074000],["^18","goog/math/long.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1U","^23"]]],["^18","goog/events/listener.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.events.ListenableKey"]]],["^18","goog/events/listenermap.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","~$goog.events.Listener","^1X"]]],["^18","goog/events/eventid.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","goog/string/internal.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^1E","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",12,"^1H",["^D",[3]],"^1I",["^1J","^1M"]]],["^18","goog/functions/functions.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","reagent/impl/component.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[6]],"^1I",["^R","^Q","^1X","^?","^1O","^2:","^2=","^1N"]]],["^18","clojure/walk.cljs"],[1597770669034,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q"]]],["^18","goog/structs/map.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1E","node_modules/scheduler/index.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",9,"^1H",["^D",[7,3,8]],"^1I",["^1J","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development","^1M"]]],["^18","goog/labs/useragent/engine.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","^1Q","^1R"]]],["^18","goog/asserts/asserts.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^18","goog/uri/uri.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","^1U","^1R","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1E","node_modules/object-assign/index.js"],[1597770557000,1597770557000,1484580833000,"^1F",["^ ","^1G",0,"^1H",["^D",[]],"^1I",["^1J"]]],["^18","goog/disposable/idisposable.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^1E","node_modules/process/browser.js"],[1597770557000,1597770557000,1493209628000,"^1F",["^ ","^1G",3,"^1H",["^D",[]],"^1I",["^1J"]]],["^18","goog/base.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",[]]],["^18","goog/structs/structs.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","^1X"]]],["^18","clojure/string.cljs"],[1597770669034,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","^1R","~$goog.string.StringBuffer"]]],["^1E","node_modules/react/cjs/react.production.min.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",1,"^1H",["^D",[0]],"^1I",["^1J","^2C"]]],["^18","goog/debug/entrypointregistry.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1U"]]],["^18","goog/string/string.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1Y"]]],["^18","re_frame/interceptor.cljc"],[1597780074492,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","^K","^L","^M","^O"]]],["^18","goog/reflect/reflect.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","goog/labs/useragent/util.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1Y"]]],["^18","reagent/core.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[6]],"^1I",["^R","^Q","^?","~$reagent.impl.template","^2B","^1O","^2:","^2=","^1N","~$reagent.dom"]]],["^18","goog/debug/debug.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","~$goog.debug.errorcontext","^1W"]]],["^18","goog/string/stringbuffer.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","goog/debug/errorcontext.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","goog/iter/iter.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","^1U","~$goog.functions","~$goog.math"]]],["^18","goog/async/nexttick.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^25","~$goog.dom.TagName","^2X","^20","^21"]]],["^18","reagent/dom.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[15]],"^1I",["^R","^Q","^A","^1O","^2U","^2:","^2="]]],["^1E","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1597770557000,1597770557000,1549571078000,"^1F",["^ ","^1G",2,"^1H",["^D",[]],"^1I",["^1J"]]],["^18","goog/events/event.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.Disposable","~$goog.events.EventId"]]],["^18","goog/dom/htmlelement.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^18","cljs/core.cljs"],[1597770669034,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["~$goog.math.Long","~$goog.math.Integer","^1R","^1X","^1T","~$goog.Uri","^2T"]]],["^18","reagent/debug.cljs"],[1597780074412,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q"]]],["^18","goog/events/browserevent.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","~$goog.debug","^1V","~$goog.events.Event","~$goog.events.EventType","^23","^1W"]]],["^1S","^M"],[1597780074000],["^18","goog/math/integer.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R"]]],["^1E","node_modules/scheduler/tracing.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",13,"^1H",["^D",[3,12,11]],"^1I",["^1J","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development","^1M"]]],["^1E","node_modules/react-dom/cjs/react-dom.development.js"],[1597770557000,1597770557000,499162500000,"^1F",["^ ","^1G",14,"^1H",["^D",[0,4,13,6,3,9]],"^1I",["^1J","^?","^2C","^2D","^2F","~$module$node_modules$scheduler$tracing","^1M"]]],["^18","clojure/set.cljs"],[1597770669034,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q"]]],["^18","goog/uri/utils.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^1T","^1U","^1R"]]],["^18","goog/events/listenable.js"],[1597770556544,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^30"]]],["^18","re_frame/trace.cljc"],[1597780074492,"^1F",["^ ","^1G",null,"^1H",["^D",[]],"^1I",["^R","^Q","^L","^K","^2X"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M","^N","^M","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^D",["^T"]],"~:shadow/js-access-global",["^D",["Error"]],"^U",["^ ","^V","^K","^W","^L","^X","^L"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^[",["~$quote",["^[",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^[",["^3A","^3B","~$f","^3C"]]],"^3?",["^[",[["^3A","^3B","~$f","~$&","^3C"]]],"~:arglists-meta",["^[",[null]]]],"^E","~$re-frame.interceptor/update-effect","^6","re_frame/interceptor.cljc","^:",20,"^3D",["^ ","^3E",true,"^3F",3,"^3G",3,"^3H",[["^[",["^3A","^3B","~$f","^3C"]]],"^3?",["^[",[["^3A","^3B","~$f","~$&","^3C"]]],"^3I",["^[",[null]]],"^3H",[["^[",["^3A","^3B","~$f","^3C"]]],"~:protocol-impl",null,"^3F",3,"^3I",["^[",[null]],"^8",1,"^3E",true,"~:methods",[["^ ","^3F",3,"^3E",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^3N","^9",42,"^3G",3,"~:fn-var",true,"^3?",["^[",[["^3A","^3B","~$f","~$&","^3C"]]]],"~$invoke-interceptors",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^3?",["^[",["^3@",["^[",[["^3A","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^3R",true,"^E","~$re-frame.interceptor/invoke-interceptors","^6","re_frame/interceptor.cljc","^:",27,"^3H",["^[",[["^3A","^3S"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",74,"^9",74,"^3G",2,"^3P",true,"^3?",["^[",["^3@",["^[",[["^3A","^3S"]]]]],"^3T","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^3?",["^[",["^3@",["^[",[["^3A","^3B","~$value"]]]]]],"^E","~$re-frame.interceptor/assoc-coeffect","^6","re_frame/interceptor.cljc","^:",21,"^3H",["^[",[["^3A","^3B","^3W"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",56,"^3O",["^D",["~$clj","^3N"]],"^9",56,"^3G",3,"^3P",true,"^3?",["^[",["^3@",["^[",[["^3A","^3B","^3W"]]]]]],"~$update-coeffect",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^3?",["^[",["^3@",["^[",[["^3A","^3B","~$f","~$&","^3C"]]]]],"^3D",["^ ","^3E",true,"^3F",3,"^3G",3,"^3H",[["^[",["^3A","^3B","~$f","^3C"]]],"^3?",["^[",[["^3A","^3B","~$f","~$&","^3C"]]],"^3I",["^[",[null]]]],"^E","~$re-frame.interceptor/update-coeffect","^6","re_frame/interceptor.cljc","^:",22,"^3D",["^ ","^3E",true,"^3F",3,"^3G",3,"^3H",[["^[",["^3A","^3B","~$f","^3C"]]],"^3?",["^[",[["^3A","^3B","~$f","~$&","^3C"]]],"^3I",["^[",[null]]],"^3H",[["^[",["^3A","^3B","~$f","^3C"]]],"^3K",null,"^3F",3,"^3I",["^[",[null]],"^8",1,"^3E",true,"^3L",[["^ ","^3F",3,"^3E",true,"^3M","^3N"]],"^7",60,"^3O","^3N","^9",60,"^3G",3,"^3P",true,"^3?",["^[",[["^3A","^3B","~$f","~$&","^3C"]]]],"~$invoke-interceptor-fn",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^3R",true,"^3?",["^[",["^3@",["^[",[["^3A","~$interceptor","^3S"]]]]]],"^3R",true,"^E","~$re-frame.interceptor/invoke-interceptor-fn","^6","re_frame/interceptor.cljc","^:",29,"^3H",["^[",[["^3A","^41","^3S"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",67,"^3O",["^D",[null,"^3N"]],"^9",67,"^3G",3,"^3P",true,"^3?",["^[",["^3@",["^[",[["^3A","^41","^3S"]]]]]],"~$get-effect",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^3?",["^[",["^3@",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","~$not-found"]]]]],"^3D",["^ ","^3E",false,"^3F",3,"^3G",3,"^3H",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3?",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3I",["^[",[null,null,null]]]],"^E","~$re-frame.interceptor/get-effect","^6","re_frame/interceptor.cljc","^:",17,"^3D",["^ ","^3E",false,"^3F",3,"^3G",3,"^3H",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3?",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3I",["^[",[null,null,null]]],"^3H",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3K",null,"^3F",3,"^3I",["^[",[null,null,null]],"^8",1,"^3E",false,"^3L",[["^ ","^3F",1,"^3E",false,"^3M","^3N"],["^ ","^3F",2,"^3E",false,"^3M",["^D",[null,"^3N"]]],["^ ","^3F",3,"^3E",false,"^3M","^3N"]],"^7",30,"^9",30,"^3G",3,"^3P",true,"^3?",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]]],"~$->interceptor",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^3?",["^[",["^3@",["^[",[["~$&",["^ ","^12","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^3D",["^ ","^3E",true,"^3F",0,"^3G",0,"^3H",[["^[",[["^ ","^12","~$m","^47",["^48","^49","^4:"]]]]],"^3?",["^[",[["~$&",["^ ","^12","~$m","^47",["^48","^49","^4:"]]]]],"^3I",["^[",[null]]]],"^E","~$re-frame.interceptor/->interceptor","^6","re_frame/interceptor.cljc","^:",20,"^3D",["^ ","^3E",true,"^3F",0,"^3G",0,"^3H",[["^[",[["^ ","^12","~$m","^47",["^48","^49","^4:"]]]]],"^3?",["^[",[["~$&",["^ ","^12","~$m","^47",["^48","^49","^4:"]]]]],"^3I",["^[",[null]]],"^3H",[["^[",[["^ ","^12","~$m","^47",["^48","^49","^4:"]]]]],"^3K",null,"^3F",0,"^3I",["^[",[null]],"^8",1,"^3E",true,"^3L",[["^ ","^3F",0,"^3E",true,"^3M","~$cljs.core/IMap"]],"^7",17,"^3O","^3N","^9",17,"^3G",0,"^3P",true,"^3?",["^[",[["~$&",["^ ","^12","~$m","^47",["^48","^49","^4:"]]]]]],"~$get-coeffect",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^3?",["^[",["^3@",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]]]],"^3D",["^ ","^3E",false,"^3F",3,"^3G",3,"^3H",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3?",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3I",["^[",[null,null,null]]]],"^E","~$re-frame.interceptor/get-coeffect","^6","re_frame/interceptor.cljc","^:",19,"^3D",["^ ","^3E",false,"^3F",3,"^3G",3,"^3H",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3?",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3I",["^[",[null,null,null]]],"^3H",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]],"^3K",null,"^3F",3,"^3I",["^[",[null,null,null]],"^8",1,"^3E",false,"^3L",[["^ ","^3F",1,"^3E",false,"^3M","^3N"],["^ ","^3F",2,"^3E",false,"^3M",["^D",[null,"^3N"]]],["^ ","^3F",3,"^3E",false,"^3M","^3N"]],"^7",48,"^9",48,"^3G",3,"^3P",true,"^3?",["^[",[["^3A"],["^3A","^3B"],["^3A","^3B","^44"]]]],"~$execute",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",143,"^8",7,"^9",143,"^:",14,"^3?",["^[",["^3@",["^[",[["~$event-v","~$interceptors"]]]]],"^3T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^E","~$re-frame.interceptor/execute","^6","re_frame/interceptor.cljc","^:",14,"^3H",["^[",[["^4@","^4A"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",143,"^3O","^3N","^9",143,"^3G",2,"^3P",true,"^3?",["^[",["^3@",["^[",[["^4@","^4A"]]]]],"^3T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^3?",["^[",["^3@",["^[",[["^3A","^3B","^3W"]]]]]],"^E","~$re-frame.interceptor/assoc-effect","^6","re_frame/interceptor.cljc","^:",19,"^3H",["^[",[["^3A","^3B","^3W"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",38,"^3O",["^D",["^3Y","^3N"]],"^9",38,"^3G",3,"^3P",true,"^3?",["^[",["^3@",["^[",[["^3A","^3B","^3W"]]]]]],"~$enqueue",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^3?",["^[",["^3@",["^[",[["^3A","^4A"]]]]]],"^E","~$re-frame.interceptor/enqueue","^6","re_frame/interceptor.cljc","^:",14,"^3H",["^[",[["^3A","^4A"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",111,"^3O",["^D",["^3Y","^3N"]],"^9",111,"^3G",2,"^3P",true,"^3?",["^[",["^3@",["^[",[["^3A","^4A"]]]]]],"~$mandatory-interceptor-keys",["^ ","^E","~$re-frame.interceptor/mandatory-interceptor-keys","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^3M","~$cljs.core/ISet"],"~$interceptor?",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^3?",["^[",["^3@",["^[",[["~$m"]]]]]],"^E","~$re-frame.interceptor/interceptor?","^6","re_frame/interceptor.cljc","^:",19,"^3H",["^[",[["~$m"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",11,"^3O","~$boolean","^9",11,"^3G",1,"^3P",true,"^3?",["^[",["^3@",["^[",[["~$m"]]]]]],"~$change-direction",["^ ","^3>",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",129,"^8",8,"^9",129,"^:",24,"^3R",true,"^3?",["^[",["^3@",["^[",[["^3A"]]]]],"^3T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^3R",true,"^E","~$re-frame.interceptor/change-direction","^6","re_frame/interceptor.cljc","^:",24,"^3H",["^[",[["^3A"]]],"^3K",null,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^7",129,"^3O",["^D",["^3Y","^3N"]],"^9",129,"^3G",1,"^3P",true,"^3?",["^[",["^3@",["^[",[["^3A"]]]]],"^3T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^3A",["^ ","^3>",null,"^5",["^ ","^3R",true,"^6","re_frame/interceptor.cljc","^:",15,"^3D",["^ ","^3E",false,"^3F",3,"^3G",3,"^3H",["^[",[["~$event","^4A"],["^4O","^4A","~$db"]]],"^3?",["^[",[["^4O","^4A"],["^4O","^4A","^4P"]]],"^3I",["^[",[null,null]]],"^8",8,"^7",118,"^9",118,"^3?",["^[",["^3@",["^[",[["^4O","^4A"],["^4O","^4A","^4P"]]]]],"^3T","Create a fresh context"],"^3R",true,"^E","~$re-frame.interceptor/context","^6","re_frame/interceptor.cljc","^:",15,"^3D",["^ ","^3E",false,"^3F",3,"^3G",3,"^3H",["^[",[["^4O","^4A"],["^4O","^4A","^4P"]]],"^3?",["^[",[["^4O","^4A"],["^4O","^4A","^4P"]]],"^3I",["^[",[null,null]]],"^3H",["^[",[["^4O","^4A"],["^4O","^4A","^4P"]]],"^3K",null,"^3F",3,"^3I",["^[",[null,null]],"^8",1,"^3E",false,"^3L",[["^ ","^3F",2,"^3E",false,"^3M",["^D",["^3Y","^3N"]]],["^ ","^3F",3,"^3E",false,"^3M",["^D",["^3Y","^3N"]]]],"^7",118,"^9",118,"^3G",3,"^3P",true,"^3?",["^[",[["^4O","^4A"],["^4O","^4A","^4P"]]],"^3T","Create a fresh context"]],"^Y",["^ ","^M","^M","^N","^M","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^D",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^4X","^4Y","^53","^50","^4S","^4Z","^51","^4V","^4[","^4W","^4U","^4T","^52"]],"^14",["^ ","^T",["^D",[]]],"^15",["^ "],"^16",["^R","^Q","^K","^L","^M","^O"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1D",[["^57","~:static-fns"],true,["^57","~:elide-asserts"],true,["^57","~:optimize-constants"],null,["^57","^1;"],null,["^57","~:external-config"],null,["^57","~:tooling-config"],null,["^57","~:emit-constants"],null,["^57","~:load-tests"],false,["^57","~:infer-externs"],true,["^57","^1="],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^57","~:fn-invoke-direct"],null,["^57","~:source-map"],null]]]