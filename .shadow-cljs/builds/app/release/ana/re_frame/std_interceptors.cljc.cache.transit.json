["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\n\nreturn context;\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\n} else {\nvar vec__47922_48012 = clojure.data.diff(orig_db,new_db);\nvar only_before_48013 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47922_48012,(0),null);\nvar only_after_48014 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__47922_48012,(1),null);\nvar db_changed_QMARK__48015 = (((!((only_before_48013 == null)))) || ((!((only_after_48014 == null)))));\nif(db_changed_QMARK__48015){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_48013], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_48014], 0));\n\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\n}\n}\n\nreturn context;\n})], 0));\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trimv_before(context){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0)),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trimv_after(context){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.utils.dissoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075)], null)),new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"untrimmed-event\",\"re-frame.std-interceptors/untrimmed-event\",-840935075)));\n})], 0));\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n * \n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\n * \n *    (fn [db event]\n *       ....)\n * \n *   So, the interceptor wraps the given handler:\n *   1. extracts two `:coeffects` keys: db and event\n *   2. calls handler-fn\n *   3. stores the db result back into context's `:effects`\n */\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__47940 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__47945 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__47945;\n\ntry{try{var map__47957 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__47957__$1 = (((((!((map__47957 == null))))?(((((map__47957.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47957.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47957):map__47957);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47957__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47957__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__47745__auto___48024 = re_frame.interop.now();\nvar duration__47746__auto___48025 = (end__47745__auto___48024 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__47746__auto___48025,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__47745__auto___48024);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__47940;\n}})():(function (){var map__47963 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__47963__$1 = (((((!((map__47963 == null))))?(((((map__47963.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47963.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47963):map__47963);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47963__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47963__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__47747__auto___48031 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__47747__auto___48031;\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n * \n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n * \n *    (fn [coeffects event]\n *       {:db ...\n *        :dispatch ...})\n * \n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n *   1. extracts `:coeffects`\n *   2. call handler-fn giving coeffects\n *   3. stores the result back into the `:effects`\n */\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__47968 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__47969 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__47969;\n\ntry{try{var map__47971 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__47971__$1 = (((((!((map__47971 == null))))?(((((map__47971.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47971.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47971):map__47971);\nvar coeffects = map__47971__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47971__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__47745__auto___48037 = re_frame.interop.now();\nvar duration__47746__auto___48038 = (end__47745__auto___48037 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__47746__auto___48038,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__47745__auto___48037);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__47968;\n}})():(function (){var map__47974 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__47974__$1 = (((((!((map__47974 == null))))?(((((map__47974.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__47974.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__47974):map__47974);\nvar coeffects = map__47974__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__47974__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__47747__auto___48042 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__47747__auto___48042;\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\n *   Example:\n * \n *    (fn [context]\n *       (enqueue context [more interceptors]))\n */\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__47978 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__47979 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__47979;\n\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__47745__auto___48044 = re_frame.interop.now();\nvar duration__47746__auto___48046 = (end__47745__auto___48044 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__47746__auto___48046,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__47745__auto___48044);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__47978;\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context)));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__47747__auto___48047 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__47747__auto___48047;\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___48066 = arguments.length;\nvar i__4731__auto___48067 = (0);\nwhile(true){\nif((i__4731__auto___48067 < len__4730__auto___48066)){\nargs__4736__auto__.push((arguments[i__4731__auto___48067]));\n\nvar G__48068 = (i__4731__auto___48067 + (1));\ni__4731__auto___48067 = G__48068;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar path = cljs.core.flatten(args);\nvar db_store_key = new cljs.core.Keyword(\"re-frame-path\",\"db-store\",\"re-frame-path/db-store\",655758490);\nif(cljs.core.empty_QMARK_(path)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\n} else {\n}\n\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),((function (path,db_store_key){\nreturn (function (context){\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,db_store_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\n});})(path,db_store_key))\n,new cljs.core.Keyword(null,\"after\",\"after\",594996914),((function (path,db_store_key){\nreturn (function (context){\nvar db_store = db_store_key.cljs$core$IFn$_invoke$arity$1(context);\nvar original_db = cljs.core.peek(db_store);\nvar new_db_store = cljs.core.pop(db_store);\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,db_store_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nreturn context_SINGLEQUOTE_;\n} else {\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\n}\n});})(path,db_store_key))\n], 0));\n});\n\nre_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq47983){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq47983));\n});\n\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event)));\n})], 0));\n});\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event));\n\nreturn context;\n})], 0));\n});\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___48085 = arguments.length;\nvar i__4731__auto___48086 = (0);\nwhile(true){\nif((i__4731__auto___48086 < len__4730__auto___48085)){\nargs__4736__auto__.push((arguments[i__4731__auto___48086]));\n\nvar G__48087 = (i__4731__auto___48086 + (1));\ni__4731__auto___48086 = G__48087;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nre_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (new_db,old_db){\nreturn (function (p1__47992_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__47992_SHARP_);\n});})(new_db,old_db))\n,in_paths);\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (new_db,old_db,new_ins){\nreturn (function (p1__47993_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__47993_SHARP_);\n});})(new_db,old_db,new_ins))\n,in_paths);\nvar changed_ins_QMARK_ = (function (){var and__4120__auto__ = cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nif(and__4120__auto__){\nreturn cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins));\n} else {\nreturn and__4120__auto__;\n}\n})();\nif(cljs.core.truth_(changed_ins_QMARK_)){\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\n} else {\nreturn context;\n}\n})], 0));\n});\n\nre_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nre_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq47994){\nvar G__47995 = cljs.core.first(seq47994);\nvar seq47994__$1 = cljs.core.next(seq47994);\nvar G__47996 = cljs.core.first(seq47994__$1);\nvar seq47994__$2 = cljs.core.next(seq47994__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47995,G__47996,seq47994__$2);\n});\n\n/**\n * An interceptor which adds registered global interceptors to the context's queue.\n * \n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\n */\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__48005_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__48005_SHARP_);\n}));\n})], 0));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^N","~$data","~$clojure.data","~$re-frame.trace","^Q","~$re-frame.settings","^R","~$cljs.core","^S","~$interceptor","^N","~$goog","^U","~$trace","^Q","~$re-frame.utils","^W","~$settings","^R","~$re-frame.loggers","^Y","~$utils","^W","^M","^M","^P","^P","~$re-frame.db","^["],"~:seen",["^E",["~:require"]],"~:uses",["^ ","~$->interceptor","^N","~$get-effect","^N","~$get-coeffect","^N","~$assoc-coeffect","^N","~$assoc-effect","^N","~$update-coeffect","^N","~$console","^Y","~$app-db","^["],"~:require-macros",["^ ","^Q","^Q","^V","^Q","^S","^S"],"~:form",["~#list",["~$ns","^G","contains re-frame supplied, standard interceptors",["^1=",["^11",["^N","~:refer",["^13","^14","^15","^16","^17","^18"]],["^Y","^1?",["^19"]],["^R","~:as","^X"],["^[","^1?",["^1:"]],["^P","^1@","^O"],["^M","^1@","^L"],["^W","^1@","^Z"],["^Q","^1@","^V","~:include-macros",true],["^N","^1@","^T"]]]]],"~:flags",["^ ","^11",["^E",[]]],"~:js-deps",["^ "],"~:deps",["^U","^S","^N","^Y","^R","^[","^P","^M","^W","^Q"]],"^I","^G","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1597780543823,"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.settings :as settings]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]\n    [re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trimv-before\n               [context]\n               (-> context\n                   (update-coeffect :event subvec 1)\n                   (assoc-coeffect ::untrimmed-event (get-coeffect context :event))))\n    :after   (fn trimv-after\n               [context]\n               (-> context\n                   (utils/dissoc-in [:coeffects ::untrimmed-event])\n                   (assoc-coeffect :event (get-coeffect context ::untrimmed-event))))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-coeffect context :event)}\n                    (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                      (->> (handler-fn coeffects event)\n                           (assoc context :effects))))]\n              (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^E",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2","event","orig-db","new-db","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","vec__47922","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/trim-v","re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic","cljs.core/subvec","re-frame.interceptor/assoc-coeffect","re-frame.utils/dissoc-in","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__47940","re-frame.trace/*current-trace*","*current-trace*-temp-val__47945","re-frame.trace/start-trace","end__47745__auto__","re-frame.interop/now","duration__47746__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","map__47957","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__47963","db","re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1","re-frame.interceptor/assoc-effect","new-trace__47747__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__47968","*current-trace*-temp-val__47969","map__47971","map__47974","coeffects","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__47978","*current-trace*-temp-val__47979","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq47983","self__4718__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","cljs.core/contains?","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq47994","G__47995","cljs.core/first","cljs.core/next","G__47996","self__4717__auto__","out-path","in-paths","old-db","new-ins","p1__47992#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","old-ins","p1__47993#","changed-ins?","and__4120__auto__","cljs.core/some","cljs.core/false?","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/identical?","re-frame.std-interceptors/inject-global-interceptors","p1__48005#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-frame.settings/get-global-interceptors"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1597770557000,1597770557000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",15,"~:deps-ids",["^E",[3,14,10]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development","~$module$node_modules$process$browser"]]],["^1F","reagent/impl/batching.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","~$reagent.debug","~$reagent.impl.util"]]],["^1F","goog/dom/tagname.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.dom.HtmlElement"]]],["^1F","goog/labs/useragent/platform.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.labs.userAgent.util","~$goog.string"]]],["~:macro","^S"],[1597770669000],["^1F","goog/math/math.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.array","~$goog.asserts"]]],["^1F","goog/events/eventtype.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1F","goog/labs/useragent/browser.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","^23","~$goog.object","~$goog.string.internal"]]],["^1F","re_frame/loggers.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","~$clojure.set"]]],["^25","^20"],[1597780074000],["^1F","goog/array/array.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^27"]]],["^1S","node_modules/prop-types/checkPropTypes.js"],[1597770557000,1597770557000,1549836454000,"^1T",["^ ","^1U",4,"^1V",["^E",[3,2]],"^1W",["^1X","~$module$node_modules$prop_types$lib$ReactPropTypesSecret","^1["]]],["^1F","reagent/impl/util.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","~$clojure.string"]]],["^1F","goog/useragent/useragent.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^23","~$goog.reflect","^24"]]],["^25","~$net.cgrand.macrovich"],[1597780074000],["^1F","goog/debug/error.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","goog/events/events.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^27","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^28","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1F","re_frame/registrar.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","~$re-frame.interop","^Y","^R"]]],["^1F","goog/events/browserfeature.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^29"]]],["^1F","goog/dom/nodetype.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^25","~$reagent.core"],[1597780074000],["^1S","node_modules/scheduler/cjs/scheduler.development.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",8,"^1V",["^E",[3]],"^1W",["^1X","^1["]]],["^1F","reagent/ratom.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^21","^20","~$reagent.impl.batching","^2<","^2:"]]],["^1S","node_modules/scheduler/cjs/scheduler.production.min.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",7,"^1V",["^E",[]],"^1W",["^1X"]]],["^1F","re_frame/interop.cljs"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","~$goog.async.nextTick","~$goog.events","^2I","~$reagent.ratom"]]],["^1F","goog/disposable/disposable.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.disposable.IDisposable"]]],["^1S","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",11,"^1V",["^E",[]],"^1W",["^1X"]]],["^1S","node_modules/react/index.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",6,"^1V",["^E",[1,3,5]],"^1W",["^1X","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development","^1["]]],["^1F","shadow/js.js"],[1597770557031,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","goog/object/object.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","reagent/impl/template.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[6]],"^1W",["^U","^S","^@","^2>","~$clojure.walk","^21","~$reagent.impl.component","^2J","^2M","^20","^2:"]]],["^1S","node_modules/react-dom/cjs/react-dom.production.min.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",10,"^1V",["^E",[0,6,9]],"^1W",["^1X","^@","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1597770557000,1597770669000],["^1S","node_modules/react/cjs/react.development.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",5,"^1V",["^E",[0,4,3]],"^1W",["^1X","^2S","~$module$node_modules$prop_types$checkPropTypes","^1["]]],["^25","^2M"],[1597780074000],["^1F","goog/math/long.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^27","^2B"]]],["^1F","goog/events/listener.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.events.ListenableKey"]]],["^1F","goog/events/listenermap.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","~$goog.events.Listener","^2:"]]],["^1F","goog/events/eventid.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","goog/string/internal.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1S","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",12,"^1V",["^E",[3]],"^1W",["^1X","^1["]]],["^1F","goog/functions/functions.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","reagent/impl/component.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[6]],"^1W",["^U","^S","^2:","^@","^21","^2J","^2M","^20"]]],["^1F","clojure/walk.cljs"],[1597770669034,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S"]]],["^1F","goog/structs/map.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1S","node_modules/scheduler/index.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",9,"^1V",["^E",[7,3,8]],"^1W",["^1X","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development","^1["]]],["^1F","goog/labs/useragent/engine.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","^23","^24"]]],["^1F","re_frame/settings.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^2H","^Y"]]],["^1F","goog/asserts/asserts.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1F","goog/uri/uri.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","^27","^24","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1S","node_modules/object-assign/index.js"],[1597770557000,1597770557000,1484580833000,"^1T",["^ ","^1U",0,"^1V",["^E",[]],"^1W",["^1X"]]],["^1F","re_frame/db.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^2H"]]],["^1F","goog/disposable/idisposable.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1S","node_modules/process/browser.js"],[1597770557000,1597770557000,1493209628000,"^1T",["^ ","^1U",3,"^1V",["^E",[]],"^1W",["^1X"]]],["^1F","goog/base.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",[]]],["^1F","goog/structs/structs.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","^2:"]]],["^1F","clojure/string.cljs"],[1597770669034,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^24","~$goog.string.StringBuffer"]]],["^1F","re_frame/cofx.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^[","^N","~$re-frame.registrar","^Y"]]],["^1S","node_modules/react/cjs/react.production.min.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",1,"^1V",["^E",[0]],"^1W",["^1X","^2S"]]],["^1F","goog/debug/entrypointregistry.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^27"]]],["^1F","goog/string/string.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^2;"]]],["^1F","re_frame/interceptor.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^Y","^2H","^Q","^2<"]]],["^1F","clojure/data.cljs"],[1597770669034,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^2<"]]],["^1F","goog/reflect/reflect.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","goog/labs/useragent/util.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^2;"]]],["^1F","reagent/core.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[6]],"^1W",["^U","^S","^@","~$reagent.impl.template","^2R","^21","^2J","^2M","^20","~$reagent.dom"]]],["^1F","goog/debug/debug.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","~$goog.debug.errorcontext","^29"]]],["^1F","goog/string/stringbuffer.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","re_frame/std_interceptors.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^N","^Y","^R","^[","^P","^M","^W","^Q"]]],["^1F","goog/debug/errorcontext.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","goog/iter/iter.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","^27","~$goog.functions","~$goog.math"]]],["^1F","goog/async/nexttick.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^2D","~$goog.dom.TagName","^3=","^2?","^2@"]]],["^1F","re_frame/utils.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^Y"]]],["^1F","reagent/dom.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[15]],"^1W",["^U","^S","^B","^21","^3:","^2J","^2M"]]],["^1S","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1597770557000,1597770557000,1549571078000,"^1T",["^ ","^1U",2,"^1V",["^E",[]],"^1W",["^1X"]]],["^1F","goog/events/event.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.Disposable","~$goog.events.EventId"]]],["^1F","goog/dom/htmlelement.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1F","cljs/core.cljs"],[1597770669034,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["~$goog.math.Long","~$goog.math.Integer","^24","^2:","^26","~$goog.Uri","^38"]]],["^1F","reagent/debug.cljs"],[1597780074412,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S"]]],["^1F","goog/events/browserevent.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","~$goog.debug","^28","~$goog.events.Event","~$goog.events.EventType","^2B","^29"]]],["^25","^Q"],[1597780074000],["^1F","goog/math/integer.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U"]]],["^1S","node_modules/scheduler/tracing.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",13,"^1V",["^E",[3,12,11]],"^1W",["^1X","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development","^1["]]],["^1S","node_modules/react-dom/cjs/react-dom.development.js"],[1597770557000,1597770557000,499162500000,"^1T",["^ ","^1U",14,"^1V",["^E",[0,4,13,6,3,9]],"^1W",["^1X","^@","^2S","^2T","^2V","~$module$node_modules$scheduler$tracing","^1["]]],["^1F","clojure/set.cljs"],[1597770669034,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S"]]],["^1F","goog/uri/utils.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^26","^27","^24"]]],["^1F","goog/events/listenable.js"],[1597770556544,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^3A"]]],["^1F","re_frame/trace.cljc"],[1597780074492,"^1T",["^ ","^1U",null,"^1V",["^E",[]],"^1W",["^U","^S","^2H","^Y","^3="]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F","^G","^J",null,"^K",["^ ","^L","^M","^N","^N","^O","^P","^Q","^Q","^R","^R","^S","^S","^T","^N","^U","^U","^V","^Q","^W","^W","^X","^R","^Y","^Y","^Z","^W","^M","^M","^P","^P","^[","^["],"^10",["^E",["^11"]],"^12",["^ ","^13","^N","^14","^N","^15","^N","^16","^N","^17","^N","^18","^N","^19","^Y","^1:","^["],"~:defs",["^ ","~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",206,"^9",8,"^:",206,"^;",18,"~:arglists",["^1=",["~$quote",["^1=",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1=",["~$f","^3Q","^3R"]]],"^3O",["^1=",[["~$f","^3Q","~$&","^3R"]]],"~:arglists-meta",["^1=",[null]]]],"^F","~$re-frame.std-interceptors/on-changes","^7","re_frame/std_interceptors.cljc","^;",18,"^3S",["^ ","^3T",true,"^3U",2,"^3V",2,"^3W",[["^1=",["~$f","^3Q","^3R"]]],"^3O",["^1=",[["~$f","^3Q","~$&","^3R"]]],"^3X",["^1=",[null]]],"^3W",[["^1=",["~$f","^3Q","^3R"]]],"~:protocol-impl",null,"^3U",2,"^3X",["^1=",[null]],"^9",1,"^3T",true,"~:methods",[["^ ","^3U",2,"^3T",true,"~:tag","~$cljs.core/IMap"]],"^8",206,"~:ret-tag","~$any","^:",206,"^3V",2,"~:fn-var",true,"^3O",["^1=",[["~$f","^3Q","~$&","^3R"]]]],"~$enrich",["^ ","^3N",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",178,"^9",7,"^:",178,"^;",13,"^3O",["^1=",["^3P",["^1=",[["~$f"]]]]]],"^F","~$re-frame.std-interceptors/enrich","^7","re_frame/std_interceptors.cljc","^;",13,"^3W",["^1=",[["~$f"]]],"^3Z",null,"^3X",["^1=",[null,null]],"^9",1,"^3T",false,"^8",178,"^42","^41","^:",178,"^3V",1,"^44",true,"^3O",["^1=",["^3P",["^1=",[["~$f"]]]]]],"~$path",["^ ","^3N",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",149,"^9",7,"^:",149,"^;",11,"^3O",["^1=",["^3P",["^1=",[["~$&","~$args"]]]]],"^3S",["^ ","^3T",true,"^3U",0,"^3V",0,"^3W",[["^1=",["^48"]]],"^3O",["^1=",[["~$&","^48"]]],"^3X",["^1=",[null]]]],"^F","~$re-frame.std-interceptors/path","^7","re_frame/std_interceptors.cljc","^;",11,"^3S",["^ ","^3T",true,"^3U",0,"^3V",0,"^3W",[["^1=",["^48"]]],"^3O",["^1=",[["~$&","^48"]]],"^3X",["^1=",[null]]],"^3W",[["^1=",["^48"]]],"^3Z",null,"^3U",0,"^3X",["^1=",[null]],"^9",1,"^3T",true,"^3[",[["^ ","^3U",0,"^3T",true,"^40","^41"]],"^8",149,"^42","^43","^:",149,"^3V",0,"^44",true,"^3O",["^1=",[["~$&","^48"]]]],"~$ctx-handler->interceptor",["^ ","^3N",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",123,"^9",7,"^:",123,"^;",31,"^3O",["^1=",["^3P",["^1=",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^F","~$re-frame.std-interceptors/ctx-handler->interceptor","^7","re_frame/std_interceptors.cljc","^;",31,"^3W",["^1=",[["^4;"]]],"^3Z",null,"^3X",["^1=",[null,null]],"^9",1,"^3T",false,"^8",123,"^42","^41","^:",123,"^3V",1,"^44",true,"^3O",["^1=",["^3P",["^1=",[["^4;"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^F","~$re-frame.std-interceptors/debug","^7","re_frame/std_interceptors.cljc","^8",15,"^9",1,"^:",15,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",15,"^9",6,"^:",15,"^;",11],"^40","^41"],"~$trim-v",["^ ","^F","~$re-frame.std-interceptors/trim-v","^7","re_frame/std_interceptors.cljc","^8",40,"^9",1,"^:",40,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",40,"^9",6,"^:",40,"^;",12],"^40","^41"],"~$after",["^ ","^3N",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",193,"^9",7,"^:",193,"^;",12,"^3O",["^1=",["^3P",["^1=",[["~$f"]]]]]],"^F","~$re-frame.std-interceptors/after","^7","re_frame/std_interceptors.cljc","^;",12,"^3W",["^1=",[["~$f"]]],"^3Z",null,"^3X",["^1=",[null,null]],"^9",1,"^3T",false,"^8",193,"^42","^41","^:",193,"^3V",1,"^44",true,"^3O",["^1=",["^3P",["^1=",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^3N",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",92,"^9",7,"^:",92,"^;",30,"^3O",["^1=",["^3P",["^1=",[["^4;"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^F","~$re-frame.std-interceptors/fx-handler->interceptor","^7","re_frame/std_interceptors.cljc","^;",30,"^3W",["^1=",[["^4;"]]],"^3Z",null,"^3X",["^1=",[null,null]],"^9",1,"^3T",false,"^8",92,"^42","^41","^:",92,"^3V",1,"^44",true,"^3O",["^1=",["^3P",["^1=",[["^4;"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^3N",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",60,"^9",7,"^:",60,"^;",30,"^3O",["^1=",["^3P",["^1=",[["^4;"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^F","~$re-frame.std-interceptors/db-handler->interceptor","^7","re_frame/std_interceptors.cljc","^;",30,"^3W",["^1=",[["^4;"]]],"^3Z",null,"^3X",["^1=",[null,null]],"^9",1,"^3T",false,"^8",60,"^42","^41","^:",60,"^3V",1,"^44",true,"^3O",["^1=",["^3P",["^1=",[["^4;"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",230,"^9",6,"^:",230,"^;",32],"^F","~$re-frame.std-interceptors/inject-global-interceptors","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",230,"^:",230,"^40","^41","^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1;",["^ ","^Q","^Q","^V","^Q","^S","^S"],"~:cljs.analyzer/constants",["^ ","^10",["^E",["~:path","~:tags","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log","~:re-frame.std-interceptors/untrimmed-event"]],"~:order",["^4Z","^4T","^59","^5;","^4X","^4Y","^4M","^4O","^4L","^56","^4U","^5<","^52","^4W","^5:","^4Q","^4V","^4R","^4S","^54","^4K","^4[","^4N","^57","^53","^51","^4J","^58","^55","^50","^4P"]],"^1B",["^ ","^11",["^E",[]]],"^1C",["^ "],"^1D",["^U","^S","^N","^Y","^R","^[","^P","^M","^W","^Q"]],"^I","^G","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1R",[["^5@","~:static-fns"],true,["^5@","~:elide-asserts"],true,["^5@","~:optimize-constants"],null,["^5@","^1I"],null,["^5@","~:external-config"],null,["^5@","~:tooling-config"],null,["^5@","~:emit-constants"],null,["^5@","~:load-tests"],false,["^5@","~:infer-externs"],true,["^5@","^1K"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^5@","~:fn-invoke-direct"],null,["^5@","~:source-map"],null]]]