["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/xregexp/lib/addons/build.js"],"~:js","shadow$provide[115]=function(h,b,g,d){Object.defineProperty(d,\"__esModule\",{value:!0});d.default=void 0;d.default=function(b){function d(b){var d=/^(?:\\(\\?:\\))*\\^/,f=/\\$(?:\\(\\?:\\))*$/;return d.test(b)&&f.test(b)&&f.test(b.replace(/\\\\[\\s\\S]/g,\"\"))?b.replace(d,\"\").replace(f,\"\"):b}function f(d,f){f=f?\"x\":\"\";return b.isRegExp(d)?d.xregexp&&d.xregexp.captureNames?d:b(d.source,f):b(d,f)}function g(d){return d instanceof RegExp?d:b.escape(d)}function h(b,d,f){b[\"subpattern\".concat(f)]=d;return b}function u(b,\nd,f){return b+(d<f.length-1?\"{{subpattern\".concat(d,\"}}\"):\"\")}var z=/(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g,v=b.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/,z],\"g\",{conjunction:\"or\"});b.tag=function(d){return function(f){for(var k=arguments.length,m=Array(1<k?k-1:0),n=1;n<k;n++)m[n-1]=arguments[n];k=m.map(g).reduce(h,{});m=f.raw.map(u).join(\"\");return b.build(m,k,d)}};b.build=function(g,h,k){k=k||\"\";var m=-1!==k.indexOf(\"x\"),n=/^\\(\\?([\\w$]+)\\)/.exec(g);n&&(k=b._clipDuplicates(k+n[1]));\nvar p={},t;for(t in h)h.hasOwnProperty(t)&&(n=f(h[t],m),p[t]={pattern:d(n.source),names:n.xregexp.captureNames||[]});g=f(g,m);var u=0,D,A=0,G=[0],E=g.xregexp.captureNames||[];g=g.source.replace(v,function(b,d,f,g,h){var k=d||f;if(k){if(!p.hasOwnProperty(k))throw new ReferenceError(\"Undefined property \".concat(b));if(d){var m=E[A];G[++A]=++u;b=\"(?\\x3c\".concat(m||k,\"\\x3e\")}else b=\"(?:\";D=u;d=p[k].pattern.replace(z,function(b,d,f){if(d){if(m=p[k].names[u-D],++u,m)return\"(?\\x3c\".concat(m,\"\\x3e\")}else if(f)return n=\n+f-1,p[k].names[n]?\"\\\\k\\x3c\".concat(p[k].names[n],\"\\x3e\"):\"\\\\\".concat(+f+D);return b});return\"\".concat(b).concat(d,\")\")}if(g){if(m=E[A],G[++A]=++u,m)return\"(?\\x3c\".concat(m,\"\\x3e\")}else if(h){var n=+h-1;return E[n]?\"\\\\k\\x3c\".concat(E[n],\"\\x3e\"):\"\\\\\".concat(G[+h])}return b});return b(g,k)}};g.exports=d[\"default\"]}","~:source","shadow$provide[115] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*!\n * XRegExp.build 4.2.4\n * <xregexp.com>\n * Steven Levithan (c) 2012-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  var REGEX_DATA = 'xregexp';\n  var subParts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\n  var parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subParts], 'g', {\n    conjunction: 'or'\n  });\n  /**\n   * Strips a leading `^` and trailing unescaped `$`, if both are present.\n   *\n   * @private\n   * @param {String} pattern Pattern to process.\n   * @returns {String} Pattern with edge anchors removed.\n   */\n\n  function deanchor(pattern) {\n    // Allow any number of empty noncapturing groups before/after anchors, because regexes\n    // built/generated by XRegExp sometimes include them\n    var leadingAnchor = /^(?:\\(\\?:\\))*\\^/;\n    var trailingAnchor = /\\$(?:\\(\\?:\\))*$/;\n\n    if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && // Ensure that the trailing `$` isn't escaped\n    trailingAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, ''))) {\n      return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');\n    }\n\n    return pattern;\n  }\n  /**\n   * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.\n   *\n   * @private\n   * @param {String|RegExp} value Value to convert.\n   * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not\n   *   already a regex generated by XRegExp\n   * @returns {RegExp} XRegExp object with XRegExp syntax applied.\n   */\n\n\n  function asXRegExp(value, addFlagX) {\n    var flags = addFlagX ? 'x' : '';\n    return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? // Don't recompile, to preserve capture names\n    value : // Recompile as XRegExp\n    XRegExp(value.source, flags) : // Compile string as XRegExp\n    XRegExp(value, flags);\n  }\n\n  function interpolate(substitution) {\n    return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);\n  }\n\n  function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {\n    subpatterns[\"subpattern\".concat(subpatternIndex)] = interpolated;\n    return subpatterns;\n  }\n\n  function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {\n    var hasSubpattern = subpatternIndex < rawLiterals.length - 1;\n    return raw + (hasSubpattern ? \"{{subpattern\".concat(subpatternIndex, \"}}\") : '');\n  }\n  /**\n   * Provides tagged template literals that create regexes with XRegExp syntax and flags. The\n   * provided pattern is handled as a raw string, so backslashes don't need to be escaped.\n   *\n   * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated\n   * patterns are treated as atomic units when quantified, interpolated strings have their special\n   * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated\n   * regexes if both are present, and any backreferences within an interpolated regex are\n   * rewritten to work within the overall pattern.\n   *\n   * @memberOf XRegExp\n   * @param {String} [flags] Any combination of XRegExp flags.\n   * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.\n   * @example\n   *\n   * const h12 = /1[0-2]|0?[1-9]/;\n   * const h24 = /2[0-3]|[01][0-9]/;\n   * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;\n   * const minutes = /^[0-5][0-9]$/;\n   * // Note that explicitly naming the 'minutes' group is required for named backreferences\n   * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;\n   * time.test('10:59'); // -> true\n   * XRegExp.exec('10:59', time).minutes; // -> '59'\n   */\n\n\n  XRegExp.tag = function (flags) {\n    return function (literals) {\n      for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        substitutions[_key - 1] = arguments[_key];\n      }\n\n      var subpatterns = substitutions.map(interpolate).reduce(reduceToSubpatternsObject, {});\n      var pattern = literals.raw.map(embedSubpatternAfter).join('');\n      return XRegExp.build(pattern, subpatterns, flags);\n    };\n  };\n  /**\n   * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in\n   * the outer pattern and provided subpatterns are automatically renumbered to work correctly.\n   * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.\n   *\n   * @memberOf XRegExp\n   * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\n   *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\n   *   character classes.\n   * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\n   *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\n   * @param {String} [flags] Any combination of XRegExp flags.\n   * @returns {RegExp} Regex with interpolated subpatterns.\n   * @example\n   *\n   * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\n   *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\n   *     h12: /1[0-2]|0?[1-9]/,\n   *     h24: /2[0-3]|[01][0-9]/\n   *   }, 'x'),\n   *   minutes: /^[0-5][0-9]$/\n   * });\n   * time.test('10:59'); // -> true\n   * XRegExp.exec('10:59', time).minutes; // -> '59'\n   */\n\n\n  XRegExp.build = function (pattern, subs, flags) {\n    flags = flags || ''; // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how\n    // some browsers convert `RegExp('\\n')` to a regex that contains the literal characters `\\`\n    // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.\n\n    var addFlagX = flags.indexOf('x') !== -1;\n    var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern); // Add flags within a leading mode modifier to the overall pattern's flags\n\n    if (inlineFlags) {\n      flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);\n    }\n\n    var data = {};\n\n    for (var p in subs) {\n      if (subs.hasOwnProperty(p)) {\n        // Passing to XRegExp enables extended syntax and ensures independent validity,\n        // lest an unescaped `(`, `)`, `[`, or trailing `\\` breaks the `(?:)` wrapper. For\n        // subpatterns provided as native regexes, it dies on octals and adds the property\n        // used to hold extended regex instance data, for simplicity.\n        var sub = asXRegExp(subs[p], addFlagX);\n        data[p] = {\n          // Deanchoring allows embedding independently useful anchored regexes. If you\n          // really need to keep your anchors, double them (i.e., `^^...$$`).\n          pattern: deanchor(sub.source),\n          names: sub[REGEX_DATA].captureNames || []\n        };\n      }\n    } // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\n    // helps keep this simple. Named captures will be put back.\n\n\n    var patternAsRegex = asXRegExp(pattern, addFlagX); // 'Caps' is short for 'captures'\n\n    var numCaps = 0;\n    var numPriorCaps;\n    var numOuterCaps = 0;\n    var outerCapsMap = [0];\n    var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];\n    var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {\n      var subName = $1 || $2;\n      var capName;\n      var intro;\n      var localCapIndex; // Named subpattern\n\n      if (subName) {\n        if (!data.hasOwnProperty(subName)) {\n          throw new ReferenceError(\"Undefined property \".concat($0));\n        } // Named subpattern was wrapped in a capturing group\n\n\n        if ($1) {\n          capName = outerCapNames[numOuterCaps];\n          outerCapsMap[++numOuterCaps] = ++numCaps; // If it's a named group, preserve the name. Otherwise, use the subpattern name\n          // as the capture name\n\n          intro = \"(?<\".concat(capName || subName, \">\");\n        } else {\n          intro = '(?:';\n        }\n\n        numPriorCaps = numCaps;\n        var rewrittenSubpattern = data[subName].pattern.replace(subParts, function (match, paren, backref) {\n          // Capturing group\n          if (paren) {\n            capName = data[subName].names[numCaps - numPriorCaps];\n            ++numCaps; // If the current capture has a name, preserve the name\n\n            if (capName) {\n              return \"(?<\".concat(capName, \">\");\n            } // Backreference\n\n          } else if (backref) {\n            localCapIndex = +backref - 1; // Rewrite the backreference\n\n            return data[subName].names[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`\n            \"\\\\k<\".concat(data[subName].names[localCapIndex], \">\") : \"\\\\\".concat(+backref + numPriorCaps);\n          }\n\n          return match;\n        });\n        return \"\".concat(intro).concat(rewrittenSubpattern, \")\");\n      } // Capturing group\n\n\n      if ($3) {\n        capName = outerCapNames[numOuterCaps];\n        outerCapsMap[++numOuterCaps] = ++numCaps; // If the current capture has a name, preserve the name\n\n        if (capName) {\n          return \"(?<\".concat(capName, \">\");\n        } // Backreference\n\n      } else if ($4) {\n        localCapIndex = +$4 - 1; // Rewrite the backreference\n\n        return outerCapNames[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`\n        \"\\\\k<\".concat(outerCapNames[localCapIndex], \">\") : \"\\\\\".concat(outerCapsMap[+$4]);\n      }\n\n      return $0;\n    });\n    return XRegExp(output, flags);\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["conjunction","__esModule","tag","value","build","names","pattern","default"]],"~:compiled-at",1597780537287,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$xregexp$lib$addons$build.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/xregexp/lib/addons/build.js\"],\n\"sourcesContent\":[\"shadow$provide[115] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\n\\n/*!\\n * XRegExp.build 4.2.4\\n * <xregexp.com>\\n * Steven Levithan (c) 2012-present MIT License\\n */\\nvar _default = function _default(XRegExp) {\\n  var REGEX_DATA = 'xregexp';\\n  var subParts = /(\\\\()(?!\\\\?)|\\\\\\\\([1-9]\\\\d*)|\\\\\\\\[\\\\s\\\\S]|\\\\[(?:[^\\\\\\\\\\\\]]|\\\\\\\\[\\\\s\\\\S])*\\\\]/g;\\n  var parts = XRegExp.union([/\\\\({{([\\\\w$]+)}}\\\\)|{{([\\\\w$]+)}}/, subParts], 'g', {\\n    conjunction: 'or'\\n  });\\n  /**\\n   * Strips a leading `^` and trailing unescaped `$`, if both are present.\\n   *\\n   * @private\\n   * @param {String} pattern Pattern to process.\\n   * @returns {String} Pattern with edge anchors removed.\\n   */\\n\\n  function deanchor(pattern) {\\n    // Allow any number of empty noncapturing groups before/after anchors, because regexes\\n    // built/generated by XRegExp sometimes include them\\n    var leadingAnchor = /^(?:\\\\(\\\\?:\\\\))*\\\\^/;\\n    var trailingAnchor = /\\\\$(?:\\\\(\\\\?:\\\\))*$/;\\n\\n    if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && // Ensure that the trailing `$` isn't escaped\\n    trailingAnchor.test(pattern.replace(/\\\\\\\\[\\\\s\\\\S]/g, ''))) {\\n      return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');\\n    }\\n\\n    return pattern;\\n  }\\n  /**\\n   * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.\\n   *\\n   * @private\\n   * @param {String|RegExp} value Value to convert.\\n   * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not\\n   *   already a regex generated by XRegExp\\n   * @returns {RegExp} XRegExp object with XRegExp syntax applied.\\n   */\\n\\n\\n  function asXRegExp(value, addFlagX) {\\n    var flags = addFlagX ? 'x' : '';\\n    return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? // Don't recompile, to preserve capture names\\n    value : // Recompile as XRegExp\\n    XRegExp(value.source, flags) : // Compile string as XRegExp\\n    XRegExp(value, flags);\\n  }\\n\\n  function interpolate(substitution) {\\n    return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);\\n  }\\n\\n  function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {\\n    subpatterns[\\\"subpattern\\\".concat(subpatternIndex)] = interpolated;\\n    return subpatterns;\\n  }\\n\\n  function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {\\n    var hasSubpattern = subpatternIndex < rawLiterals.length - 1;\\n    return raw + (hasSubpattern ? \\\"{{subpattern\\\".concat(subpatternIndex, \\\"}}\\\") : '');\\n  }\\n  /**\\n   * Provides tagged template literals that create regexes with XRegExp syntax and flags. The\\n   * provided pattern is handled as a raw string, so backslashes don't need to be escaped.\\n   *\\n   * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated\\n   * patterns are treated as atomic units when quantified, interpolated strings have their special\\n   * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated\\n   * regexes if both are present, and any backreferences within an interpolated regex are\\n   * rewritten to work within the overall pattern.\\n   *\\n   * @memberOf XRegExp\\n   * @param {String} [flags] Any combination of XRegExp flags.\\n   * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.\\n   * @example\\n   *\\n   * const h12 = /1[0-2]|0?[1-9]/;\\n   * const h24 = /2[0-3]|[01][0-9]/;\\n   * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;\\n   * const minutes = /^[0-5][0-9]$/;\\n   * // Note that explicitly naming the 'minutes' group is required for named backreferences\\n   * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;\\n   * time.test('10:59'); // -> true\\n   * XRegExp.exec('10:59', time).minutes; // -> '59'\\n   */\\n\\n\\n  XRegExp.tag = function (flags) {\\n    return function (literals) {\\n      for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n        substitutions[_key - 1] = arguments[_key];\\n      }\\n\\n      var subpatterns = substitutions.map(interpolate).reduce(reduceToSubpatternsObject, {});\\n      var pattern = literals.raw.map(embedSubpatternAfter).join('');\\n      return XRegExp.build(pattern, subpatterns, flags);\\n    };\\n  };\\n  /**\\n   * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in\\n   * the outer pattern and provided subpatterns are automatically renumbered to work correctly.\\n   * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.\\n   *\\n   * @memberOf XRegExp\\n   * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\\n   *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\\n   *   character classes.\\n   * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\\n   *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\\n   * @param {String} [flags] Any combination of XRegExp flags.\\n   * @returns {RegExp} Regex with interpolated subpatterns.\\n   * @example\\n   *\\n   * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\\n   *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\\n   *     h12: /1[0-2]|0?[1-9]/,\\n   *     h24: /2[0-3]|[01][0-9]/\\n   *   }, 'x'),\\n   *   minutes: /^[0-5][0-9]$/\\n   * });\\n   * time.test('10:59'); // -> true\\n   * XRegExp.exec('10:59', time).minutes; // -> '59'\\n   */\\n\\n\\n  XRegExp.build = function (pattern, subs, flags) {\\n    flags = flags || ''; // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how\\n    // some browsers convert `RegExp('\\\\n')` to a regex that contains the literal characters `\\\\`\\n    // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.\\n\\n    var addFlagX = flags.indexOf('x') !== -1;\\n    var inlineFlags = /^\\\\(\\\\?([\\\\w$]+)\\\\)/.exec(pattern); // Add flags within a leading mode modifier to the overall pattern's flags\\n\\n    if (inlineFlags) {\\n      flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);\\n    }\\n\\n    var data = {};\\n\\n    for (var p in subs) {\\n      if (subs.hasOwnProperty(p)) {\\n        // Passing to XRegExp enables extended syntax and ensures independent validity,\\n        // lest an unescaped `(`, `)`, `[`, or trailing `\\\\` breaks the `(?:)` wrapper. For\\n        // subpatterns provided as native regexes, it dies on octals and adds the property\\n        // used to hold extended regex instance data, for simplicity.\\n        var sub = asXRegExp(subs[p], addFlagX);\\n        data[p] = {\\n          // Deanchoring allows embedding independently useful anchored regexes. If you\\n          // really need to keep your anchors, double them (i.e., `^^...$$`).\\n          pattern: deanchor(sub.source),\\n          names: sub[REGEX_DATA].captureNames || []\\n        };\\n      }\\n    } // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\\n    // helps keep this simple. Named captures will be put back.\\n\\n\\n    var patternAsRegex = asXRegExp(pattern, addFlagX); // 'Caps' is short for 'captures'\\n\\n    var numCaps = 0;\\n    var numPriorCaps;\\n    var numOuterCaps = 0;\\n    var outerCapsMap = [0];\\n    var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];\\n    var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {\\n      var subName = $1 || $2;\\n      var capName;\\n      var intro;\\n      var localCapIndex; // Named subpattern\\n\\n      if (subName) {\\n        if (!data.hasOwnProperty(subName)) {\\n          throw new ReferenceError(\\\"Undefined property \\\".concat($0));\\n        } // Named subpattern was wrapped in a capturing group\\n\\n\\n        if ($1) {\\n          capName = outerCapNames[numOuterCaps];\\n          outerCapsMap[++numOuterCaps] = ++numCaps; // If it's a named group, preserve the name. Otherwise, use the subpattern name\\n          // as the capture name\\n\\n          intro = \\\"(?<\\\".concat(capName || subName, \\\">\\\");\\n        } else {\\n          intro = '(?:';\\n        }\\n\\n        numPriorCaps = numCaps;\\n        var rewrittenSubpattern = data[subName].pattern.replace(subParts, function (match, paren, backref) {\\n          // Capturing group\\n          if (paren) {\\n            capName = data[subName].names[numCaps - numPriorCaps];\\n            ++numCaps; // If the current capture has a name, preserve the name\\n\\n            if (capName) {\\n              return \\\"(?<\\\".concat(capName, \\\">\\\");\\n            } // Backreference\\n\\n          } else if (backref) {\\n            localCapIndex = +backref - 1; // Rewrite the backreference\\n\\n            return data[subName].names[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`\\n            \\\"\\\\\\\\k<\\\".concat(data[subName].names[localCapIndex], \\\">\\\") : \\\"\\\\\\\\\\\".concat(+backref + numPriorCaps);\\n          }\\n\\n          return match;\\n        });\\n        return \\\"\\\".concat(intro).concat(rewrittenSubpattern, \\\")\\\");\\n      } // Capturing group\\n\\n\\n      if ($3) {\\n        capName = outerCapNames[numOuterCaps];\\n        outerCapsMap[++numOuterCaps] = ++numCaps; // If the current capture has a name, preserve the name\\n\\n        if (capName) {\\n          return \\\"(?<\\\".concat(capName, \\\">\\\");\\n        } // Backreference\\n\\n      } else if ($4) {\\n        localCapIndex = +$4 - 1; // Rewrite the backreference\\n\\n        return outerCapNames[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`\\n        \\\"\\\\\\\\k<\\\".concat(outerCapNames[localCapIndex], \\\">\\\") : \\\"\\\\\\\\\\\".concat(outerCapsMap[+$4]);\\n      }\\n\\n      return $0;\\n    });\\n    return XRegExp(output, flags);\\n  };\\n};\\n\\nexports.default = _default;\\nmodule.exports = exports[\\\"default\\\"];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"_default\",\"XRegExp\",\"deanchor\",\"pattern\",\"leadingAnchor\",\"trailingAnchor\",\"test\",\"replace\",\"asXRegExp\",\"addFlagX\",\"flags\",\"isRegExp\",\"captureNames\",\"source\",\"interpolate\",\"substitution\",\"RegExp\",\"escape\",\"reduceToSubpatternsObject\",\"subpatterns\",\"interpolated\",\"subpatternIndex\",\"concat\",\"embedSubpatternAfter\",\"raw\",\"rawLiterals\",\"length\",\"subParts\",\"parts\",\"union\",\"conjunction\",\"tag\",\"XRegExp.tag\",\"literals\",\"_len\",\"arguments\",\"substitutions\",\"Array\",\"_key\",\"map\",\"reduce\",\"join\",\"build\",\"XRegExp.build\",\"subs\",\"indexOf\",\"inlineFlags\",\"exec\",\"_clipDuplicates\",\"data\",\"p\",\"hasOwnProperty\",\"sub\",\"names\",\"patternAsRegex\",\"numCaps\",\"numPriorCaps\",\"numOuterCaps\",\"outerCapsMap\",\"outerCapNames\",\"output\",\"$0\",\"$1\",\"$2\",\"$3\",\"$4\",\"subName\",\"ReferenceError\",\"capName\",\"intro\",\"rewrittenSubpattern\",\"match\",\"paren\",\"backref\",\"localCapIndex\"]\n}\n"]