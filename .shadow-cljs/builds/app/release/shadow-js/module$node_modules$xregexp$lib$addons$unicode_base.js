["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/xregexp/lib/addons/unicode-base.js"],"~:js","shadow$provide[117]=function(h,b,g,d){h=b(16);Object.defineProperty(d,\"__esModule\",{value:!0});d.default=void 0;var f=h(b(77));d.default=function(b){function d(b){return b.replace(/[- _]+/g,\"\").toLowerCase()}function g(b){var d=/^\\\\[xu](.+)/.exec(b);return d?z(d[1]):b.charCodeAt(\"\\\\\"===b[0]?1:0)}function h(d){var f=\"\",h=-1;b.forEach(d,/(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/,function(b){var d=g(b[1]);d>h+1&&(f+=\"\\\\u\".concat(A(v(h+1))),d>h+2&&(f+=\"-\\\\u\".concat(A(v(d-1)))));h=g(b[2]||\nb[1])});65535>h&&(f+=\"\\\\u\".concat(A(v(h+1))),65534>h&&(f+=\"-\\\\uFFFF\"));return f}var k={},z=b._dec,v=b._hex,A=b._pad4;b.addToken(/\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/,function(b,f,g){var m=\"P\"===b[1]||!!b[2],n=-1!==g.indexOf(\"A\");g=d(b[4]||b[3]);var p=k[g];if(\"P\"===b[1]&&b[2])throw new SyntaxError(\"Invalid double negation \"+b[0]);if(!k.hasOwnProperty(g))throw new SyntaxError(\"Unknown Unicode token \"+b[0]);if(p.inverseOf){g=d(p.inverseOf);if(!k.hasOwnProperty(g))throw new ReferenceError(\"\".concat(\"Unicode token missing data \"+\nb[0],\" -\\x3e \").concat(p.inverseOf));p=k[g];m=!m}if(!p.bmp&&!n)throw new SyntaxError(\"Astral mode required for Unicode token \"+b[0]);if(n){if(\"class\"===f)throw new SyntaxError(\"Astral mode does not support Unicode tokens within character classes\");b=m?\"a!\":\"a\\x3d\";(f=k[g][b])||(f=k[g],g=k[g],n=\"\",g.bmp&&!g.isBmpLast&&(n=\"[\".concat(g.bmp,\"]\").concat(g.astral?\"|\":\"\")),g.astral&&(n+=g.astral),g.isBmpLast&&g.bmp&&(n+=\"\".concat(g.astral?\"|\":\"\",\"[\").concat(g.bmp,\"]\")),m=m?\"(?:(?!\".concat(n,\")(?:[\\ud800-\\udbff][\\udc00-\\udfff]|[\\x00-ï¿¿]))\"):\n\"(?:\".concat(n,\")\"),f=f[b]=m);return f}return\"class\"===f?m?k[g][\"b!\"]||(k[g][\"b!\"]=h(k[g].bmp)):p.bmp:\"\".concat((m?\"[^\":\"[\")+p.bmp,\"]\")},{scope:\"all\",optionalFlags:\"A\",leadChar:\"\\\\\"});b.addUnicodeData=function(g){var h=!0,m=!1,n=void 0;try{for(var p=(0,f.default)(g),u;!(h=(u=p.next()).done);h=!0){var v=u.value;if(!v.name)throw Error(\"Unicode token requires name\");if(!(v.inverseOf||v.bmp||v.astral))throw Error(\"Unicode token has no character data \"+v.name);k[d(v.name)]=v;v.alias&&(k[d(v.alias)]=v)}}catch(y){m=\n!0,n=y}finally{try{h||null==p.return||p.return()}finally{if(m)throw n;}}b.cache.flush(\"patterns\")};b._getUnicodeProperty=function(b){b=d(b);return k[b]}};g.exports=d[\"default\"]}","~:source","shadow$provide[117] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\n/*!\n * XRegExp Unicode Base 4.2.4\n * <xregexp.com>\n * Steven Levithan (c) 2008-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds base support for Unicode matching:\n   * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n   *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\n   *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n   *\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\n   * available to provide data for Unicode categories, scripts, blocks, and properties.\n   *\n   * @requires XRegExp\n   */\n  // ==--------------------------==\n  // Private stuff\n  // ==--------------------------==\n  // Storage for Unicode data\n  var unicode = {}; // Reuse utils\n\n  var dec = XRegExp._dec;\n  var hex = XRegExp._hex;\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n\n  function normalize(name) {\n    return name.replace(/[- _]+/g, '').toLowerCase();\n  } // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n\n\n  function charCode(chr) {\n    var esc = /^\\\\[xu](.+)/.exec(chr);\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\' ? 1 : 0);\n  } // Inverts a list of ordered BMP characters and ranges\n\n\n  function invertBmp(range) {\n    var output = '';\n    var lastEnd = -1;\n    XRegExp.forEach(range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function (m) {\n      var start = charCode(m[1]);\n\n      if (start > lastEnd + 1) {\n        output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n        if (start > lastEnd + 2) {\n          output += \"-\\\\u\".concat(pad4(hex(start - 1)));\n        }\n      }\n\n      lastEnd = charCode(m[2] || m[1]);\n    });\n\n    if (lastEnd < 0xFFFF) {\n      output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n      if (lastEnd < 0xFFFE) {\n        output += '-\\\\uFFFF';\n      }\n    }\n\n    return output;\n  } // Generates an inverted BMP range on first use\n\n\n  function cacheInvertedBmp(slug) {\n    var prop = 'b!';\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\n  } // Combines and optionally negates BMP and astral data\n\n\n  function buildAstral(slug, isNegated) {\n    var item = unicode[slug];\n    var combined = '';\n\n    if (item.bmp && !item.isBmpLast) {\n      combined = \"[\".concat(item.bmp, \"]\").concat(item.astral ? '|' : '');\n    }\n\n    if (item.astral) {\n      combined += item.astral;\n    }\n\n    if (item.isBmpLast && item.bmp) {\n      combined += \"\".concat(item.astral ? '|' : '', \"[\").concat(item.bmp, \"]\");\n    } // Astral Unicode tokens always match a code point, never a code unit\n\n\n    return isNegated ? \"(?:(?!\".concat(combined, \")(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))\") : \"(?:\".concat(combined, \")\");\n  } // Builds a complete astral pattern on first use\n\n\n  function cacheAstral(slug, isNegated) {\n    var prop = isNegated ? 'a!' : 'a=';\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\n  } // ==--------------------------==\n  // Core functionality\n  // ==--------------------------==\n\n  /*\n   * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.\n   */\n\n\n  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n  /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \\P{..} or \\p{^..}\n\n    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n\n    var isAstralMode = flags.indexOf('A') !== -1; // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`\n\n    var slug = normalize(match[4] || match[3]); // Token data object\n\n    var item = unicode[slug];\n\n    if (match[1] === 'P' && match[2]) {\n      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\n    }\n\n    if (!unicode.hasOwnProperty(slug)) {\n      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\n    } // Switch to the negated form of the referenced Unicode token\n\n\n    if (item.inverseOf) {\n      slug = normalize(item.inverseOf);\n\n      if (!unicode.hasOwnProperty(slug)) {\n        throw new ReferenceError(\"\".concat(ERR_UNKNOWN_REF + match[0], \" -> \").concat(item.inverseOf));\n      }\n\n      item = unicode[slug];\n      isNegated = !isNegated;\n    }\n\n    if (!(item.bmp || isAstralMode)) {\n      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\n    }\n\n    if (isAstralMode) {\n      if (scope === 'class') {\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n      }\n\n      return cacheAstral(slug, isNegated);\n    }\n\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \"\".concat((isNegated ? '[^' : '[') + item.bmp, \"]\");\n  }, {\n    scope: 'all',\n    optionalFlags: 'A',\n    leadChar: '\\\\'\n  });\n  /**\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n   *\n   * @memberOf XRegExp\n   * @param {Array} data Objects with named character ranges. Each object may have properties\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\n   *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\n   *   defined as the exact inverse of another token.\n   * @example\n   *\n   * // Basic use\n   * XRegExp.addUnicodeData([{\n   *   name: 'XDigit',\n   *   alias: 'Hexadecimal',\n   *   bmp: '0-9A-Fa-f'\n   * }]);\n   * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n   */\n\n  XRegExp.addUnicodeData = function (data) {\n    var ERR_NO_NAME = 'Unicode token requires name';\n    var ERR_NO_DATA = 'Unicode token has no character data ';\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = (0, _getIterator2.default)(data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n\n        if (!item.name) {\n          throw new Error(ERR_NO_NAME);\n        }\n\n        if (!(item.inverseOf || item.bmp || item.astral)) {\n          throw new Error(ERR_NO_DATA + item.name);\n        }\n\n        unicode[normalize(item.name)] = item;\n\n        if (item.alias) {\n          unicode[normalize(item.alias)] = item;\n        }\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n      // flags might now produce different results\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    XRegExp.cache.flush('patterns');\n  };\n  /**\n   * @ignore\n   *\n   * Return a reference to the internal Unicode definition structure for the given Unicode\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex\n   * constructs.\n   *\n   * @memberOf XRegExp\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\n   *   Properties and Property Aliases.\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\n   *\n   * @note\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\n   *\n   * @note\n   * This method is *not* part of the officially documented API and may change or be removed in\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\n   * structures set up by XRegExp.\n   */\n\n\n  XRegExp._getUnicodeProperty = function (name) {\n    var slug = normalize(name);\n    return unicode[slug];\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime_corejs2$core_js$get_iterator","~$shadow.js","~$module$node_modules$$babel$runtime_corejs2$helpers$interopRequireDefault"]],"~:properties",["^5",["leadChar","__esModule","optionalFlags","value","scope","addUnicodeData","_getUnicodeProperty","default"]],"~:compiled-at",1597780537290,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$xregexp$lib$addons$unicode_base.js\",\n\"lineCount\":5,\n\"mappings\":\"AAAAA,cAAA,CAAe,GAAf,CAAA,CAAsB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAG1DC,CAAAA,CAAyBH,CAAA,CAAQ,EAAR,CAE7BI,OAAAC,eAAA,CAAsBH,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,EAAAK,QAAA,CAAkB,IAAK,EAEvB,KAAIC,EAAgBL,CAAA,CAAuBH,CAAA,CAAQ,EAAR,CAAvB,CA0QpBE,EAAAK,QAAA,CAnQeE,QAAiB,CAACC,CAAD,CAAU,CAwBxCC,QAASA,EAAS,CAACC,CAAD,CAAO,CACvB,MAAOA,EAAAC,QAAA,CAAa,SAAb,CAAwB,EAAxB,CAAAC,YAAA,EADgB,CAKzBC,QAASA,EAAQ,CAACC,CAAD,CAAM,CACrB,IAAIC,EAAM,aAAAC,KAAA,CAAmBF,CAAnB,CACV,OAAOC,EAAA,CAAME,CAAA,CAAIF,CAAA,CAAI,CAAJ,CAAJ,CAAN,CAAoBD,CAAAI,WAAA,CAA0B,IAAX,GAAAJ,CAAA,CAAI,CAAJ,CAAA,CAAkB,CAAlB,CAAsB,CAArC,CAFN,CAMvBK,QAASA,EAAS,CAACC,CAAD,CAAQ,CACxB,IAAIC,EAAS,EAAb,CACIC,EAAW,EACfd,EAAAe,QAAA,CAAgBH,CAAhB,CAAuB,0DAAvB,CAAmF,QAAS,CAACI,CAAD,CAAI,CAC9F,IAAIC,EAAQZ,CAAA,CAASW,CAAA,CAAE,CAAF,CAAT,CAERC,EAAJ,CAAYH,CAAZ,CAAsB,CAAtB,GACED,CAEA,EAFU,KAAAK,OAAA,CAAaC,CAAA,CAAKC,CAAA,CAAIN,CAAJ,CAAc,CAAd,CAAL,CAAb,CAEV,CAAIG,CAAJ,CAAYH,CAAZ,CAAsB,CAAtB,GACED,CADF,EACY,MAAAK,OAAA,CAAcC,CAAA,CAAKC,CAAA,CAAIH,CAAJ,CAAY,CAAZ,CAAL,CAAd,CADZ,CAHF,CAQAH,EAAA,CAAUT,CAAA,CAASW,CAAA,CAAE,CAAF,CAAT;AAAiBA,CAAA,CAAE,CAAF,CAAjB,CAXoF,CAAhG,CAcc,MAAd,CAAIF,CAAJ,GACED,CAEA,EAFU,KAAAK,OAAA,CAAaC,CAAA,CAAKC,CAAA,CAAIN,CAAJ,CAAc,CAAd,CAAL,CAAb,CAEV,CAAc,KAAd,CAAIA,CAAJ,GACED,CADF,EACY,UADZ,CAHF,CAQA,OAAOA,EAzBiB,CAjB1B,IAAIQ,EAAU,EAAd,CAEIZ,EAAMT,CAAAsB,KAFV,CAGIF,EAAMpB,CAAAuB,KAHV,CAIIJ,EAAOnB,CAAAwB,MAiFXxB,EAAAyB,SAAA,CACA,uCADA,CACyC,QAAS,CAACC,CAAD,CAAQC,CAAR,CAAeC,CAAf,CAAsB,CAOtE,IAAIC,EAAyB,GAAzBA,GAAYH,CAAA,CAAM,CAAN,CAAZG,EAAgC,CAAC,CAACH,CAAA,CAAM,CAAN,CAAtC,CAEII,EAAuC,EAAvCA,GAAeF,CAAAG,QAAA,CAAc,GAAd,CAEfC,EAAAA,CAAO/B,CAAA,CAAUyB,CAAA,CAAM,CAAN,CAAV,EAAsBA,CAAA,CAAM,CAAN,CAAtB,CAEX,KAAIO,EAAOZ,CAAA,CAAQW,CAAR,CAEX,IAAiB,GAAjB,GAAIN,CAAA,CAAM,CAAN,CAAJ,EAAwBA,CAAA,CAAM,CAAN,CAAxB,CACE,KAAM,KAAIQ,WAAJ,CAfaC,0BAeb,CAAiCT,CAAA,CAAM,CAAN,CAAjC,CAAN,CAGF,GAAI,CAACL,CAAAe,eAAA,CAAuBJ,CAAvB,CAAL,CACE,KAAM,KAAIE,WAAJ,CAlBeG,wBAkBf,CAAmCX,CAAA,CAAM,CAAN,CAAnC,CAAN,CAIF,GAAIO,CAAAK,UAAJ,CAAoB,CAClBN,CAAA,CAAO/B,CAAA,CAAUgC,CAAAK,UAAV,CAEP,IAAI,CAACjB,CAAAe,eAAA,CAAuBJ,CAAvB,CAAL,CACE,KAAM,KAAIO,cAAJ,CAAmB,EAAArB,OAAA,CAzBPsB,6BAyBO;AAA4Bd,CAAA,CAAM,CAAN,CAA5B,CAAsC,SAAtC,CAAAR,OAAA,CAAqDe,CAAAK,UAArD,CAAnB,CAAN,CAGFL,CAAA,CAAOZ,CAAA,CAAQW,CAAR,CACPH,EAAA,CAAY,CAACA,CARK,CAWpB,GAAMY,CAAAR,CAAAQ,IAAN,EAAkBX,CAAAA,CAAlB,CACE,KAAM,KAAII,WAAJ,CAhCcQ,yCAgCd,CAAkChB,CAAA,CAAM,CAAN,CAAlC,CAAN,CAGF,GAAII,CAAJ,CAAkB,CAChB,GAAc,OAAd,GAAIH,CAAJ,CACE,KAAM,KAAIO,WAAJ,CApCgBS,sEAoChB,CAAN,CArDAC,CAAAA,CAwDuBf,CAxDhB,CAAY,IAAZ,CAAmB,OACvB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAwB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAtB3BI,CAsB2B,CAtBpBZ,CAAA,CAsBoBW,CAtBpB,CAsBoB,CArB3Ba,CAqB2B,CArBhB,EAqBgB,CAnB3BZ,CAAAQ,IAmB2B,EAnBf,CAACR,CAAAa,UAmBc,GAlB7BD,CAkB6B,CAlBlB,GAAA3B,OAAA,CAAWe,CAAAQ,IAAX,CAAqB,GAArB,CAAAvB,OAAA,CAAiCe,CAAAc,OAAA,CAAc,GAAd,CAAoB,EAArD,CAkBkB,EAf3Bd,CAAAc,OAe2B,GAd7BF,CAc6B,EAdjBZ,CAAAc,OAciB,EAX3Bd,CAAAa,UAW2B,EAXTb,CAAAQ,IAWS,GAV7BI,CAU6B,EAVjB,EAAA3B,OAAA,CAAUe,CAAAc,OAAA,CAAc,GAAd,CAAoB,EAA9B,CAAkC,GAAlC,CAAA7B,OAAA,CAA8Ce,CAAAQ,IAA9C,CAAwD,GAAxD,CAUiB,EAN/B,CAM+B,CANxBZ,CAAA,CAAY,QAAAX,OAAA,CAAgB2B,CAAhB,CAA0B,+CAA1B,CAAZ;AAA4F,KAAA3B,OAAA,CAAa2B,CAAb,CAAuB,GAAvB,CAMpE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAxB,CAuDL,OAvDK,EAkDW,CAQlB,MAAiB,OAAV,GAAAlB,CAAA,CAAoB,CAAA,CArFpBN,CAAA,CAqFoBW,CArFpB,CAAA,CADIY,IACJ,CAqFoB,GArFIvB,CAAA,CAqFJW,CArFI,CAAA,CADpBY,IACoB,CAqFJ,CArF0BjC,CAAA,CAAUU,CAAA,CAqFpCW,CArFoC,CAAAS,IAAV,CAqF1B,EAAA,CAAA,IAApB,CAAoE,EAAA,OAAA,EAAA,CAAA,CAAA,IAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,GAAA,CA/CL,CADxE,CAiDG,CACDd,MAAO,KADN,CAEDqB,cAAe,GAFd,CAGDC,SAAU,IAHT,CAjDH,CAmFAjD,EAAAkD,eAAA,CAAyBC,QAAS,CAACC,CAAD,CAAO,CAGvC,IAAIC,EAA4B,CAAA,CAAhC,CACIC,EAAoB,CAAA,CADxB,CAEIC,EAAiBC,IAAAA,EAErB,IAAI,CACF,IADE,IACOC,EAAY,CAAC,CAAA,CAAG3D,CAAAD,QAAJ,EAA2BuD,CAA3B,CADnB,CACqDM,CAAvD,CAA8D,EAAEL,CAAF,CAA8BM,CAACD,CAADC,CAASF,CAAAG,KAAA,EAATD,MAA9B,CAA9D,CAA8HN,CAA9H,CAA0J,CAAA,CAA1J,CAAgK,CAC9J,IAAIpB,EAAOyB,CAAA9D,MAEX,IAAI,CAACqC,CAAA/B,KAAL,CACE,KAAU2D,MAAJ,CAXMC,6BAWN,CAAN,CAGF,GAAI,EAAE7B,CAAAK,UAAF,EAAoBL,CAAAQ,IAApB,EAAgCR,CAAAc,OAAhC,CAAJ,CACE,KAAUc,MAAJ,CAdME,sCAcN,CAAwB9B,CAAA/B,KAAxB,CAAN,CAGFmB,CAAA,CAAQpB,CAAA,CAAUgC,CAAA/B,KAAV,CAAR,CAAA,CAAgC+B,CAE5BA,EAAA+B,MAAJ,GACE3C,CAAA,CAAQpB,CAAA,CAAUgC,CAAA+B,MAAV,CAAR,CADF,CACmC/B,CADnC,CAb8J,CAD9J,CAoBF,MAAOgC,CAAP,CAAY,CACZX,CACA;AADoB,CAAA,CACpB,CAAAC,CAAA,CAAiBU,CAFL,CApBd,OAuBU,CACR,GAAI,CACGZ,CAAL,EAAsD,IAAtD,EAAkCI,CAAAS,OAAlC,EACET,CAAAS,OAAA,EAFA,CAAJ,OAIU,CACR,GAAIZ,CAAJ,CACE,KAAMC,EAAN,CAFM,CALF,CAYVvD,CAAAmE,MAAAC,MAAA,CAAoB,UAApB,CA1CuC,CAmEzCpE,EAAAqE,oBAAA,CAA8BC,QAAS,CAACpE,CAAD,CAAO,CACxC8B,CAAAA,CAAO/B,CAAA,CAAUC,CAAV,CACX,OAAOmB,EAAA,CAAQW,CAAR,CAFqC,CA7PN,CAoQ1CzC,EAAAC,QAAA,CAAiBA,CAAA,CAAQ,SAAR,CArR6C;\",\n\"sources\":[\"node_modules/xregexp/lib/addons/unicode-base.js\"],\n\"sourcesContent\":[\"shadow$provide[117] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime-corejs2/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\n\\nvar _getIterator2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs2/core-js/get-iterator\\\"));\\n\\n/*!\\n * XRegExp Unicode Base 4.2.4\\n * <xregexp.com>\\n * Steven Levithan (c) 2008-present MIT License\\n */\\nvar _default = function _default(XRegExp) {\\n  /**\\n   * Adds base support for Unicode matching:\\n   * - Adds syntax `\\\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\\\P{..}` or\\n   *   `\\\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\\n   *   braces for token names that are a single letter (e.g. `\\\\pL` or `PL`).\\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\\n   *\\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\\n   * available to provide data for Unicode categories, scripts, blocks, and properties.\\n   *\\n   * @requires XRegExp\\n   */\\n  // ==--------------------------==\\n  // Private stuff\\n  // ==--------------------------==\\n  // Storage for Unicode data\\n  var unicode = {}; // Reuse utils\\n\\n  var dec = XRegExp._dec;\\n  var hex = XRegExp._hex;\\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\\n\\n  function normalize(name) {\\n    return name.replace(/[- _]+/g, '').toLowerCase();\\n  } // Gets the decimal code of a literal code unit, \\\\xHH, \\\\uHHHH, or a backslash-escaped literal\\n\\n\\n  function charCode(chr) {\\n    var esc = /^\\\\\\\\[xu](.+)/.exec(chr);\\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\\\\\' ? 1 : 0);\\n  } // Inverts a list of ordered BMP characters and ranges\\n\\n\\n  function invertBmp(range) {\\n    var output = '';\\n    var lastEnd = -1;\\n    XRegExp.forEach(range, /(\\\\\\\\x..|\\\\\\\\u....|\\\\\\\\?[\\\\s\\\\S])(?:-(\\\\\\\\x..|\\\\\\\\u....|\\\\\\\\?[\\\\s\\\\S]))?/, function (m) {\\n      var start = charCode(m[1]);\\n\\n      if (start > lastEnd + 1) {\\n        output += \\\"\\\\\\\\u\\\".concat(pad4(hex(lastEnd + 1)));\\n\\n        if (start > lastEnd + 2) {\\n          output += \\\"-\\\\\\\\u\\\".concat(pad4(hex(start - 1)));\\n        }\\n      }\\n\\n      lastEnd = charCode(m[2] || m[1]);\\n    });\\n\\n    if (lastEnd < 0xFFFF) {\\n      output += \\\"\\\\\\\\u\\\".concat(pad4(hex(lastEnd + 1)));\\n\\n      if (lastEnd < 0xFFFE) {\\n        output += '-\\\\\\\\uFFFF';\\n      }\\n    }\\n\\n    return output;\\n  } // Generates an inverted BMP range on first use\\n\\n\\n  function cacheInvertedBmp(slug) {\\n    var prop = 'b!';\\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\\n  } // Combines and optionally negates BMP and astral data\\n\\n\\n  function buildAstral(slug, isNegated) {\\n    var item = unicode[slug];\\n    var combined = '';\\n\\n    if (item.bmp && !item.isBmpLast) {\\n      combined = \\\"[\\\".concat(item.bmp, \\\"]\\\").concat(item.astral ? '|' : '');\\n    }\\n\\n    if (item.astral) {\\n      combined += item.astral;\\n    }\\n\\n    if (item.isBmpLast && item.bmp) {\\n      combined += \\\"\\\".concat(item.astral ? '|' : '', \\\"[\\\").concat(item.bmp, \\\"]\\\");\\n    } // Astral Unicode tokens always match a code point, never a code unit\\n\\n\\n    return isNegated ? \\\"(?:(?!\\\".concat(combined, \\\")(?:[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\0-\\\\uFFFF]))\\\") : \\\"(?:\\\".concat(combined, \\\")\\\");\\n  } // Builds a complete astral pattern on first use\\n\\n\\n  function cacheAstral(slug, isNegated) {\\n    var prop = isNegated ? 'a!' : 'a=';\\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\\n  } // ==--------------------------==\\n  // Core functionality\\n  // ==--------------------------==\\n\\n  /*\\n   * Add astral mode (flag A) and Unicode token syntax: `\\\\p{..}`, `\\\\P{..}`, `\\\\p{^..}`, `\\\\pC`.\\n   */\\n\\n\\n  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\\\p{^}`\\n  /\\\\\\\\([pP])(?:{(\\\\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \\\\P{..} or \\\\p{^..}\\n\\n    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\\n\\n    var isAstralMode = flags.indexOf('A') !== -1; // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\\\p{}`\\n\\n    var slug = normalize(match[4] || match[3]); // Token data object\\n\\n    var item = unicode[slug];\\n\\n    if (match[1] === 'P' && match[2]) {\\n      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\\n    }\\n\\n    if (!unicode.hasOwnProperty(slug)) {\\n      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\\n    } // Switch to the negated form of the referenced Unicode token\\n\\n\\n    if (item.inverseOf) {\\n      slug = normalize(item.inverseOf);\\n\\n      if (!unicode.hasOwnProperty(slug)) {\\n        throw new ReferenceError(\\\"\\\".concat(ERR_UNKNOWN_REF + match[0], \\\" -> \\\").concat(item.inverseOf));\\n      }\\n\\n      item = unicode[slug];\\n      isNegated = !isNegated;\\n    }\\n\\n    if (!(item.bmp || isAstralMode)) {\\n      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\\n    }\\n\\n    if (isAstralMode) {\\n      if (scope === 'class') {\\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\\n      }\\n\\n      return cacheAstral(slug, isNegated);\\n    }\\n\\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \\\"\\\".concat((isNegated ? '[^' : '[') + item.bmp, \\\"]\\\");\\n  }, {\\n    scope: 'all',\\n    optionalFlags: 'A',\\n    leadChar: '\\\\\\\\'\\n  });\\n  /**\\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\\\p` or `\\\\P`.\\n   *\\n   * @memberOf XRegExp\\n   * @param {Array} data Objects with named character ranges. Each object may have properties\\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\\n   *   `astral` data should be a combination of literal characters and `\\\\xHH` or `\\\\uHHHH` escape\\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\\n   *   defined as the exact inverse of another token.\\n   * @example\\n   *\\n   * // Basic use\\n   * XRegExp.addUnicodeData([{\\n   *   name: 'XDigit',\\n   *   alias: 'Hexadecimal',\\n   *   bmp: '0-9A-Fa-f'\\n   * }]);\\n   * XRegExp('\\\\\\\\p{XDigit}:\\\\\\\\p{Hexadecimal}+').test('0:3D'); // -> true\\n   */\\n\\n  XRegExp.addUnicodeData = function (data) {\\n    var ERR_NO_NAME = 'Unicode token requires name';\\n    var ERR_NO_DATA = 'Unicode token has no character data ';\\n    var _iteratorNormalCompletion = true;\\n    var _didIteratorError = false;\\n    var _iteratorError = undefined;\\n\\n    try {\\n      for (var _iterator = (0, _getIterator2.default)(data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\\n        var item = _step.value;\\n\\n        if (!item.name) {\\n          throw new Error(ERR_NO_NAME);\\n        }\\n\\n        if (!(item.inverseOf || item.bmp || item.astral)) {\\n          throw new Error(ERR_NO_DATA + item.name);\\n        }\\n\\n        unicode[normalize(item.name)] = item;\\n\\n        if (item.alias) {\\n          unicode[normalize(item.alias)] = item;\\n        }\\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\\n      // flags might now produce different results\\n\\n    } catch (err) {\\n      _didIteratorError = true;\\n      _iteratorError = err;\\n    } finally {\\n      try {\\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\\n          _iterator.return();\\n        }\\n      } finally {\\n        if (_didIteratorError) {\\n          throw _iteratorError;\\n        }\\n      }\\n    }\\n\\n    XRegExp.cache.flush('patterns');\\n  };\\n  /**\\n   * @ignore\\n   *\\n   * Return a reference to the internal Unicode definition structure for the given Unicode\\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\\\p` or `\\\\P` regex\\n   * constructs.\\n   *\\n   * @memberOf XRegExp\\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\\n   *   Properties and Property Aliases.\\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\\n   *\\n   * @note\\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\\n   *\\n   * @note\\n   * This method is *not* part of the officially documented API and may change or be removed in\\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\\n   * structures set up by XRegExp.\\n   */\\n\\n\\n  XRegExp._getUnicodeProperty = function (name) {\\n    var slug = normalize(name);\\n    return unicode[slug];\\n  };\\n};\\n\\nexports.default = _default;\\nmodule.exports = exports[\\\"default\\\"];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"default\",\"_getIterator2\",\"_default\",\"XRegExp\",\"normalize\",\"name\",\"replace\",\"toLowerCase\",\"charCode\",\"chr\",\"esc\",\"exec\",\"dec\",\"charCodeAt\",\"invertBmp\",\"range\",\"output\",\"lastEnd\",\"forEach\",\"m\",\"start\",\"concat\",\"pad4\",\"hex\",\"unicode\",\"_dec\",\"_hex\",\"_pad4\",\"addToken\",\"match\",\"scope\",\"flags\",\"isNegated\",\"isAstralMode\",\"indexOf\",\"slug\",\"item\",\"SyntaxError\",\"ERR_DOUBLE_NEG\",\"hasOwnProperty\",\"ERR_UNKNOWN_NAME\",\"inverseOf\",\"ReferenceError\",\"ERR_UNKNOWN_REF\",\"bmp\",\"ERR_ASTRAL_ONLY\",\"ERR_ASTRAL_IN_CLASS\",\"prop\",\"combined\",\"isBmpLast\",\"astral\",\"optionalFlags\",\"leadChar\",\"addUnicodeData\",\"XRegExp.addUnicodeData\",\"data\",\"_iteratorNormalCompletion\",\"_didIteratorError\",\"_iteratorError\",\"undefined\",\"_iterator\",\"_step\",\"done\",\"next\",\"Error\",\"ERR_NO_NAME\",\"ERR_NO_DATA\",\"alias\",\"err\",\"return\",\"cache\",\"flush\",\"_getUnicodeProperty\",\"XRegExp._getUnicodeProperty\"]\n}\n"]