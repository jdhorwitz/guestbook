["^ ","~:output",["^ ","~:js","goog.provide('mount.tools.macro');\ngoog.require('cljs.core');\n/**\n * To be used in macro definitions.\n * Handles optional docstrings and attribute maps for a name to be defined\n * in a list of macro arguments. If the first macro argument is a string,\n * it is added as a docstring to name and removed from the macro argument\n * list. If afterwards the first macro argument is a map, its entries are\n * added to the name's metadata map and the map is removed from the\n * macro argument list. The return value is a vector containing the name\n * with its extended metadata map and the list of unprocessed macro\n * arguments.\n */\nmount.tools.macro.name_with_attributes = (function mount$tools$macro$name_with_attributes(name,macro_args){\nvar vec__65818 = ((typeof cljs.core.first(macro_args) === 'string')?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(macro_args),cljs.core.next(macro_args)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,macro_args], null));\nvar docstring = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65818,(0),null);\nvar macro_args__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65818,(1),null);\nvar vec__65821 = ((cljs.core.map_QMARK_(cljs.core.first(macro_args__$1)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(macro_args__$1),cljs.core.next(macro_args__$1)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY,macro_args__$1], null));\nvar attr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65821,(0),null);\nvar macro_args__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65821,(1),null);\nvar attr__$1 = (cljs.core.truth_(docstring)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(attr,new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),docstring):attr);\nvar attr__$2 = (cljs.core.truth_(cljs.core.meta(name))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.meta(name),attr__$1):attr__$1);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(name,attr__$2),macro_args__$2], null);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","mount/tools/macro.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$deftime","~$mount.tools.macrovich"],"~:excludes",["~#set",["~$case"]],"~:name","~$mount.tools.macro","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^N","~$goog","^O"],"~:seen",["^F",["~:require-macros"]],"~:uses",null,"^Q",["^ ","^D","^D","^N","^N"],"~:form",["~#list",["~$ns","^I",["^T",["~:refer-clojure","~:exclude",["^G"]]],["^T",["^Q",["^D","~:refer",["^C"]]]]]],"~:flags",["^ ","^Q",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N"]],"^K","^I","~:resource-id",["~:shadow.build.classpath/resource","mount/tools/macro.cljc"],"~:compiled-at",1597886899963,"~:resource-name","mount/tools/macro.cljc","~:warnings",[],"~:source","(ns mount.tools.macro\n  (:refer-clojure :exclude [case])\n  #?(:cljs (:require-macros [mount.tools.macrovich :refer [deftime]])\n     :clj (:require [mount.tools.macrovich :refer [deftime]])))\n\n(deftime\n\n  (defmacro on-error [msg f & {:keys [fail?]\n                               :or {fail? true}}]\n    `(mount.tools.macrovich/case\n      :clj  (try ~f\n                 (catch Throwable t#\n                   (if ~fail?\n                     (throw (RuntimeException. ~msg t#))\n                     {:f-failed (ex-info ~msg {} t#)})))\n      :cljs (try ~f\n                 (catch :default t#\n                   (if ~fail?\n                     (throw (js/Error (~'str ~msg \" \" t#)))\n                     {:f-failed (ex-info ~msg {} t#)})))))\n\n  (defmacro throw-runtime [msg]\n    `(throw (mount.tools.macrovich/case :clj (RuntimeException. ~msg) :cljs (~'str ~msg))))\n\n)\n\n;; this is a one to one copy from https://github.com/clojure/tools.macro\n;; to avoid a lib dependency for a single function\n\n(defn name-with-attributes\n  \"To be used in macro definitions.\n   Handles optional docstrings and attribute maps for a name to be defined\n   in a list of macro arguments. If the first macro argument is a string,\n   it is added as a docstring to name and removed from the macro argument\n   list. If afterwards the first macro argument is a map, its entries are\n   added to the name's metadata map and the map is removed from the\n   macro argument list. The return value is a vector containing the name\n   with its extended metadata map and the list of unprocessed macro\n   arguments.\"\n  [name macro-args]\n  (let [[docstring macro-args] (if (string? (first macro-args))\n                                 [(first macro-args) (next macro-args)]\n                                 [nil macro-args])\n    [attr macro-args]          (if (map? (first macro-args))\n                                 [(first macro-args) (next macro-args)]\n                                 [{} macro-args])\n    attr                       (if docstring\n                                 (assoc attr :doc docstring)\n                                 attr)\n    attr                       (if (meta name)\n                                 (conj (meta name) attr)\n                                 attr)]\n    [(with-meta name attr) macro-args]))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;AAKA,AAwBA;;;;;;;;;;;AAAA,AAAMA,AAUHC,AAAKC;AAVR,AAWE,AAAAC,AAA6B,AAAA,AAAA,AAAA,AAAI,AAAS,AAACI,AAAML,AACjB,AAACK,AAAML,AAAY,AAACM,AAAKN,AACrBA;AAFpC,AAAAE,AAAAD,AAAA,AAAA,AAAOG;AAAP,AAAAF,AAAAD,AAAA,AAAA,AAAiBD;AAAjBG,AAG6B,AAAA,AAAA,AAAA,AAAI,AAACK,AAAK,AAACH,AAAML,AACd,AAACK,AAAML,AAAY,AAACM,AAAKN,AACtBA;AALnC,AAAAE,AAAAC,AAAA,AAAA,AAGGI;AAHH,AAAAL,AAAAC,AAAA,AAAA,AAGQH;AAGNO,AAA2B,AAAIH,AACF,AAAA,AAACK,AAAMF,AAAUH,AACjBG;AAC7BA,AAA2B,AAAI,AAACG,AAAKX,AACR,AAACY,AAAK,AAACD,AAAKX,AAAMQ,AAClBA;AAX/B,AAAA,AAYG,AAACK,AAAUb,AAAKQ,AAAMP","names",["mount.tools.macro/name-with-attributes","name","macro-args","vec__65818","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__65821","docstring","cljs.core/first","cljs.core/next","attr","cljs.core/map?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/meta","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/with-meta"]]],"~:cache-keys",["~#cmap",[["~:macro","^N"],[1597770669000],["^11","goog/math/math.js"],[1597770556544,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^O","~$goog.array","~$goog.asserts"]]],["^11","goog/array/array.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","^1D"]]],["^11","goog/debug/error.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],["^11","goog/dom/nodetype.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],["^1>","^D"],[1597717803000],["^11","goog/object/object.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],"~:SHADOW-TIMESTAMP",[1597770557000,1597770669000],["^11","goog/math/long.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","^1D","~$goog.reflect"]]],["^11","goog/string/internal.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],["^11","goog/functions/functions.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],["^11","goog/structs/map.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^11","goog/asserts/asserts.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^11","goog/uri/uri.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","^1C","^1D","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/base.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",[]]],["^11","goog/structs/structs.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","^1C","~$goog.object"]]],["^11","mount/tools/macro.cljc"],[1597717803108,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","^N"]]],["^11","goog/string/string.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","~$goog.string.internal"]]],["^11","goog/reflect/reflect.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],["^11","goog/string/stringbuffer.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],["^11","goog/iter/iter.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","^1C","^1D","~$goog.functions","~$goog.math"]]],["^11","cljs/core.cljs"],[1597770669034,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["~$goog.math.Long","~$goog.math.Integer","^1K","^1Q","^1C","~$goog.Uri","~$goog.string.StringBuffer"]]],["^11","goog/math/integer.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O"]]],["^11","goog/uri/utils.js"],[1597770556544,"^1?",["^ ","^1@",null,"^1A",["^F",[]],"^1B",["^O","^1C","^1D","^1K"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","mount/tools/macro.cljc","^7",1,"^8",5,"^9",1,"^:",22],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",["^ ","^C","^D"],"^E",["^F",["^G"]],"^H","^I","^L",null,"^M",["^ ","^N","^N","^O","^O"],"^P",["^F",["^Q"]],"~:shadow/js-access-global",["^F",["Error"]],"^R",null,"~:defs",["^ ","~$name-with-attributes",["^ ","~:protocol-inline",null,"^5",["^ ","^6","mount/tools/macro.cljc","^7",30,"^8",7,"^9",30,"^:",27,"~:arglists",["^T",["~$quote",["^T",[["~$name","~$macro-args"]]]]],"~:doc","To be used in macro definitions.\n   Handles optional docstrings and attribute maps for a name to be defined\n   in a list of macro arguments. If the first macro argument is a string,\n   it is added as a docstring to name and removed from the macro argument\n   list. If afterwards the first macro argument is a map, its entries are\n   added to the name's metadata map and the map is removed from the\n   macro argument list. The return value is a vector containing the name\n   with its extended metadata map and the list of unprocessed macro\n   arguments."],"^H","~$mount.tools.macro/name-with-attributes","^6","mount/tools/macro.cljc","^:",27,"~:method-params",["^T",[["^24","^25"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^8",1,"~:variadic?",false,"^7",30,"~:ret-tag","~$cljs.core/IVector","^9",30,"~:max-fixed-arity",2,"~:fn-var",true,"^22",["^T",["^23",["^T",[["^24","^25"]]]]],"^26","To be used in macro definitions.\n   Handles optional docstrings and attribute maps for a name to be defined\n   in a list of macro arguments. If the first macro argument is a string,\n   it is added as a docstring to name and removed from the macro argument\n   list. If afterwards the first macro argument is a map, its entries are\n   added to the name's metadata map and the map is removed from the\n   macro argument list. The return value is a vector containing the name\n   with its extended metadata map and the list of unprocessed macro\n   arguments."]],"^Q",["^ ","^D","^D","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^F",["^26"]],"~:order",["^26"]],"^Y",["^ ","^Q",["^F",[]]],"^Z",["^ "],"^[",["^O","^N"]],"^K","^I","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1=",[["^2D","~:static-fns"],true,["^2D","~:elide-asserts"],false,["^2D","~:optimize-constants"],null,["^2D","^14"],null,["^2D","~:external-config"],null,["^2D","~:tooling-config"],null,["^2D","~:emit-constants"],null,["^2D","~:load-tests"],null,["^2D","~:infer-externs"],true,["^2D","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2D","~:fn-invoke-direct"],null,["^2D","~:source-map"],"/dev/null"]]]