["^ ","~:output",["^ ","~:js","goog.provide('re_frame.utils');\ngoog.require('cljs.core');\ngoog.require('re_frame.loggers');\n/**\n * Dissociates an entry from a nested associative structure returning a new\n *   nested structure. keys is a sequence of keys. Any empty maps that result\n *   will not be present in the new structure.\n *   The key thing is that 'm' remains identical? to istelf if the path was never present\n */\nre_frame.utils.dissoc_in = (function re_frame$utils$dissoc_in(m,p__60840){\nvar vec__60841 = p__60840;\nvar seq__60842 = cljs.core.seq(vec__60841);\nvar first__60843 = cljs.core.first(seq__60842);\nvar seq__60842__$1 = cljs.core.next(seq__60842);\nvar k = first__60843;\nvar ks = seq__60842__$1;\nvar keys = vec__60841;\nif(ks){\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar nextmap = temp__5733__auto__;\nvar newmap = (re_frame.utils.dissoc_in.cljs$core$IFn$_invoke$arity$2 ? re_frame.utils.dissoc_in.cljs$core$IFn$_invoke$arity$2(nextmap,ks) : re_frame.utils.dissoc_in.call(null,nextmap,ks));\nif(cljs.core.seq(newmap)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,newmap);\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,k);\n}\n} else {\nreturn m;\n}\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,k);\n}\n});\nre_frame.utils.first_in_vector = (function re_frame$utils$first_in_vector(v){\nif(cljs.core.vector_QMARK_(v)){\nreturn cljs.core.first(v);\n} else {\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: expected a vector, but got:\",v], 0));\n}\n});\n/**\n * Like apply, but f takes keyword arguments and the last argument is\n *   not a seq but a map with the arguments for f\n */\nre_frame.utils.apply_kw = (function re_frame$utils$apply_kw(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___60846 = arguments.length;\nvar i__4731__auto___60847 = (0);\nwhile(true){\nif((i__4731__auto___60847 < len__4730__auto___60846)){\nargs__4736__auto__.push((arguments[i__4731__auto___60847]));\n\nvar G__60848 = (i__4731__auto___60847 + (1));\ni__4731__auto___60847 = G__60848;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn re_frame.utils.apply_kw.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nre_frame.utils.apply_kw.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nif(cljs.core.map_QMARK_(cljs.core.last(args))){\n} else {\nthrow (new Error(\"Assert failed: (map? (last args))\"));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.concat,cljs.core.butlast(args),cljs.core.last(args)));\n});\n\nre_frame.utils.apply_kw.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.utils.apply_kw.cljs$lang$applyTo = (function (seq60844){\nvar G__60845 = cljs.core.first(seq60844);\nvar seq60844__$1 = cljs.core.next(seq60844);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60845,seq60844__$1);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/utils.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.utils","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^K","~$cljs.core","^L","~$goog","^M"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$console","^K"],"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^F",["^T",["^O",["^K","~:refer",["^Q"]]]]]],"~:flags",["^ ","^O",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/utils.cljc"],"~:compiled-at",1597780142381,"~:resource-name","re_frame/utils.cljc","~:warnings",[],"~:source","(ns re-frame.utils\n  (:require\n    [re-frame.loggers :refer [console]]))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn first-in-vector\n  [v]\n  (if (vector? v)\n    (first v)\n    (console :error \"re-frame: expected a vector, but got:\" v)))\n\n(defn apply-kw\n  \"Like apply, but f takes keyword arguments and the last argument is\n  not a seq but a map with the arguments for f\"\n  [f & args]\n  {:pre [(map? (last args))]}\n  (apply f (apply concat\n                  (butlast args) (last args))))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAIA;;;;;;AAAA,AAAAA,AAAMO,AAKHC;AALH,AAAA,AAAAP,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAKMK;AALNP,AAKUQ;AALVT,AAKiBU;AALjB,AAME,AAAID;AACF,AAAAE,AAAiB,AAACE,AAAIN,AAAEC;AAAxB,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAAME,AAAO,AAACR,AAAAA,AAAAA,AAAUM,AAAAA,AAAQH,AAAAA;AAAhC,AACE,AAAI,AAACP,AAAIY;AACP,AAACC,AAAMR,AAAEC,AAAEM;;AACX,AAACE,AAAOT,AAAEC;;;AACdD;;;AACF,AAACS,AAAOT,AAAEC;;;AAEd,AAAA,AAAMS,AACHC;AADH,AAEE,AAAI,AAACC,AAAQD;AACX,AAACd,AAAMc;;AACP,AAAA,AAAA,AAACE,AAAuDF;;;AAE5D,AAAA;;;;AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAGHK,AAAIC;AAHP,AAAA,AAIS,AAACC,AAAK,AAACC,AAAKF;AAJrB;AAAA,AAAA,AAAA,AAAAL,AAAA;;;AAKE,AAACQ,AAAMJ,AAAE,AAACK,AAAMC,AACA,AAACC,AAAQN,AAAM,AAACE,AAAKF;;;AANvC,AAAA,AAAA,AAAMN;;AAAN;AAAA,AAAA,AAAA,AAAAE,AAAMF;AAAN,AAAA,AAAAG,AAAA,AAAA1B,AAAAyB;AAAAA,AAAA,AAAAxB,AAAAwB;AAAA,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAD,AAAAD;;;AAAA","names",["p__60840","vec__60841","seq__60842","cljs.core/seq","first__60843","cljs.core/first","cljs.core/next","re-frame.utils/dissoc-in","m","k","ks","keys","temp__5733__auto__","nextmap","cljs.core.get.cljs$core$IFn$_invoke$arity$2","newmap","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.utils/first-in-vector","v","cljs.core/vector?","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.utils/apply-kw","js/Error","seq60844","G__60845","self__4717__auto__","f","args","cljs.core/map?","cljs.core/last","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/concat","cljs.core/butlast"]]],"~:cache-keys",["~#cmap",[["~:macro","^L"],[1597770669000],["^[","goog/math/math.js"],[1597770556544,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["^M","~$goog.array","~$goog.asserts"]]],["^[","re_frame/loggers.cljc"],[1597780074492,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L","~$clojure.set"]]],["^[","goog/array/array.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1B"]]],["^[","goog/debug/error.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/dom/nodetype.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/object/object.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],"~:SHADOW-TIMESTAMP",[1597770557000,1597770669000],["^[","goog/math/long.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1B","~$goog.reflect"]]],["^[","goog/string/internal.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/functions/functions.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/structs/map.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/asserts/asserts.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/base.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",[]]],["^[","goog/structs/structs.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","~$goog.object"]]],["^[","goog/string/string.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","~$goog.string.internal"]]],["^[","goog/reflect/reflect.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/string/stringbuffer.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","goog/iter/iter.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","~$goog.functions","~$goog.math"]]],["^[","re_frame/utils.cljc"],[1597780074492,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L","^K"]]],["^[","cljs/core.cljs"],[1597770669034,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["~$goog.math.Long","~$goog.math.Integer","^1J","^1P","^1A","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/math/integer.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M"]]],["^[","clojure/set.cljs"],[1597770669034,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^L"]]],["^[","goog/uri/utils.js"],[1597770556544,"^1=",["^ ","^1>",null,"^1?",["^D",[]],"^1@",["^M","^1A","^1B","^1J"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/utils.cljc","^7",1,"^8",5,"^9",1,"^:",19],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M"],"^N",["^D",["^O"]],"~:shadow/js-access-global",["^D",["Error"]],"^P",["^ ","^Q","^K"],"~:defs",["^ ","~$dissoc-in",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/utils.cljc","^7",5,"^8",7,"^9",5,"^:",16,"~:arglists",["^T",["~$quote",["^T",[["~$m",["~$k","~$&","~$ks","~:as","~$keys"]]]]]],"~:doc","Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present"],"^E","~$re-frame.utils/dissoc-in","^6","re_frame/utils.cljc","^:",16,"~:method-params",["^T",[["~$m","~$p__60840"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^8",1,"~:variadic?",false,"^7",5,"~:ret-tag",["^D",[null,"~$clj","~$any","~$clj-nil"]],"^9",5,"~:max-fixed-arity",2,"~:fn-var",true,"^21",["^T",["^22",["^T",[["~$m",["~$k","~$&","^23","^24","^25"]]]]]],"^26","Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present"],"~$first-in-vector",["^ ","^20",null,"^5",["^ ","^6","re_frame/utils.cljc","^7",20,"^8",7,"^9",20,"^:",22,"^21",["^T",["^22",["^T",[["~$v"]]]]]],"^E","~$re-frame.utils/first-in-vector","^6","re_frame/utils.cljc","^:",22,"^28",["^T",[["~$v"]]],"^2:",null,"^2;",["^T",[null,null]],"^8",1,"^2<",false,"^7",20,"^2=",["^D",["^2?","^2@"]],"^9",20,"^2A",1,"^2B",true,"^21",["^T",["^22",["^T",[["~$v"]]]]]],"~$apply-kw",["^ ","^20",null,"^5",["^ ","^6","re_frame/utils.cljc","^7",26,"^8",7,"^9",26,"^:",15,"^21",["^T",["^22",["^T",[["~$f","~$&","~$args"]]]]],"^26","Like apply, but f takes keyword arguments and the last argument is\n  not a seq but a map with the arguments for f","~:top-fn",["^ ","^2<",true,"~:fixed-arity",1,"^2A",1,"^28",[["^T",["~$f","^2F"]]],"^21",["^T",[["~$f","~$&","^2F"]]],"^2;",["^T",[null]]]],"^E","~$re-frame.utils/apply-kw","^6","re_frame/utils.cljc","^:",15,"^2G",["^ ","^2<",true,"^2H",1,"^2A",1,"^28",[["^T",["~$f","^2F"]]],"^21",["^T",[["~$f","~$&","^2F"]]],"^2;",["^T",[null]]],"^28",[["^T",["~$f","^2F"]]],"^2:",null,"^2H",1,"^2;",["^T",[null]],"^8",1,"^2<",true,"~:methods",[["^ ","^2H",1,"^2<",true,"~:tag","^2?"]],"^7",26,"^2=","^2?","^9",26,"^2A",1,"^2B",true,"^21",["^T",[["~$f","~$&","^2F"]]],"^26","Like apply, but f takes keyword arguments and the last argument is\n  not a seq but a map with the arguments for f"]],"^R",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^D",["~:error"]],"~:order",["^2M"]],"^W",["^ ","^O",["^D",[]]],"^X",["^ "],"^Y",["^M","^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1;",[["^2Q","~:static-fns"],true,["^2Q","~:elide-asserts"],false,["^2Q","~:optimize-constants"],null,["^2Q","^12"],null,["^2Q","~:external-config"],null,["^2Q","~:tooling-config"],null,["^2Q","~:emit-constants"],null,["^2Q","~:load-tests"],null,["^2Q","~:infer-externs"],true,["^2Q","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2Q","~:fn-invoke-direct"],null,["^2Q","~:source-map"],"/dev/null"]]]