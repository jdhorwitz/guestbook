["^ ","~:output",["^ ","~:js","goog.provide('re_frame.core');\ngoog.require('cljs.core');\ngoog.require('re_frame.events');\ngoog.require('re_frame.subs');\ngoog.require('re_frame.interop');\ngoog.require('re_frame.db');\ngoog.require('re_frame.fx');\ngoog.require('re_frame.cofx');\ngoog.require('re_frame.router');\ngoog.require('re_frame.settings');\ngoog.require('re_frame.loggers');\ngoog.require('re_frame.registrar');\ngoog.require('re_frame.interceptor');\ngoog.require('re_frame.std_interceptors');\ngoog.require('re_frame.utils');\ngoog.require('clojure.set');\n/**\n * Enqueue `event` for processing by event handling machinery.\n * \n *   `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n * \n *   Note: the event handler is not run immediately - it is not run\n *   synchronously. It will likely be run 'very soon', although it may be\n *   added to the end of a FIFO queue which already contain events.\n * \n *   Usage:\n *   (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1}])\n */\nre_frame.core.dispatch = (function re_frame$core$dispatch(event){\nreturn re_frame.router.dispatch(event);\n});\n/**\n * Synchronously (immediately) process `event`. Do not queue.\n * \n *   Generally, don't use this. Instead use `dispatch`. It is an error\n *   to use `dispatch-sync` within an event handler.\n * \n *   Useful when any delay in processing is a problem:\n *   1. the `:on-change` handler of a text field where we are expecting fast typing.\n *   2  when initialising your app - see 'main' in todomvc examples\n *   3. in a unit test where we don't want the action 'later'\n * \n *   Usage:\n *   (dispatch-sync [:sing :falsetto 634])\n */\nre_frame.core.dispatch_sync = (function re_frame$core$dispatch_sync(event_v){\nreturn re_frame.router.dispatch_sync(event_v);\n});\n/**\n * For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n * \n *   During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n *   will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n *   needs to know how to create the node.   By calling `reg-sub`, you are registering\n *   'the template' or 'the mechanism' by which nodes in the Signal Graph can be created.\n * \n *   Repeating: calling `reg-sub` does not create a node. It only creates the template\n *   from which nodes can be created later.\n * \n *   `reg-sub` arguments are:\n *  - a `query-id` (typically a namespaced keyword)\n *  - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways)\n *  - a function which computes the value of this kind of node\n * \n *   The `computation function` is always the last argument supplied and it is expected to have the signature:\n *  `(input-values, query-vector) -> a-value`\n * \n *   When `computation function` is called, the `query-vector` argument will be the vector supplied to the\n *   the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`,\n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n * \n *   The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways,\n *   but whatever is there defines the `input signals` part of the template, controlling what input\n *  values \"flow into\" the `computation function` gets when it is called.\n * \n *   `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n *   But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other\n *   two are really just sugary variations.\n * \n *   1. No input signals given:\n *    ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n * \n *   In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n *   and, as a result, the value within `app-db` (a map) is\n *   is given as the 1st argument when `a-computation-fn` is called.\n * \n * \n *   2. A signal function is explicitly supplied:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     signal-fn     ;; <-- here\n *     computation-fn)\n *   ```\n * \n *   This is the most canonical and instructive of the three variations.\n * \n *   When a node is created from the template, the `signal-fn` will be called and it\n *   is expected to return the input signal(s) as either a singleton, if there is only\n *   one, or a sequence if there are many, or a map with the signals as the values.\n * \n *   The values from returned nominated signals will be supplied as the 1st argument to\n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n *   this value will be either a singleton, sequence or map of them (paralleling\n *   the structure returned by the `signal-fn`).\n * \n *   This example `signal-fn` returns a vector of input signals.\n *     ```clj\n *     (fn [query-vec dynamic-vec]\n *       [(subscribe [:a-sub])\n *        (subscribe [:b-sub])])\n *     ```\n *   The associated computation function must be written\n *   to expect a vector of values for its first argument:\n *     ```clj\n *     (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n *       ....)\n *      ```\n * \n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\n *      ```clj\n *      (fn [query-vec dynamic-vec]\n *        (subscribe [:a-sub]))\n *      ```\n *   then the associated computation function must be written to expect a single value\n *   as the 1st argument:\n *      ```clj\n *      (fn [a query-vec]       ;; 1st argument is a single value\n *        ...)\n *      ```\n * \n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n *     ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *   is the equivalent of using this\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn\n *     a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n * \n *   3. Syntax Sugar\n * \n *   ```clj\n *   (reg-sub\n *     :a-b-sub\n *     :<- [:a-sub]\n *     :<- [:b-sub]\n *     (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n *       {:a a :b b}))\n *   ```\n * \n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n * \n *   If you supply only one pair a singleton will be supplied to the computation function,\n *   as if you had supplied a `signal-fn` returning only a single value:\n * \n *   ```clj\n *   (reg-sub\n *     :a-sub\n *     :<- [:a-sub]\n *     (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n *       ...))\n *   ```\n * \n *   For further understanding, read `/docs`, and look at the detailed comments in\n *   /examples/todomvc/src/subs.cljs\n *   \n */\nre_frame.core.reg_sub = (function re_frame$core$reg_sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___61996 = arguments.length;\nvar i__4731__auto___61998 = (0);\nwhile(true){\nif((i__4731__auto___61998 < len__4730__auto___61996)){\nargs__4736__auto__.push((arguments[i__4731__auto___61998]));\n\nvar G__62001 = (i__4731__auto___61998 + (1));\ni__4731__auto___61998 = G__62001;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn re_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nre_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.subs.reg_sub,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_id], null),args));\n});\n\nre_frame.core.reg_sub.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.core.reg_sub.cljs$lang$applyTo = (function (seq61778){\nvar G__61779 = cljs.core.first(seq61778);\nvar seq61778__$1 = cljs.core.next(seq61778);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__61779,seq61778__$1);\n});\n\n/**\n * Given a `query` vector, returns a Reagent `reaction` which, over\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\n *   it returns a `Signal`.\n * \n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n * \n *   `query` is a vector of at least one element. The first element is the\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\n *   elements are optional, additional values which parameterise the query\n *   performed.\n * \n *   `dynv` is an optional 3rd argument, which is a vector of further input\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\n *   historical reasons and is borderline deprecated these days.\n * \n *   Example Usage:\n *   --------------\n * \n *  (subscribe [:items])\n *  (subscribe [:items \"blue\" :small])\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\n * \n *   Note: for any given call to `subscribe` there must have been a previous call\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\n * \n *   Hint\n *   ----\n * \n *   When used in a view function BE SURE to `deref` the returned value.\n *   In fact, to avoid any mistakes, some prefer to define:\n * \n *   (def <sub  (comp deref re-frame.core/subscribe))\n * \n *   And then, within their views, they call  `(<sub [:items :small])` rather\n *   than using `subscribe` directly.\n * \n *   De-duplication\n *   --------------\n * \n *   Two, or more, concurrent subscriptions for the same query will source reactive\n *   updates from the one executing handler.\n *   \n */\nre_frame.core.subscribe = (function re_frame$core$subscribe(var_args){\nvar G__61788 = arguments.length;\nswitch (G__61788) {\ncase 1:\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(query);\n});\n\nre_frame.core.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2(query,dynv);\n});\n\nre_frame.core.subscribe.cljs$lang$maxFixedArity = 2;\n\n/**\n * When called with no args, unregisters all subscription handlers. When given\n * one arg, assumed to be a `query-id` of a registered subscription handler,\n * unregisters the associated handler.\n * \n * NOTE: Depending on the usecase it may also be necessary to call \n *       `clear-subscription-cache!`.\n */\nre_frame.core.clear_sub = (function re_frame$core$clear_sub(var_args){\nvar G__61804 = arguments.length;\nswitch (G__61804) {\ncase 0:\nreturn re_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn re_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(re_frame.subs.kind);\n});\n\nre_frame.core.clear_sub.cljs$core$IFn$_invoke$arity$1 = (function (query_id){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\n});\n\nre_frame.core.clear_sub.cljs$lang$maxFixedArity = 1;\n\n/**\n * Causes all subscriptions to be removed from the cache.\n *   Does this by:\n *   1. running `on-dispose` on all cached subscriptions\n *   2. Each `on-dispose` will perform the removal of themselves.\n * \n *   This is for development time use. Useful when reloading Figwheel code\n *   after a React exception, because React components won't have been\n *   cleaned up properly. And this, in turn, means the subscriptions within those\n *   components won't have been cleaned up correctly. So this forces the issue.\n */\nre_frame.core.clear_subscription_cache_BANG_ = (function re_frame$core$clear_subscription_cache_BANG_(){\nreturn re_frame.subs.clear_subscription_cache_BANG_();\n});\n/**\n * This is a low level, advanced function.  You should probably be\n *   using reg-sub instead.\n *   Docs in https://github.com/day8/re-frame/blob/master/docs/flow-mechanics.md\n */\nre_frame.core.reg_sub_raw = (function re_frame$core$reg_sub_raw(query_id,handler_fn){\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,handler_fn);\n});\n/**\n * Register the given effect `handler` for the given `id`.\n * \n *   `id` is keyword, often namespaced.\n *   `handler` is a side-effecting function which takes a single argument and whose return\n *   value is ignored.\n * \n *   Example Use\n *   -----------\n * \n *   First, registration ... associate `:effect2` with a handler.\n * \n *   (reg-fx\n *   :effect2\n *   (fn [value]\n *      ... do something side-effect-y))\n * \n *   Then, later, if an event handler were to return this effects map ...\n * \n *   {...\n * :effect2  [1 2]}\n * \n * ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n * called with an argument of `[1 2]`.\n */\nre_frame.core.reg_fx = (function re_frame$core$reg_fx(id,handler){\nreturn re_frame.fx.reg_fx(id,handler);\n});\n/**\n * When called with no args, unregisters all effect handlers. When given one arg,\n * assumed to be the `id` of a registered effect handler, unregisters the \n * associated handler.\n */\nre_frame.core.clear_fx = (function re_frame$core$clear_fx(var_args){\nvar G__61819 = arguments.length;\nswitch (G__61819) {\ncase 0:\nreturn re_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn re_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(re_frame.fx.kind);\n});\n\nre_frame.core.clear_fx.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(re_frame.fx.kind,id);\n});\n\nre_frame.core.clear_fx.cljs$lang$maxFixedArity = 1;\n\n/**\n * Register the given coeffect `handler` for the given `id`, for later use\n *   within `inject-cofx`.\n * \n *   `id` is keyword, often namespaced.\n *   `handler` is a function which takes either one or two arguements, the first of which is\n *   always `coeffects` and which returns an updated `coeffects`.\n * \n *   See the docs for `inject-cofx` for example use.\n */\nre_frame.core.reg_cofx = (function re_frame$core$reg_cofx(id,handler){\nreturn re_frame.cofx.reg_cofx(id,handler);\n});\n/**\n * Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n * whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n * 'coeffect handler' identified by the `id`.\n * \n * The previous association of a `coeffect handler` with an `id` will have\n * happened via a call to `re-frame.core/reg-cofx` - generally on program startup.\n * \n * Within the created interceptor, this 'looked up' `coeffect handler` will\n * be called (within the `:before`) with two arguments:\n *   - the current value of `:coeffects`\n *   - optionally, the originally supplied arbitrary `value`\n * \n * This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n * \n * Example Of how `inject-cofx` and `reg-cofx` work together\n * ---------------------------------------------------------\n * \n * 1. Early in app startup, you register a `coeffect handler` for `:datetime`:\n * \n *    (re-frame.core/reg-cofx\n *      :datetime                        ;; usage  (inject-cofx :datetime)\n *      (fn coeffect-handler\n *        [coeffect]\n *        (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n * \n * 2. Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n * \n *    (re-frame.core/reg-event-fx        ;; we are registering an event handler\n *       :event-id\n *       [ ... (inject-cofx :datetime) ... ]    ;; <-- create an injecting interceptor\n *       (fn event-handler\n *         [coeffect event]\n *         ... in here can access (:now coeffect) to obtain current datetime ... )))\n * \n * Background\n * ----------\n * \n * `coeffects` are the input resources required by an event handler\n * to perform its job. The two most obvious ones are `db` and `event`.\n * But sometimes an event handler might need other resources.\n * \n * Perhaps an event handler needs a random number or a GUID or the current\n * datetime. Perhaps it needs access to a DataScript database connection.\n * \n * If an event handler directly accesses these resources, it stops being\n * pure and, consequently, it becomes harder to test, etc. So we don't\n * want that.\n * \n * Instead, the interceptor created by this function is a way to 'inject'\n * 'necessary resources' into the `:coeffects` (map) subsequently given\n * to the event handler at call time.\n */\nre_frame.core.inject_cofx = (function re_frame$core$inject_cofx(var_args){\nvar G__61838 = arguments.length;\nswitch (G__61838) {\ncase 1:\nreturn re_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn re_frame.cofx.inject_cofx.cljs$core$IFn$_invoke$arity$1(id);\n});\n\nre_frame.core.inject_cofx.cljs$core$IFn$_invoke$arity$2 = (function (id,value){\nreturn re_frame.cofx.inject_cofx.cljs$core$IFn$_invoke$arity$2(id,value);\n});\n\nre_frame.core.inject_cofx.cljs$lang$maxFixedArity = 2;\n\n/**\n * When called with no args, unregisters all coeffect handlers. When given one arg,\n * assumed to be the `id` of a registered coeffect handler, unregisters the \n * associated handler.\n */\nre_frame.core.clear_cofx = (function re_frame$core$clear_cofx(var_args){\nvar G__61849 = arguments.length;\nswitch (G__61849) {\ncase 0:\nreturn re_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn re_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(re_frame.cofx.kind);\n});\n\nre_frame.core.clear_cofx.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(re_frame.cofx.kind,id);\n});\n\nre_frame.core.clear_cofx.cljs$lang$maxFixedArity = 1;\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (db event) -> db\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of this\n * chain.\n */\nre_frame.core.reg_event_db = (function re_frame$core$reg_event_db(var_args){\nvar G__61851 = arguments.length;\nswitch (G__61851) {\ncase 2:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,re_frame.std_interceptors.inject_global_interceptors,interceptors,re_frame.std_interceptors.db_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_db.cljs$lang$maxFixedArity = 3;\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (coeffects-map event-vector) -> effects-map\n *   `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n *   `handler` is wrapped in its own interceptor and added to the end of the interceptor\n * chain, so that, in the end, only a chain is registered.\n * Special effects and coeffects interceptors are added to the front of the\n * interceptor chain.  These interceptors inject the value of app-db into coeffects,\n * and, later, action effects.\n */\nre_frame.core.reg_event_fx = (function re_frame$core$reg_event_fx(var_args){\nvar G__61853 = arguments.length;\nswitch (G__61853) {\ncase 2:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,re_frame.std_interceptors.inject_global_interceptors,interceptors,re_frame.std_interceptors.fx_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_fx.cljs$lang$maxFixedArity = 3;\n\n/**\n * Register the given event `handler` (function) for the given `id`. Optionally, provide\n *   an `interceptors` chain.\n *   `id` is typically a namespaced keyword  (but can be anything)\n *   `handler` is a function: (context-map event-vector) -> context-map\n * \n *   This form of registration is almost never used. \n */\nre_frame.core.reg_event_ctx = (function re_frame$core$reg_event_ctx(var_args){\nvar G__61855 = arguments.length;\nswitch (G__61855) {\ncase 2:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$2 = (function (id,handler){\nreturn re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3(id,null,handler);\n});\n\nre_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3 = (function (id,interceptors,handler){\nreturn re_frame.events.register(id,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_frame.cofx.inject_db,re_frame.fx.do_fx,re_frame.std_interceptors.inject_global_interceptors,interceptors,re_frame.std_interceptors.ctx_handler__GT_interceptor(handler)], null));\n});\n\nre_frame.core.reg_event_ctx.cljs$lang$maxFixedArity = 3;\n\n/**\n * When called with no args, unregisters all event handlers. When given one arg,\n * assumed to be the `id` of a registered event handler, unregisters the \n * associated handler.\n */\nre_frame.core.clear_event = (function re_frame$core$clear_event(var_args){\nvar G__61859 = arguments.length;\nswitch (G__61859) {\ncase 0:\nreturn re_frame.core.clear_event.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn re_frame.core.clear_event.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.clear_event.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(re_frame.events.kind);\n});\n\nre_frame.core.clear_event.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2(re_frame.events.kind,id);\n});\n\nre_frame.core.clear_event.cljs$lang$maxFixedArity = 1;\n\n/**\n * An interceptor which logs/instruments an event handler's actions to\n *   `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n * \n *   Output includes:\n *   1. the event vector\n *   2. a `clojure.data/diff` of db, before vs after, which shows\n *   the changes caused by the event handler.  You will absolutely have\n *   to understand https://clojuredocs.org/clojure.data/diff to\n *   understand the output.\n * \n *   You'd typically include this interceptor after (to the right of) any\n *   path interceptor.\n * \n *   Warning:  calling clojure.data/diff on large, complex data structures\n *   can be slow. So, you won't want this interceptor present in production\n *   code. So condition it out like this :\n * \n *    (re-frame.core/reg-event-db\n *       :evt-id\n *       [(when ^boolean goog.DEBUG re-frame.core/debug)]  ;; <-- conditional\n *       (fn [db v]\n *         ...))\n * \n *   To make this code fragment work, you'll also have to set goog.DEBUG to\n *   false in your production builds - look in `project.clj` of /examples/todomvc.\n *   \n */\nre_frame.core.debug = re_frame.std_interceptors.debug;\n/**\n * returns an interceptor whose `:before` substitutes the coeffects `:db` with\n *   a sub-path of `:db`. Within `:after` it grafts the handler's return value\n *   back into db, at the right path.\n * \n *   So, its overall action is to make the event handler behave like the function\n *   you might give to clojure's `update-in`.\n * \n *   Examples:\n * \n *    (path :some :path)\n *    (path [:some :path])\n *    (path [:some :path] :to :here)\n *    (path [:some :path] [:to] :here)\n * \n *   Example Use:\n * \n *    (reg-event-db\n *      :event-id\n *      (path [:a :b])  ;; used here, in interceptor chain\n *      (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\n *        ... new-b))   ;; returns a new value for that path (not the entire db)\n * \n *   Notes:\n *  1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n *  2. if `:effects` contains no `:db` effect, can't graft a value back in.\n *   \n */\nre_frame.core.path = re_frame.std_interceptors.path;\n/**\n * Interceptor factory which runs the given function `f` in the `after handler`\n *   position.  `f` is called with two arguments: `db` and `v`, and is expected to\n *   return a modified `db`.\n * \n *   Unlike the `after` interceptor which is only about side effects, `enrich`\n *   expects `f` to process and alter the given `db` coeffect in some useful way,\n *   contributing to the derived data, flowing vibe.\n * \n *   Example Use:\n *   ------------\n * \n *   Imagine that todomvc needed to do duplicate detection - if any two todos had\n *   the same text, then highlight their background, and report them via a warning\n *   at the bottom of the panel.\n * \n *   Almost any user action (edit text, add new todo, remove a todo) requires a\n *   complete reassessment of duplication errors and warnings. Eg: that edit\n *   just made might have introduced a new duplicate, or removed one. Same with\n *   any todo removal. So we need to re-calculate warnings after any CRUD events\n *   associated with the todos list.\n * \n *   Unless we are careful, we might end up coding subtly different checks\n *   for each kind of CRUD operation.  The duplicates check made after\n *   'delete todo' event might be subtly different to that done after an\n *   editing operation. Nice and efficient, but fiddly. A bug generator\n *   approach.\n * \n *   So, instead, we create an `f` which recalculates ALL warnings from scratch\n *   every time there is ANY change. It will inspect all the todos, and\n *   reset ALL FLAGS every time (overwriting what was there previously)\n *   and fully recalculate the list of duplicates (displayed at the bottom?).\n * \n *   https://twitter.com/nathanmarz/status/879722740776939520\n * \n *   By applying `f` in an `:enrich` interceptor, after every CRUD event,\n *   we keep the handlers simple and yet we ensure this important step\n *   (of getting warnings right) is not missed on any change.\n * \n *   We can test `f` easily - it is a pure function - independently of\n *   any CRUD operation.\n * \n *   This brings huge simplicity at the expense of some re-computation\n *   each time. This may be a very satisfactory trade-off in many cases.\n */\nre_frame.core.enrich = re_frame.std_interceptors.enrich;\n/**\n * An interceptor which removes the first element of the event vector,\n *   allowing you to write more aesthetically pleasing event handlers. No\n *   leading underscore on the event-v!\n *   Your event handlers will look like this:\n * \n *    (defn my-handler\n *      [db [x y z]]    ;; <-- instead of [_ x y z]\n *      ....)\n */\nre_frame.core.trim_v = re_frame.std_interceptors.trim_v;\n/**\n * returns an interceptor which runs a given function `f` in the `:after`\n *   position, presumably for side effects.\n * \n *   `f` is called with two arguments: the `:effects` value for `:db`\n *   (or the `coeffect` value of db if no db effect is returned) and the event.\n *   Its return value is ignored, so `f` can only side-effect.\n * \n *   Examples use can be seen in the /examples/todomvc:\n *   - `f` runs schema validation (reporting any errors found).\n *   - `f` writes to localstorage.\n */\nre_frame.core.after = re_frame.std_interceptors.after;\n/**\n * Interceptor factory which acts a bit like `reaction`  (but it flows into\n *   `db`, rather than out). It observes N paths within `db` and if any of them\n *   test not identical? to their previous value  (as a result of a event handler\n *   being run) then it runs `f` to compute a new value, which is then assoc-ed\n *   into the given `out-path` within `db`.\n * \n *   Usage:\n * \n *    (defn my-f\n *      [a-val b-val]\n *      ... some computation on a and b in here)\n * \n *    (on-changes my-f [:c]  [:a] [:b])\n * \n *   Put this Interceptor on the right handlers (ones which might change :a or :b).\n *   It will:\n *   - call `f` each time the value at path [:a] or [:b] changes\n *   - call `f` with the values extracted from [:a] [:b]\n *   - assoc the return value from `f` into the path  [:c]\n *   \n */\nre_frame.core.on_changes = re_frame.std_interceptors.on_changes;\n/**\n * Registers `interceptor` as a global interceptor. Global interceptors are\n * included in the processing of every event.\n * \n * When you register an event handler you have the option of supplying an\n * interceptor chain. Any global interceptors you register are effectively\n * prepending to this chain in the order that they are registered.\n */\nre_frame.core.reg_global_interceptor = (function re_frame$core$reg_global_interceptor(interceptor){\nreturn re_frame.settings.reg_global_interceptor(interceptor);\n});\n/**\n * When called with no args, unregisters all global interceptors. When given\n * one arg, assumed to be the `id` of a currently registered global\n * interceptor, it unregisters the associated interceptor.\n */\nre_frame.core.clear_global_interceptor = (function re_frame$core$clear_global_interceptor(var_args){\nvar G__61886 = arguments.length;\nswitch (G__61886) {\ncase 0:\nreturn re_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn re_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn re_frame.settings.clear_global_interceptors.cljs$core$IFn$_invoke$arity$0();\n});\n\nre_frame.core.clear_global_interceptor.cljs$core$IFn$_invoke$arity$1 = (function (id){\nreturn re_frame.settings.clear_global_interceptors.cljs$core$IFn$_invoke$arity$1(id);\n});\n\nre_frame.core.clear_global_interceptor.cljs$lang$maxFixedArity = 1;\n\n/**\n * Create an interceptor from named arguments\n */\nre_frame.core.__GT_interceptor = (function re_frame$core$__GT_interceptor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___62088 = arguments.length;\nvar i__4731__auto___62089 = (0);\nwhile(true){\nif((i__4731__auto___62089 < len__4730__auto___62088)){\nargs__4736__auto__.push((arguments[i__4731__auto___62089]));\n\nvar G__62090 = (i__4731__auto___62089 + (1));\ni__4731__auto___62089 = G__62090;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_frame.core.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__61892){\nvar map__61894 = p__61892;\nvar map__61894__$1 = (((((!((map__61894 == null))))?(((((map__61894.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61894.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61894):map__61894);\nvar m = map__61894__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61894__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61894__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61894__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nreturn re_frame.utils.apply_kw.cljs$core$IFn$_invoke$arity$variadic(re_frame.interceptor.__GT_interceptor,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([m], 0));\n});\n\nre_frame.core.__GT_interceptor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.core.__GT_interceptor.cljs$lang$applyTo = (function (seq61890){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61890));\n});\n\n/**\n * When called with one arg, returns the coeffects map from the `context`.\n * When called with two or three args, behaves like `clojure.core/get`, \n * returns the value mapped to `key` in the coeffects map, `not-found` or\n * `nil` if `key` is not present.\n */\nre_frame.core.get_coeffect = (function re_frame$core$get_coeffect(var_args){\nvar G__61905 = arguments.length;\nswitch (G__61905) {\ncase 1:\nreturn re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,key);\n});\n\nre_frame.core.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3(context,key,not_found);\n});\n\nre_frame.core.get_coeffect.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns a new `context` with a new coeffects map that contains `key`\n * mapped to the `value`.\n */\nre_frame.core.assoc_coeffect = (function re_frame$core$assoc_coeffect(context,key,value){\nreturn re_frame.interceptor.assoc_coeffect(context,key,value);\n});\n/**\n * When called with one arg, returns the effects map from the `context`.\n * When called with two or three args, behaves like `clojure.core/get`, \n * returns the value mapped to `key` in the effects map, `not-found` or\n * `nil` if `key` is not present.\n */\nre_frame.core.get_effect = (function re_frame$core$get_effect(var_args){\nvar G__61923 = arguments.length;\nswitch (G__61923) {\ncase 1:\nreturn re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.core.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.core.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,key);\n});\n\nre_frame.core.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,key,not_found);\n});\n\nre_frame.core.get_effect.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns a new `context` with a new effects map that contains `key`\n * mapped to the `value`.\n */\nre_frame.core.assoc_effect = (function re_frame$core$assoc_effect(context,key,value){\nreturn re_frame.interceptor.assoc_effect(context,key,value);\n});\n/**\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n *   Returns the updated `context`.\n * \n *   In an advanced case, this function could allow an interceptor to add new\n *   interceptors to the `:queue` of a context.\n */\nre_frame.core.enqueue = (function re_frame$core$enqueue(context,interceptors){\nreturn re_frame.interceptor.enqueue(context,interceptors);\n});\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nre_frame.core.set_loggers_BANG_ = (function re_frame$core$set_loggers_BANG_(new_loggers){\nreturn re_frame.loggers.set_loggers_BANG_(new_loggers);\n});\n/**\n * Logs `args` to the console at `level`. \n * Level can be one of `:log` `:error` `:warn` `:debug` `:group` `:groupEnd`.\n * If you are writing an extension to re-frame, like prehaps an effect handler,\n * you may want to use re-frame logging so that users can configure logging \n * from a central location.\n * \n * usage: (console :error \"Oh, dear God, it happened:\" a-var \"and\" another)\n *        (console :warn \"Possible breach of containment wall at:\" dt)\n */\nre_frame.core.console = (function re_frame$core$console(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___62124 = arguments.length;\nvar i__4731__auto___62129 = (0);\nwhile(true){\nif((i__4731__auto___62129 < len__4730__auto___62124)){\nargs__4736__auto__.push((arguments[i__4731__auto___62129]));\n\nvar G__62130 = (i__4731__auto___62129 + (1));\ni__4731__auto___62129 = G__62130;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn re_frame.core.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nre_frame.core.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.loggers.console,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [level], null),args));\n});\n\nre_frame.core.console.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.core.console.cljs$lang$applyTo = (function (seq61934){\nvar G__61935 = cljs.core.first(seq61934);\nvar seq61934__$1 = cljs.core.next(seq61934);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__61935,seq61934__$1);\n});\n\n/**\n * Checkpoints the state of re-frame and returns a function which, when\n *   later called, will restore re-frame to that checkpointed state.\n * \n *   Checkpoint includes app-db, all registered handlers and all subscriptions.\n *   \n */\nre_frame.core.make_restore_fn = (function re_frame$core$make_restore_fn(){\nvar handlers = cljs.core.deref(re_frame.registrar.kind__GT_id__GT_handler);\nvar app_db = cljs.core.deref(re_frame.db.app_db);\nvar subs_cache = cljs.core.deref(re_frame.subs.query__GT_reaction);\nreturn ((function (handlers,app_db,subs_cache){\nreturn (function (){\nvar original_subs_62139 = cljs.core.set(cljs.core.vals(subs_cache));\nvar current_subs_62140 = cljs.core.set(cljs.core.vals(cljs.core.deref(re_frame.subs.query__GT_reaction)));\nvar seq__61939_62145 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(current_subs_62140,original_subs_62139));\nvar chunk__61940_62146 = null;\nvar count__61941_62147 = (0);\nvar i__61942_62148 = (0);\nwhile(true){\nif((i__61942_62148 < count__61941_62147)){\nvar sub_62149 = chunk__61940_62146.cljs$core$IIndexed$_nth$arity$2(null,i__61942_62148);\nre_frame.interop.dispose_BANG_(sub_62149);\n\n\nvar G__62154 = seq__61939_62145;\nvar G__62155 = chunk__61940_62146;\nvar G__62156 = count__61941_62147;\nvar G__62157 = (i__61942_62148 + (1));\nseq__61939_62145 = G__62154;\nchunk__61940_62146 = G__62155;\ncount__61941_62147 = G__62156;\ni__61942_62148 = G__62157;\ncontinue;\n} else {\nvar temp__5735__auto___62158 = cljs.core.seq(seq__61939_62145);\nif(temp__5735__auto___62158){\nvar seq__61939_62159__$1 = temp__5735__auto___62158;\nif(cljs.core.chunked_seq_QMARK_(seq__61939_62159__$1)){\nvar c__4550__auto___62160 = cljs.core.chunk_first(seq__61939_62159__$1);\nvar G__62161 = cljs.core.chunk_rest(seq__61939_62159__$1);\nvar G__62162 = c__4550__auto___62160;\nvar G__62163 = cljs.core.count(c__4550__auto___62160);\nvar G__62164 = (0);\nseq__61939_62145 = G__62161;\nchunk__61940_62146 = G__62162;\ncount__61941_62147 = G__62163;\ni__61942_62148 = G__62164;\ncontinue;\n} else {\nvar sub_62169 = cljs.core.first(seq__61939_62159__$1);\nre_frame.interop.dispose_BANG_(sub_62169);\n\n\nvar G__62170 = cljs.core.next(seq__61939_62159__$1);\nvar G__62171 = null;\nvar G__62172 = (0);\nvar G__62173 = (0);\nseq__61939_62145 = G__62170;\nchunk__61940_62146 = G__62171;\ncount__61941_62147 = G__62172;\ni__61942_62148 = G__62173;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\ncljs.core.reset_BANG_(re_frame.registrar.kind__GT_id__GT_handler,handlers);\n\ncljs.core.reset_BANG_(re_frame.db.app_db,app_db);\n\nreturn null;\n});\n;})(handlers,app_db,subs_cache))\n});\n/**\n * Remove all events queued for processing\n */\nre_frame.core.purge_event_queue = (function re_frame$core$purge_event_queue(){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$purge$arity$1(null);\n});\n/**\n * Registers a function `f` to be called after each event is processed\n * `f` will be called with two arguments:\n *  - `event`: a vector. The event just processed.\n *  - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n * \n * This is useful in advanced cases like:\n *   - you are implementing a complex bootstrap pipeline\n *   - you want to create your own handling infrastructure, with perhaps multiple\n *     handlers for the one event, etc.  Hook in here.\n *   - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n * \n *   'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n *   be used at \"remove time\" to get rid of the right callback.\n *   \n */\nre_frame.core.add_post_event_callback = (function re_frame$core$add_post_event_callback(var_args){\nvar G__61945 = arguments.length;\nswitch (G__61945) {\ncase 1:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1 = (function (f){\nreturn re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2(f,f);\n});\n\nre_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2 = (function (id,f){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$add_post_event_callback$arity$3(null,id,f);\n});\n\nre_frame.core.add_post_event_callback.cljs$lang$maxFixedArity = 2;\n\n/**\n * Unregisters the function identified by `id` to be called after each event is\n * processed.\n */\nre_frame.core.remove_post_event_callback = (function re_frame$core$remove_post_event_callback(id){\nreturn re_frame.router.event_queue.re_frame$router$IEventQueue$remove_post_event_callback$arity$2(null,id);\n});\n/**\n * Deprecated. Use `reg-event-db` instead.\n */\nre_frame.core.register_handler = (function re_frame$core$register_handler(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___62187 = arguments.length;\nvar i__4731__auto___62188 = (0);\nwhile(true){\nif((i__4731__auto___62188 < len__4730__auto___62187)){\nargs__4736__auto__.push((arguments[i__4731__auto___62188]));\n\nvar G__62189 = (i__4731__auto___62188 + (1));\ni__4731__auto___62188 = G__62189;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_frame.core.register_handler.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nre_frame.core.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args)),\")\"], 0));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_event_db,args);\n});\n\nre_frame.core.register_handler.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.core.register_handler.cljs$lang$applyTo = (function (seq61958){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61958));\n});\n\n/**\n * Deprecated. Use `reg-sub-raw` instead.\n */\nre_frame.core.register_sub = (function re_frame$core$register_sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___62198 = arguments.length;\nvar i__4731__auto___62199 = (0);\nwhile(true){\nif((i__4731__auto___62199 < len__4730__auto___62198)){\nargs__4736__auto__.push((arguments[i__4731__auto___62199]));\n\nvar G__62200 = (i__4731__auto___62199 + (1));\ni__4731__auto___62199 = G__62200;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nre_frame.core.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(args)),\")\"], 0));\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(re_frame.core.reg_sub_raw,args);\n});\n\nre_frame.core.register_sub.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.core.register_sub.cljs$lang$applyTo = (function (seq61979){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61979));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^K","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^R","~$fx","~$re-frame.fx","~$re-frame.events","^U","~$loggers","~$re-frame.loggers","~$re-frame.settings","^X","^T","^T","~$re-frame.registrar","^Y","~$cljs.core","^Z","~$interceptor","^R","~$goog","^10","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^Y","^12","^12","~$re-frame.utils","^16","^O","^O","~$events","^U","~$settings","^X","~$re-frame.std-interceptors","^19","^W","^W","^M","^M","~$interop","^K","~$utils","^16","~$std-interceptors","^19","^Q","^Q","^14","^14"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$db-handler->interceptor","^19","~$fx-handler->interceptor","^19","~$ctx-handler->interceptor","^19"],"~:require-macros",["^ ","^Z","^Z"],"~:form",["~#list",["~$ns","^F",["^1E",["^1>",["^U","~:as","^17"],["^M","^1G","^L"],["^K","^1G","^1:"],["^14","^1G","^13"],["^T","^1G","^S"],["^Q","^1G","^P"],["^12","^1G","^11"],["^X","^1G","^18"],["^W","^1G","^V"],["^Y","^1G","^15"],["^R","^1G","^["],["^19","^1G","^1<","~:refer",["^1@","^1A","^1B"]],["^16","^1G","^1;"],["^O","^1G","^N"]]]]],"~:flags",["^ ","^1>",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^10","^Z","^U","^M","^K","^14","^T","^Q","^12","^X","^W","^Y","^R","^19","^16","^O"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/core.cljc"],"~:compiled-at",1597780142908,"~:resource-name","re_frame/core.cljc","~:warnings",[],"~:source","(ns re-frame.core\n  (:require\n    [re-frame.events           :as events]\n    [re-frame.subs             :as subs]\n    [re-frame.interop          :as interop]\n    [re-frame.db               :as db]\n    [re-frame.fx               :as fx]\n    [re-frame.cofx             :as cofx]\n    [re-frame.router           :as router]\n    [re-frame.settings         :as settings]\n    [re-frame.loggers          :as loggers]\n    [re-frame.registrar        :as registrar]\n    [re-frame.interceptor      :as interceptor]\n    [re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                             fx-handler->interceptor\n                                                             ctx-handler->interceptor]]\n    [re-frame.utils            :as utils]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n\n;; -- dispatch ----------------------------------------------------------------\n(defn dispatch\n  \"Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1}])\"\n  [event]\n  (router/dispatch event))\n\n(defn dispatch-sync\n  \"Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])\"\n  [event-v]\n  (router/dispatch-sync event-v))\n\n\n;; -- subscriptions -----------------------------------------------------------\n(defn reg-sub\n  \"For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n\n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering\n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created.\n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later.\n\n  `reg-sub` arguments are:\n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways)\n    - a function which computes the value of this kind of node\n\n  The `computation function` is always the last argument supplied and it is expected to have the signature:\n    `(input-values, query-vector) -> a-value`\n\n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the\n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \\\"blue\\\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways,\n  but whatever is there defines the `input signals` part of the template, controlling what input\n values \\\"flow into\\\" the `computation function` gets when it is called.\n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other\n  two are really just sugary variations.\n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n\n     This is the most canonical and instructive of the three variations.\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to\n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n\n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn\n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function,\n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (apply subs/reg-sub (into [query-id] args)))\n\n(defn subscribe\n  \"Given a `query` vector, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  Two, or more, concurrent subscriptions for the same query will source reactive\n  updates from the one executing handler.\n  \"\n  ([query]\n   (subs/subscribe query))\n  ([query dynv]\n   (subs/subscribe query dynv)))\n\n(defn clear-sub ;; think unreg-sub\n  \"When called with no args, unregisters all subscription handlers. When given\n   one arg, assumed to be a `query-id` of a registered subscription handler,\n   unregisters the associated handler.\n\n   NOTE: Depending on the usecase it may also be necessary to call \n         `clear-subscription-cache!`.\"\n  ([]\n   (registrar/clear-handlers subs/kind))\n  ([query-id]\n   (registrar/clear-handlers subs/kind query-id)))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (subs/clear-subscription-cache!))\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/flow-mechanics.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (fx/reg-fx id handler))\n\n(defn clear-fx ;; think unreg-fx\n  \"When called with no args, unregisters all effect handlers. When given one arg,\n   assumed to be the `id` of a registered effect handler, unregisters the \n   associated handler.\"\n  ([]\n   (registrar/clear-handlers fx/kind))\n  ([id]\n   (registrar/clear-handlers fx/kind id)))\n\n;; -- coeffects ---------------------------------------------------------------\n(defn reg-cofx\n  \"Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a function which takes either one or two arguements, the first of which is\n  always `coeffects` and which returns an updated `coeffects`.\n\n  See the docs for `inject-cofx` for example use.\"\n  [id handler]\n  (cofx/reg-cofx id handler))\n\n(defn inject-cofx\n  \"Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n   whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n   'coeffect handler' identified by the `id`.\n\n   The previous association of a `coeffect handler` with an `id` will have\n   happened via a call to `re-frame.core/reg-cofx` - generally on program startup.\n\n   Within the created interceptor, this 'looked up' `coeffect handler` will\n   be called (within the `:before`) with two arguments:\n     - the current value of `:coeffects`\n     - optionally, the originally supplied arbitrary `value`\n\n   This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n   Example Of how `inject-cofx` and `reg-cofx` work together\n   ---------------------------------------------------------\n\n   1. Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      (re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n   2. Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      (re-frame.core/reg-event-fx        ;; we are registering an event handler\n         :event-id\n         [ ... (inject-cofx :datetime) ... ]    ;; <-- create an injecting interceptor\n         (fn event-handler\n           [coeffect event]\n           ... in here can access (:now coeffect) to obtain current datetime ... )))\n\n   Background\n   ----------\n\n   `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes an event handler might need other resources.\n\n   Perhaps an event handler needs a random number or a GUID or the current\n   datetime. Perhaps it needs access to a DataScript database connection.\n\n   If an event handler directly accesses these resources, it stops being\n   pure and, consequently, it becomes harder to test, etc. So we don't\n   want that.\n\n   Instead, the interceptor created by this function is a way to 'inject'\n   'necessary resources' into the `:coeffects` (map) subsequently given\n   to the event handler at call time.\"\n  ([id]\n   (cofx/inject-cofx id))\n  ([id value]\n   (cofx/inject-cofx id value)))\n\n(defn clear-cofx ;; think unreg-cofx\n  \"When called with no args, unregisters all coeffect handlers. When given one arg,\n   assumed to be the `id` of a registered coeffect handler, unregisters the \n   associated handler.\" \n  ([]\n   (registrar/clear-handlers cofx/kind))\n  ([id]\n   (registrar/clear-handlers cofx/kind id)))\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n   (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx std-interceptors/inject-global-interceptors interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx std-interceptors/inject-global-interceptors interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx std-interceptors/inject-global-interceptors interceptors (ctx-handler->interceptor handler)])))\n\n(defn clear-event ;; think unreg-event-*\n  \"When called with no args, unregisters all event handlers. When given one arg,\n   assumed to be the `id` of a registered event handler, unregisters the \n   associated handler.\"  \n  ([]\n   (registrar/clear-handlers events/kind))\n  ([id]\n   (registrar/clear-handlers events/kind id)))\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug\n  \"An interceptor which logs/instruments an event handler's actions to\n  `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n\n  Output includes:\n  1. the event vector\n  2. a `clojure.data/diff` of db, before vs after, which shows\n     the changes caused by the event handler.  You will absolutely have\n     to understand https://clojuredocs.org/clojure.data/diff to\n     understand the output.\n\n  You'd typically include this interceptor after (to the right of) any\n  path interceptor.\n\n  Warning:  calling clojure.data/diff on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. So condition it out like this :\n\n      (re-frame.core/reg-event-db\n         :evt-id\n         [(when ^boolean goog.DEBUG re-frame.core/debug)]  ;; <-- conditional\n         (fn [db v]\n           ...))\n\n  To make this code fragment work, you'll also have to set goog.DEBUG to\n  false in your production builds - look in `project.clj` of /examples/todomvc.\n  \"\n  std-interceptors/debug)\n\n(def path\n  \"returns an interceptor whose `:before` substitutes the coeffects `:db` with\n  a sub-path of `:db`. Within `:after` it grafts the handler's return value\n  back into db, at the right path.\n\n  So, its overall action is to make the event handler behave like the function\n  you might give to clojure's `update-in`.\n\n  Examples:\n\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  \"\n  std-interceptors/path)\n\n(def enrich\n  \"Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n  ------------\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  https://twitter.com/nathanmarz/status/879722740776939520\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases.\"\n  std-interceptors/enrich)\n\n(def trim-v\n  \"An interceptor which removes the first element of the event vector,\n  allowing you to write more aesthetically pleasing event handlers. No\n  leading underscore on the event-v!\n  Your event handlers will look like this:\n\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)\"\n  std-interceptors/trim-v)\n\n(def after\n  \"returns an interceptor which runs a given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `coeffect` value of db if no db effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  Examples use can be seen in the /examples/todomvc:\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage.\"\n  std-interceptors/after)\n\n(def on-changes\n  \"Interceptor factory which acts a bit like `reaction`  (but it flows into\n  `db`, rather than out). It observes N paths within `db` and if any of them\n  test not identical? to their previous value  (as a result of a event handler\n  being run) then it runs `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Usage:\n\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  \"\n  std-interceptors/on-changes)\n\n\n(defn reg-global-interceptor\n  \"Registers `interceptor` as a global interceptor. Global interceptors are\n   included in the processing of every event.\n\n   When you register an event handler you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain in the order that they are registered.\"\n  [interceptor]\n  (settings/reg-global-interceptor interceptor))\n\n(defn clear-global-interceptor ;; think unreg-global-interceptor\n  \"When called with no args, unregisters all global interceptors. When given\n   one arg, assumed to be the `id` of a currently registered global\n   interceptor, it unregisters the associated interceptor.\"\n  ([]\n   (settings/clear-global-interceptors))\n  ([id]\n   (settings/clear-global-interceptors id)))\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (utils/apply-kw interceptor/->interceptor m))\n\n(defn get-coeffect\n  \"When called with one arg, returns the coeffects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the coeffects map, `not-found` or\n   `nil` if `key` is not present.\"\n  ([context]\n   (interceptor/get-coeffect context))\n  ([context key]\n   (interceptor/get-coeffect context key))\n  ([context key not-found]\n   (interceptor/get-coeffect context key not-found)))\n\n(defn assoc-coeffect\n  \"Returns a new `context` with a new coeffects map that contains `key`\n   mapped to the `value`.\"\n  [context key value]\n  (interceptor/assoc-coeffect context key value))\n\n(defn get-effect\n  \"When called with one arg, returns the effects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present.\"\n  ([context]\n   (interceptor/get-effect context))\n  ([context key]\n   (interceptor/get-effect context key))\n  ([context key not-found]\n   (interceptor/get-effect context key not-found)))\n\n(defn assoc-effect\n  \"Returns a new `context` with a new effects map that contains `key`\n   mapped to the `value`.\"\n  [context key value]\n  (interceptor/assoc-effect context key value))\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (interceptor/enqueue context interceptors))\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (loggers/set-loggers! new-loggers))\n\n(defn console\n  \"Logs `args` to the console at `level`. \n   Level can be one of `:log` `:error` `:warn` `:debug` `:group` `:groupEnd`.\n   If you are writing an extension to re-frame, like prehaps an effect handler,\n   you may want to use re-frame logging so that users can configure logging \n   from a central location.\n\n   usage: (console :error \\\"Oh, dear God, it happened:\\\" a-var \\\"and\\\" another)\n          (console :warn \\\"Possible breach of containment wall at:\\\" dt)\"\n  [level & args]\n  (apply loggers/console (into [level] args)))\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n        subs-cache @subs/query->reaction]\n    (fn []\n      ;; call `dispose!` on all current subscriptions which\n      ;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge re-frame.router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback re-frame.router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  \"Unregisters the function identified by `id` to be called after each event is\n   processed.\"\n  [id]\n  (router/remove-post-event-callback re-frame.router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  \"Deprecated. Use `reg-event-db` instead.\"\n  {:deprecated \"0.8.0\"}\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  \"Deprecated. Use `reg-sub-raw` instead.\"\n  {:deprecated \"0.8.0\"}\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.core/dispatch","event","re-frame.router/dispatch","re-frame.core/dispatch-sync","event-v","re-frame.router/dispatch-sync","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.core/reg-sub","seq61778","G__61779","cljs.core/first","cljs.core/next","self__4717__auto__","query-id","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","re-frame.subs/reg-sub","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__61788","re-frame.core/subscribe","js/Error","query","re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1","dynv","re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2","G__61804","re-frame.core/clear-sub","re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1","re-frame.subs/kind","re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$2","re-frame.core/clear-subscription-cache!","re-frame.subs/clear-subscription-cache!","re-frame.core/reg-sub-raw","handler-fn","re-frame.registrar/register-handler","re-frame.core/reg-fx","id","handler","re-frame.fx/reg-fx","G__61819","re-frame.core/clear-fx","re-frame.fx/kind","re-frame.core/reg-cofx","re-frame.cofx/reg-cofx","G__61838","re-frame.core/inject-cofx","re_frame.cofx.inject_cofx.cljs$core$IFn$_invoke$arity$1","value","re_frame.cofx.inject_cofx.cljs$core$IFn$_invoke$arity$2","G__61849","re-frame.core/clear-cofx","re-frame.cofx/kind","G__61851","re-frame.core/reg-event-db","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/inject-global-interceptors","re-frame.std-interceptors/db-handler->interceptor","G__61853","re-frame.core/reg-event-fx","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/fx-handler->interceptor","G__61855","re-frame.core/reg-event-ctx","re_frame.core.reg_event_ctx.cljs$core$IFn$_invoke$arity$3","re-frame.std-interceptors/ctx-handler->interceptor","G__61859","re-frame.core/clear-event","re-frame.events/kind","re-frame.core/debug","re-frame.std-interceptors/debug","re-frame.core/path","re-frame.std-interceptors/path","re-frame.core/enrich","re-frame.std-interceptors/enrich","re-frame.core/trim-v","re-frame.std-interceptors/trim-v","re-frame.core/after","re-frame.std-interceptors/after","re-frame.core/on-changes","re-frame.std-interceptors/on-changes","re-frame.core/reg-global-interceptor","interceptor","re-frame.settings/reg-global-interceptor","G__61886","re-frame.core/clear-global-interceptor","re_frame.settings.clear_global_interceptors.cljs$core$IFn$_invoke$arity$0","re_frame.settings.clear_global_interceptors.cljs$core$IFn$_invoke$arity$1","re-frame.core/->interceptor","p__61892","map__61894","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq61890","self__4718__auto__","cljs.core/seq","m","before","after","re_frame.utils.apply_kw.cljs$core$IFn$_invoke$arity$variadic","re-frame.interceptor/->interceptor","G__61905","re-frame.core/get-coeffect","context","re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1","key","re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2","not-found","re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3","re-frame.core/assoc-coeffect","re-frame.interceptor/assoc-coeffect","G__61923","re-frame.core/get-effect","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2","re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3","re-frame.core/assoc-effect","re-frame.interceptor/assoc-effect","re-frame.core/enqueue","re-frame.interceptor/enqueue","re-frame.core/set-loggers!","new-loggers","re-frame.loggers/set-loggers!","re-frame.core/console","seq61934","G__61935","level","re-frame.loggers/console","re-frame.core/make-restore-fn","cljs.core/deref","handlers","re-frame.registrar/kind->id->handler","app-db","re-frame.db/app-db","subs-cache","re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__61939","chunk__61940","count__61941","i__61942","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","sub","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","re-frame.interop/dispose!","cljs.core/reset!","re-frame.core/purge-event-queue","re-frame.router/event-queue","G__61945","re-frame.core/add-post-event-callback","f","re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$2","re-frame.core/remove-post-event-callback","re-frame.core/register-handler","seq61958","re_frame.core.console.cljs$core$IFn$_invoke$arity$variadic","re-frame.core/register-sub","seq61979"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1597770557000,1597770557000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development","~$module$node_modules$process$browser"]]],["^1M","reagent/impl/batching.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","~$reagent.debug","~$reagent.impl.util"]]],["^1M","goog/dom/tagname.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.dom.HtmlElement"]]],["^1M","goog/labs/useragent/platform.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.labs.userAgent.util","~$goog.string"]]],["~:macro","^Z"],[1597770669000],["^1M","goog/math/math.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.array","~$goog.asserts"]]],["^1M","goog/events/eventtype.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1M","goog/labs/useragent/browser.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","^2:","~$goog.object","~$goog.string.internal"]]],["^1M","re_frame/loggers.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^O"]]],["^2<","^27"],[1597780074000],["^1M","goog/array/array.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2>"]]],["^1Z","node_modules/prop-types/checkPropTypes.js"],[1597770557000,1597770557000,1549836454000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","~$module$node_modules$prop_types$lib$ReactPropTypesSecret","^26"]]],["^1M","reagent/impl/util.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","~$clojure.string"]]],["^1M","goog/useragent/useragent.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2:","~$goog.reflect","^2;"]]],["^1M","re_frame/router.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^U","^K","^W","~$re-frame.trace"]]],["^2<","~$net.cgrand.macrovich"],[1597780074000],["^1M","goog/debug/error.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","goog/events/events.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2>","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2?","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1M","re_frame/registrar.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^K","^W","^X"]]],["^1M","goog/events/browserfeature.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2@"]]],["^1M","goog/dom/nodetype.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^2<","~$reagent.core"],[1597780074000],["^1Z","node_modules/scheduler/cjs/scheduler.development.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","^26"]]],["^1M","reagent/ratom.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^28","^27","~$reagent.impl.batching","^O","^2A"]]],["^1Z","node_modules/scheduler/cjs/scheduler.production.min.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23"]]],["^1M","re_frame/interop.cljs"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","~$goog.async.nextTick","~$goog.events","^2O","~$reagent.ratom"]]],["^1M","goog/disposable/disposable.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.disposable.IDisposable"]]],["^1Z","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23"]]],["^1Z","node_modules/react/index.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development","^26"]]],["^1M","shadow/js.js"],[1597770557031,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","goog/object/object.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","reagent/impl/template.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^?","^2D","~$clojure.walk","^28","~$reagent.impl.component","^2P","^2S","^27","^2A"]]],["^1Z","node_modules/react-dom/cjs/react-dom.production.min.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1597770557000,1597770669000],["^1Z","node_modules/react/cjs/react.development.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","^2Y","~$module$node_modules$prop_types$checkPropTypes","^26"]]],["^2<","^2S"],[1597780074000],["^1M","re_frame/events.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^14","^16","^K","^Y","^W","^R","^2I"]]],["^1M","goog/math/long.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2>","^2H"]]],["^1M","goog/events/listener.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.events.ListenableKey"]]],["^1M","goog/events/listenermap.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","~$goog.events.Listener","^2A"]]],["^1M","goog/events/eventid.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","goog/string/internal.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1Z","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","^26"]]],["^1M","goog/functions/functions.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","reagent/impl/component.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^2A","^?","^28","^2P","^2S","^27"]]],["^1M","clojure/walk.cljs"],[1597770669034,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z"]]],["^1M","goog/structs/map.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1Z","node_modules/scheduler/index.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development","^26"]]],["^1M","goog/labs/useragent/engine.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","^2:","^2;"]]],["^1M","re_frame/settings.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^K","^W"]]],["^1M","goog/asserts/asserts.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1M","goog/uri/uri.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","^2>","^2;","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1Z","node_modules/object-assign/index.js"],[1597770557000,1597770557000,1484580833000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23"]]],["^1M","re_frame/db.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^K"]]],["^1M","goog/disposable/idisposable.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1Z","node_modules/process/browser.js"],[1597770557000,1597770557000,1493209628000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23"]]],["^1M","goog/base.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",[]]],["^1M","goog/structs/structs.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","^2A"]]],["^1M","clojure/string.cljs"],[1597770669034,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^2;","~$goog.string.StringBuffer"]]],["^1M","re_frame/cofx.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^14","^R","^Y","^W"]]],["^1Z","node_modules/react/cjs/react.production.min.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","^2Y"]]],["^1M","goog/debug/entrypointregistry.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2>"]]],["^1M","goog/string/string.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2B"]]],["^1M","re_frame/interceptor.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^W","^K","^2I","^O"]]],["^1M","clojure/data.cljs"],[1597770669034,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^O"]]],["^1M","goog/reflect/reflect.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","goog/labs/useragent/util.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2B"]]],["^1M","reagent/core.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^?","~$reagent.impl.template","^2X","^28","^2P","^2S","^27","~$reagent.dom"]]],["^1M","goog/debug/debug.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","~$goog.debug.errorcontext","^2@"]]],["^1M","goog/string/stringbuffer.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","re_frame/std_interceptors.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^R","^W","^X","^14","~$clojure.data","^Q","^16","^2I"]]],["^1M","goog/debug/errorcontext.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","goog/iter/iter.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","^2>","~$goog.functions","~$goog.math"]]],["^1M","goog/async/nexttick.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2K","~$goog.dom.TagName","^3C","^2E","^2F"]]],["^1M","re_frame/utils.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^W"]]],["^1M","reagent/dom.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^A","^28","^3?","^2P","^2S"]]],["^1M","re_frame/fx.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^12","^14","^R","^K","^U","^Y","^W","^2I"]]],["^1Z","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1597770557000,1597770557000,1549571078000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23"]]],["^1M","goog/events/event.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.Disposable","~$goog.events.EventId"]]],["^1M","goog/dom/htmlelement.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1M","cljs/core.cljs"],[1597770669034,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["~$goog.math.Long","~$goog.math.Integer","^2;","^2A","^2=","~$goog.Uri","^3>"]]],["^1M","reagent/debug.cljs"],[1597780074412,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z"]]],["^1M","goog/events/browserevent.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","~$goog.debug","^2?","~$goog.events.Event","~$goog.events.EventType","^2H","^2@"]]],["^2<","^2I"],[1597780074000],["^1M","goog/math/integer.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10"]]],["^1Z","node_modules/scheduler/tracing.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development","^26"]]],["^1Z","node_modules/react-dom/cjs/react-dom.development.js"],[1597770557000,1597770557000,499162500000,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^23","^?","^2Y","^2Z","^30","~$module$node_modules$scheduler$tracing","^26"]]],["^1M","clojure/set.cljs"],[1597770669034,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z"]]],["^1M","goog/uri/utils.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^2=","^2>","^2;"]]],["^1M","goog/events/listenable.js"],[1597770556544,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^3G"]]],["^1M","re_frame/trace.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^K","^W","^3C"]]],["^1M","re_frame/subs.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^14","^K","^W","^16","^Y","^2I"]]],["^1M","re_frame/core.cljc"],[1597780074492,"^1[",["^ ","^20",null,"^21",["^D",[]],"^22",["^10","^Z","^U","^M","^K","^14","^T","^Q","^12","^X","^W","^Y","^R","^19","^16","^O"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/core.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^M","^N","^O","^P","^Q","^R","^R","^S","^T","^U","^U","^V","^W","^X","^X","^T","^T","^Y","^Y","^Z","^Z","^[","^R","^10","^10","^11","^12","^13","^14","^15","^Y","^12","^12","^16","^16","^O","^O","^17","^U","^18","^X","^19","^19","^W","^W","^M","^M","^1:","^K","^1;","^16","^1<","^19","^Q","^Q","^14","^14"],"^1=",["^D",["^1>"]],"~:shadow/js-access-global",["^D",["Error"]],"^1?",["^ ","^1@","^19","^1A","^19","^1B","^19"],"~:defs",["^ ","~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/core.cljc","^7",695,"^8",7,"^9",695,"^:",14,"~:arglists",["^1E",["~$quote",["^1E",[["~$level","~$&","~$args"]]]]],"~:doc","Logs `args` to the console at `level`. \n   Level can be one of `:log` `:error` `:warn` `:debug` `:group` `:groupEnd`.\n   If you are writing an extension to re-frame, like prehaps an effect handler,\n   you may want to use re-frame logging so that users can configure logging \n   from a central location.\n\n   usage: (console :error \"Oh, dear God, it happened:\" a-var \"and\" another)\n          (console :warn \"Possible breach of containment wall at:\" dt)","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^1E",["^3X","^3Y"]]],"^3V",["^1E",[["^3X","~$&","^3Y"]]],"~:arglists-meta",["^1E",[null]]]],"^E","~$re-frame.core/console","^6","re_frame/core.cljc","^:",14,"^3[",["^ ","^40",true,"^41",1,"^42",1,"^43",[["^1E",["^3X","^3Y"]]],"^3V",["^1E",[["^3X","~$&","^3Y"]]],"^44",["^1E",[null]]],"^43",[["^1E",["^3X","^3Y"]]],"~:protocol-impl",null,"^41",1,"^44",["^1E",[null]],"^8",1,"^40",true,"~:methods",[["^ ","^41",1,"^40",true,"~:tag","~$any"]],"^7",695,"~:ret-tag","^49","^9",695,"^42",1,"~:fn-var",true,"^3V",["^1E",[["^3X","~$&","^3Y"]]],"^3Z","Logs `args` to the console at `level`. \n   Level can be one of `:log` `:error` `:warn` `:debug` `:group` `:groupEnd`.\n   If you are writing an extension to re-frame, like prehaps an effect handler,\n   you may want to use re-frame logging so that users can configure logging \n   from a central location.\n\n   usage: (console :error \"Oh, dear God, it happened:\" a-var \"and\" another)\n          (console :warn \"Possible breach of containment wall at:\" dt)"],"~$on-changes",["^ ","^E","~$re-frame.core/on-changes","^6","re_frame/core.cljc","^7",576,"^8",1,"^9",576,"^:",16,"^5",["^ ","^6","re_frame/core.cljc","^7",576,"^8",6,"^9",576,"^:",16],"^3Z","Interceptor factory which acts a bit like `reaction`  (but it flows into\n  `db`, rather than out). It observes N paths within `db` and if any of them\n  test not identical? to their previous value  (as a result of a event handler\n  being run) then it runs `f` to compute a new value, which is then assoc-ed\n  into the given `out-path` within `db`.\n\n  Usage:\n\n      (defn my-f\n        [a-val b-val]\n        ... some computation on a and b in here)\n\n      (on-changes my-f [:c]  [:a] [:b])\n\n  Put this Interceptor on the right handlers (ones which might change :a or :b).\n  It will:\n     - call `f` each time the value at path [:a] or [:b] changes\n     - call `f` with the values extracted from [:a] [:b]\n     - assoc the return value from `f` into the path  [:c]\n  "],"~$enrich",["^ ","^E","~$re-frame.core/enrich","^6","re_frame/core.cljc","^7",506,"^8",1,"^9",506,"^:",12,"^5",["^ ","^6","re_frame/core.cljc","^7",506,"^8",6,"^9",506,"^:",12],"^3Z","Interceptor factory which runs the given function `f` in the `after handler`\n  position.  `f` is called with two arguments: `db` and `v`, and is expected to\n  return a modified `db`.\n\n  Unlike the `after` interceptor which is only about side effects, `enrich`\n  expects `f` to process and alter the given `db` coeffect in some useful way,\n  contributing to the derived data, flowing vibe.\n\n  Example Use:\n  ------------\n\n  Imagine that todomvc needed to do duplicate detection - if any two todos had\n  the same text, then highlight their background, and report them via a warning\n  at the bottom of the panel.\n\n  Almost any user action (edit text, add new todo, remove a todo) requires a\n  complete reassessment of duplication errors and warnings. Eg: that edit\n  just made might have introduced a new duplicate, or removed one. Same with\n  any todo removal. So we need to re-calculate warnings after any CRUD events\n  associated with the todos list.\n\n  Unless we are careful, we might end up coding subtly different checks\n  for each kind of CRUD operation.  The duplicates check made after\n  'delete todo' event might be subtly different to that done after an\n  editing operation. Nice and efficient, but fiddly. A bug generator\n  approach.\n\n  So, instead, we create an `f` which recalculates ALL warnings from scratch\n  every time there is ANY change. It will inspect all the todos, and\n  reset ALL FLAGS every time (overwriting what was there previously)\n  and fully recalculate the list of duplicates (displayed at the bottom?).\n\n  https://twitter.com/nathanmarz/status/879722740776939520\n\n  By applying `f` in an `:enrich` interceptor, after every CRUD event,\n  we keep the handlers simple and yet we ensure this important step\n  (of getting warnings right) is not missed on any change.\n\n  We can test `f` easily - it is a pure function - independently of\n  any CRUD operation.\n\n  This brings huge simplicity at the expense of some re-computation\n  each time. This may be a very satisfactory trade-off in many cases."],"~$reg-sub-raw",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",264,"^8",7,"^9",264,"^:",18,"^3V",["^1E",["^3W",["^1E",[["~$query-id","~$handler-fn"]]]]],"^3Z","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/flow-mechanics.md"],"^E","~$re-frame.core/reg-sub-raw","^6","re_frame/core.cljc","^:",18,"^43",["^1E",[["^4A","^4B"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",264,"^4:","^49","^9",264,"^42",2,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^4A","^4B"]]]]],"^3Z","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/flow-mechanics.md"],"~$subscribe",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",191,"^8",7,"^9",191,"^:",16,"^3V",["^1E",["^3W",["^1E",[["~$query"],["^4E","~$dynv"]]]]],"^3Z","Given a `query` vector, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  Two, or more, concurrent subscriptions for the same query will source reactive\n  updates from the one executing handler.\n  ","^3[",["^ ","^40",false,"^41",2,"^42",2,"^43",["^1E",[["^4E"],["^4E","^4F"]]],"^3V",["^1E",[["^4E"],["^4E","^4F"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/subscribe","^6","re_frame/core.cljc","^:",16,"^3[",["^ ","^40",false,"^41",2,"^42",2,"^43",["^1E",[["^4E"],["^4E","^4F"]]],"^3V",["^1E",[["^4E"],["^4E","^4F"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[["^4E"],["^4E","^4F"]]],"^46",null,"^41",2,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",1,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",2,"^40",false,"^48",["^D",[null,"^49"]]]],"^7",191,"^9",191,"^42",2,"^4;",true,"^3V",["^1E",[["^4E"],["^4E","^4F"]]],"^3Z","Given a `query` vector, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  Two, or more, concurrent subscriptions for the same query will source reactive\n  updates from the one executing handler.\n  "],"~$reg-global-interceptor",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",600,"^8",7,"^9",600,"^:",29,"^3V",["^1E",["^3W",["^1E",[["^["]]]]],"^3Z","Registers `interceptor` as a global interceptor. Global interceptors are\n   included in the processing of every event.\n\n   When you register an event handler you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain in the order that they are registered."],"^E","~$re-frame.core/reg-global-interceptor","^6","re_frame/core.cljc","^:",29,"^43",["^1E",[["^["]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",600,"^4:",["^D",[null,"^49"]],"^9",600,"^42",1,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^["]]]]],"^3Z","Registers `interceptor` as a global interceptor. Global interceptors are\n   included in the processing of every event.\n\n   When you register an event handler you have the option of supplying an\n   interceptor chain. Any global interceptors you register are effectively\n   prepending to this chain in the order that they are registered."],"~$assoc-coeffect",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",648,"^8",7,"^9",648,"^:",21,"^3V",["^1E",["^3W",["^1E",[["~$context","~$key","~$value"]]]]],"^3Z","Returns a new `context` with a new coeffects map that contains `key`\n   mapped to the `value`."],"^E","~$re-frame.core/assoc-coeffect","^6","re_frame/core.cljc","^:",21,"^43",["^1E",[["^4K","^4L","^4M"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",648,"^4:",["^D",["~$clj","^49"]],"^9",648,"^42",3,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^4K","^4L","^4M"]]]]],"^3Z","Returns a new `context` with a new coeffects map that contains `key`\n   mapped to the `value`."],"~$register-sub",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^:",19,"^3[",["^ ","^40",true,"^41",0,"^42",0,"^43",[["^1E",["^3Y"]]],"^3V",["^1E",[["~$&","^3Y"]]],"^44",["^1E",[null]]],"^8",7,"^7",778,"~:deprecated","0.8.0","^9",778,"^3V",["^1E",["^3W",["^1E",[["~$&","^3Y"]]]]],"^3Z","Deprecated. Use `reg-sub-raw` instead."],"^E","~$re-frame.core/register-sub","^6","re_frame/core.cljc","^:",19,"^3[",["^ ","^40",true,"^41",0,"^42",0,"^43",[["^1E",["^3Y"]]],"^3V",["^1E",[["~$&","^3Y"]]],"^44",["^1E",[null]]],"^43",[["^1E",["^3Y"]]],"^46",null,"^41",0,"^44",["^1E",[null]],"^8",1,"^40",true,"^47",[["^ ","^41",0,"^40",true,"^48","^49"]],"^7",778,"^4Q","0.8.0","^4:","^49","^9",778,"^42",0,"^4;",true,"^3V",["^1E",[["~$&","^3Y"]]],"^3Z","Deprecated. Use `reg-sub-raw` instead."],"~$purge-event-queue",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",734,"^8",7,"^9",734,"^:",24,"^3V",["^1E",["^3W",["^1E",[[]]]]],"^3Z","Remove all events queued for processing"],"^E","~$re-frame.core/purge-event-queue","^6","re_frame/core.cljc","^:",24,"^43",["^1E",[[]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",734,"^4:","^49","^9",734,"^42",0,"^4;",true,"^3V",["^1E",["^3W",["^1E",[[]]]]],"^3Z","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",762,"^8",7,"^9",762,"^:",33,"^3V",["^1E",["^3W",["^1E",[["~$id"]]]]],"^3Z","Unregisters the function identified by `id` to be called after each event is\n   processed."],"^E","~$re-frame.core/remove-post-event-callback","^6","re_frame/core.cljc","^:",33,"^43",["^1E",[["^4V"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",762,"^4:","^49","^9",762,"^42",1,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^4V"]]]]],"^3Z","Unregisters the function identified by `id` to be called after each event is\n   processed."],"~$path",["^ ","^E","~$re-frame.core/path","^6","re_frame/core.cljc","^7",477,"^8",1,"^9",477,"^:",10,"^5",["^ ","^6","re_frame/core.cljc","^7",477,"^8",6,"^9",477,"^:",10],"^3Z","returns an interceptor whose `:before` substitutes the coeffects `:db` with\n  a sub-path of `:db`. Within `:after` it grafts the handler's return value\n  back into db, at the right path.\n\n  So, its overall action is to make the event handler behave like the function\n  you might give to clojure's `update-in`.\n\n  Examples:\n\n      (path :some :path)\n      (path [:some :path])\n      (path [:some :path] :to :here)\n      (path [:some :path] [:to] :here)\n\n  Example Use:\n\n      (reg-event-db\n        :event-id\n        (path [:a :b])  ;; used here, in interceptor chain\n        (fn [b v]       ;; 1st arg is now not db. Is the value from path [:a :b] within db\n          ... new-b))   ;; returns a new value for that path (not the entire db)\n\n  Notes:\n    1. `path` may appear more than once in an interceptor chain. Progressive narrowing.\n    2. if `:effects` contains no `:db` effect, can't graft a value back in.\n  "],"~$reg-sub",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",58,"^8",7,"^9",58,"^:",14,"^3V",["^1E",["^3W",["^1E",[["^4A","~$&","^3Y"]]]]],"^3Z","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n\n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering\n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created.\n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later.\n\n  `reg-sub` arguments are:\n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways)\n    - a function which computes the value of this kind of node\n\n  The `computation function` is always the last argument supplied and it is expected to have the signature:\n    `(input-values, query-vector) -> a-value`\n\n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the\n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways,\n  but whatever is there defines the `input signals` part of the template, controlling what input\n values \"flow into\" the `computation function` gets when it is called.\n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other\n  two are really just sugary variations.\n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n\n     This is the most canonical and instructive of the three variations.\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to\n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n\n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn\n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function,\n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^3[",["^ ","^40",true,"^41",1,"^42",1,"^43",[["^1E",["^4A","^3Y"]]],"^3V",["^1E",[["^4A","~$&","^3Y"]]],"^44",["^1E",[null]]]],"^E","~$re-frame.core/reg-sub","^6","re_frame/core.cljc","^:",14,"^3[",["^ ","^40",true,"^41",1,"^42",1,"^43",[["^1E",["^4A","^3Y"]]],"^3V",["^1E",[["^4A","~$&","^3Y"]]],"^44",["^1E",[null]]],"^43",[["^1E",["^4A","^3Y"]]],"^46",null,"^41",1,"^44",["^1E",[null]],"^8",1,"^40",true,"^47",[["^ ","^41",1,"^40",true,"^48","^49"]],"^7",58,"^4:","^49","^9",58,"^42",1,"^4;",true,"^3V",["^1E",[["^4A","~$&","^3Y"]]],"^3Z","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n\n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering\n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created.\n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later.\n\n  `reg-sub` arguments are:\n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways)\n    - a function which computes the value of this kind of node\n\n  The `computation function` is always the last argument supplied and it is expected to have the signature:\n    `(input-values, query-vector) -> a-value`\n\n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the\n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`,\n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways,\n  but whatever is there defines the `input signals` part of the template, controlling what input\n values \"flow into\" the `computation function` gets when it is called.\n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other\n  two are really just sugary variations.\n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.\n\n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n\n     This is the most canonical and instructive of the three variations.\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to\n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns,\n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n\n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn\n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function,\n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$make-restore-fn",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",709,"^8",7,"^9",709,"^:",22,"^3V",["^1E",["^3W",["^1E",[[]]]]],"^3Z","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^E","~$re-frame.core/make-restore-fn","^6","re_frame/core.cljc","^:",22,"^43",["^1E",[[]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",709,"^4:","~$function","^9",709,"^42",0,"^4;",true,"^3V",["^1E",["^3W",["^1E",[[]]]]],"^3Z","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",300,"^8",7,"^9",300,"^:",15,"^3V",["^1E",["^3W",["^1E",[[],["^4V"]]]]],"^3Z","When called with no args, unregisters all effect handlers. When given one arg,\n   assumed to be the `id` of a registered effect handler, unregisters the \n   associated handler.","^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/clear-fx","^6","re_frame/core.cljc","^:",15,"^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[[],["^4V"]]],"^46",null,"^41",1,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",0,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",1,"^40",false,"^48",["^D",[null,"^49"]]]],"^7",300,"^9",300,"^42",1,"^4;",true,"^3V",["^1E",[[],["^4V"]]],"^3Z","When called with no args, unregisters all effect handlers. When given one arg,\n   assumed to be the `id` of a registered effect handler, unregisters the \n   associated handler."],"~$get-effect",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",654,"^8",7,"^9",654,"^:",17,"^3V",["^1E",["^3W",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","~$not-found"]]]]],"^3Z","When called with one arg, returns the effects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present.","^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^3V",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^44",["^1E",[null,null,null]]]],"^E","~$re-frame.core/get-effect","^6","re_frame/core.cljc","^:",17,"^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^3V",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^44",["^1E",[null,null,null]]],"^43",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^46",null,"^41",3,"^44",["^1E",[null,null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",1,"^40",false,"^48","^49"],["^ ","^41",2,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",3,"^40",false,"^48","^49"]],"^7",654,"^9",654,"^42",3,"^4;",true,"^3V",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^3Z","When called with one arg, returns the effects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the effects map, `not-found` or\n   `nil` if `key` is not present."],"~$reg-event-db",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",390,"^8",7,"^9",390,"^:",19,"^3V",["^1E",["^3W",["^1E",[["^4V","~$handler"],["^4V","~$interceptors","^59"]]]]],"^3Z","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/reg-event-db","^6","re_frame/core.cljc","^:",19,"^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^46",null,"^41",3,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",2,"^40",false,"^48","^49"],["^ ","^41",3,"^40",false,"^48","^49"]],"^7",390,"^9",390,"^42",3,"^4;",true,"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3Z","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",40,"^8",7,"^9",40,"^:",20,"^3V",["^1E",["^3W",["^1E",[["~$event-v"]]]]],"^3Z","Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])"],"^E","~$re-frame.core/dispatch-sync","^6","re_frame/core.cljc","^:",20,"^43",["^1E",[["^5="]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",40,"^4:","~$clj-nil","^9",40,"^42",1,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^5="]]]]],"^3Z","Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])"],"~$clear-event",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",435,"^8",7,"^9",435,"^:",18,"^3V",["^1E",["^3W",["^1E",[[],["^4V"]]]]],"^3Z","When called with no args, unregisters all event handlers. When given one arg,\n   assumed to be the `id` of a registered event handler, unregisters the \n   associated handler.","^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/clear-event","^6","re_frame/core.cljc","^:",18,"^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[[],["^4V"]]],"^46",null,"^41",1,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",0,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",1,"^40",false,"^48",["^D",[null,"^49"]]]],"^7",435,"^9",435,"^42",1,"^4;",true,"^3V",["^1E",[[],["^4V"]]],"^3Z","When called with no args, unregisters all event handlers. When given one arg,\n   assumed to be the `id` of a registered event handler, unregisters the \n   associated handler."],"~$->interceptor",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",631,"^8",7,"^9",631,"^:",20,"^3V",["^1E",["^3W",["^1E",[["~$&",["^ ","^1G","~$m","~:keys",["^4V","~$before","~$after"]]]]]]],"^3Z","Create an interceptor from named arguments","^3[",["^ ","^40",true,"^41",0,"^42",0,"^43",[["^1E",[["^ ","^1G","~$m","^5C",["^4V","^5D","^5E"]]]]],"^3V",["^1E",[["~$&",["^ ","^1G","~$m","^5C",["^4V","^5D","^5E"]]]]],"^44",["^1E",[null]]]],"^E","~$re-frame.core/->interceptor","^6","re_frame/core.cljc","^:",20,"^3[",["^ ","^40",true,"^41",0,"^42",0,"^43",[["^1E",[["^ ","^1G","~$m","^5C",["^4V","^5D","^5E"]]]]],"^3V",["^1E",[["~$&",["^ ","^1G","~$m","^5C",["^4V","^5D","^5E"]]]]],"^44",["^1E",[null]]],"^43",[["^1E",[["^ ","^1G","~$m","^5C",["^4V","^5D","^5E"]]]]],"^46",null,"^41",0,"^44",["^1E",[null]],"^8",1,"^40",true,"^47",[["^ ","^41",0,"^40",true,"^48","^49"]],"^7",631,"^4:","^49","^9",631,"^42",0,"^4;",true,"^3V",["^1E",[["~$&",["^ ","^1G","~$m","^5C",["^4V","^5D","^5E"]]]]],"^3Z","Create an interceptor from named arguments"],"~$set-loggers!",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",689,"^8",7,"^9",689,"^:",19,"^3V",["^1E",["^3W",["^1E",[["~$new-loggers"]]]]],"^3Z","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^E","~$re-frame.core/set-loggers!","^6","re_frame/core.cljc","^:",19,"^43",["^1E",[["^5H"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",689,"^4:",["^D",[null,"^49"]],"^9",689,"^42",1,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^5H"]]]]],"^3Z","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$inject-cofx",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",322,"^8",7,"^9",322,"^:",18,"^3V",["^1E",["^3W",["^1E",[["^4V"],["^4V","^4M"]]]]],"^3Z","Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n   whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n   'coeffect handler' identified by the `id`.\n\n   The previous association of a `coeffect handler` with an `id` will have\n   happened via a call to `re-frame.core/reg-cofx` - generally on program startup.\n\n   Within the created interceptor, this 'looked up' `coeffect handler` will\n   be called (within the `:before`) with two arguments:\n     - the current value of `:coeffects`\n     - optionally, the originally supplied arbitrary `value`\n\n   This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n   Example Of how `inject-cofx` and `reg-cofx` work together\n   ---------------------------------------------------------\n\n   1. Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      (re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n   2. Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      (re-frame.core/reg-event-fx        ;; we are registering an event handler\n         :event-id\n         [ ... (inject-cofx :datetime) ... ]    ;; <-- create an injecting interceptor\n         (fn event-handler\n           [coeffect event]\n           ... in here can access (:now coeffect) to obtain current datetime ... )))\n\n   Background\n   ----------\n\n   `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes an event handler might need other resources.\n\n   Perhaps an event handler needs a random number or a GUID or the current\n   datetime. Perhaps it needs access to a DataScript database connection.\n\n   If an event handler directly accesses these resources, it stops being\n   pure and, consequently, it becomes harder to test, etc. So we don't\n   want that.\n\n   Instead, the interceptor created by this function is a way to 'inject'\n   'necessary resources' into the `:coeffects` (map) subsequently given\n   to the event handler at call time.","^3[",["^ ","^40",false,"^41",2,"^42",2,"^43",["^1E",[["^4V"],["^4V","^4M"]]],"^3V",["^1E",[["^4V"],["^4V","^4M"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/inject-cofx","^6","re_frame/core.cljc","^:",18,"^3[",["^ ","^40",false,"^41",2,"^42",2,"^43",["^1E",[["^4V"],["^4V","^4M"]]],"^3V",["^1E",[["^4V"],["^4V","^4M"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[["^4V"],["^4V","^4M"]]],"^46",null,"^41",2,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",1,"^40",false,"^48","~$cljs.core/IMap"],["^ ","^41",2,"^40",false,"^48","^5L"]],"^7",322,"^9",322,"^42",2,"^4;",true,"^3V",["^1E",[["^4V"],["^4V","^4M"]]],"^3Z","Given an `id`, and an optional, arbitrary `value`, returns an interceptor\n   whose `:before` adds to the `:coeffects` (map) by calling a pre-registered\n   'coeffect handler' identified by the `id`.\n\n   The previous association of a `coeffect handler` with an `id` will have\n   happened via a call to `re-frame.core/reg-cofx` - generally on program startup.\n\n   Within the created interceptor, this 'looked up' `coeffect handler` will\n   be called (within the `:before`) with two arguments:\n     - the current value of `:coeffects`\n     - optionally, the originally supplied arbitrary `value`\n\n   This `coeffect handler` is expected to modify and return its first, `coeffects` argument.\n\n   Example Of how `inject-cofx` and `reg-cofx` work together\n   ---------------------------------------------------------\n\n   1. Early in app startup, you register a `coeffect handler` for `:datetime`:\n\n      (re-frame.core/reg-cofx\n        :datetime                        ;; usage  (inject-cofx :datetime)\n        (fn coeffect-handler\n          [coeffect]\n          (assoc coeffect :now (js/Date.))))   ;; modify and return first arg\n\n   2. Later, add an interceptor to an -fx event handler, using `inject-cofx`:\n\n      (re-frame.core/reg-event-fx        ;; we are registering an event handler\n         :event-id\n         [ ... (inject-cofx :datetime) ... ]    ;; <-- create an injecting interceptor\n         (fn event-handler\n           [coeffect event]\n           ... in here can access (:now coeffect) to obtain current datetime ... )))\n\n   Background\n   ----------\n\n   `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes an event handler might need other resources.\n\n   Perhaps an event handler needs a random number or a GUID or the current\n   datetime. Perhaps it needs access to a DataScript database connection.\n\n   If an event handler directly accesses these resources, it stops being\n   pure and, consequently, it becomes harder to test, etc. So we don't\n   want that.\n\n   Instead, the interceptor created by this function is a way to 'inject'\n   'necessary resources' into the `:coeffects` (map) subsequently given\n   to the event handler at call time."],"~$clear-global-interceptor",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",610,"^8",7,"^9",610,"^:",31,"^3V",["^1E",["^3W",["^1E",[[],["^4V"]]]]],"^3Z","When called with no args, unregisters all global interceptors. When given\n   one arg, assumed to be the `id` of a currently registered global\n   interceptor, it unregisters the associated interceptor.","^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/clear-global-interceptor","^6","re_frame/core.cljc","^:",31,"^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[[],["^4V"]]],"^46",null,"^41",1,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",0,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",1,"^40",false,"^48",["^D",[null,"^49"]]]],"^7",610,"^9",610,"^42",1,"^4;",true,"^3V",["^1E",[[],["^4V"]]],"^3Z","When called with no args, unregisters all global interceptors. When given\n   one arg, assumed to be the `id` of a currently registered global\n   interceptor, it unregisters the associated interceptor."],"~$get-coeffect",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",636,"^8",7,"^9",636,"^:",19,"^3V",["^1E",["^3W",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]]]],"^3Z","When called with one arg, returns the coeffects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the coeffects map, `not-found` or\n   `nil` if `key` is not present.","^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^3V",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^44",["^1E",[null,null,null]]]],"^E","~$re-frame.core/get-coeffect","^6","re_frame/core.cljc","^:",19,"^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^3V",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^44",["^1E",[null,null,null]]],"^43",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^46",null,"^41",3,"^44",["^1E",[null,null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",1,"^40",false,"^48","^49"],["^ ","^41",2,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",3,"^40",false,"^48","^49"]],"^7",636,"^9",636,"^42",3,"^4;",true,"^3V",["^1E",[["^4K"],["^4K","^4L"],["^4K","^4L","^56"]]],"^3Z","When called with one arg, returns the coeffects map from the `context`.\n   When called with two or three args, behaves like `clojure.core/get`, \n   returns the value mapped to `key` in the coeffects map, `not-found` or\n   `nil` if `key` is not present."],"~$debug",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",448,"^8",6,"^9",448,"^:",11],"^E","~$re-frame.core/debug","^6","re_frame/core.cljc","^:",11,"^8",1,"^7",448,"^9",448,"^48","^5L","^3Z","An interceptor which logs/instruments an event handler's actions to\n  `js/console.debug`. See examples/todomvc/src/events.cljs for use.\n\n  Output includes:\n  1. the event vector\n  2. a `clojure.data/diff` of db, before vs after, which shows\n     the changes caused by the event handler.  You will absolutely have\n     to understand https://clojuredocs.org/clojure.data/diff to\n     understand the output.\n\n  You'd typically include this interceptor after (to the right of) any\n  path interceptor.\n\n  Warning:  calling clojure.data/diff on large, complex data structures\n  can be slow. So, you won't want this interceptor present in production\n  code. So condition it out like this :\n\n      (re-frame.core/reg-event-db\n         :evt-id\n         [(when ^boolean goog.DEBUG re-frame.core/debug)]  ;; <-- conditional\n         (fn [db v]\n           ...))\n\n  To make this code fragment work, you'll also have to set goog.DEBUG to\n  false in your production builds - look in `project.clj` of /examples/todomvc.\n  "],"~$assoc-effect",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",666,"^8",7,"^9",666,"^:",19,"^3V",["^1E",["^3W",["^1E",[["^4K","^4L","^4M"]]]]],"^3Z","Returns a new `context` with a new effects map that contains `key`\n   mapped to the `value`."],"^E","~$re-frame.core/assoc-effect","^6","re_frame/core.cljc","^:",19,"^43",["^1E",[["^4K","^4L","^4M"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",666,"^4:",["^D",["^4O","^49"]],"^9",666,"^42",3,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^4K","^4L","^4M"]]]]],"^3Z","Returns a new `context` with a new effects map that contains `key`\n   mapped to the `value`."],"~$enqueue",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",672,"^8",7,"^9",672,"^:",14,"^3V",["^1E",["^3W",["^1E",[["^4K","^5:"]]]]],"^3Z","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^E","~$re-frame.core/enqueue","^6","re_frame/core.cljc","^:",14,"^43",["^1E",[["^4K","^5:"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",672,"^4:",["^D",["^4O","^49"]],"^9",672,"^42",2,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^4K","^5:"]]]]],"^3Z","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$clear-cofx",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",379,"^8",7,"^9",379,"^:",17,"^3V",["^1E",["^3W",["^1E",[[],["^4V"]]]]],"^3Z","When called with no args, unregisters all coeffect handlers. When given one arg,\n   assumed to be the `id` of a registered coeffect handler, unregisters the \n   associated handler.","^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/clear-cofx","^6","re_frame/core.cljc","^:",17,"^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4V"]]],"^3V",["^1E",[[],["^4V"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[[],["^4V"]]],"^46",null,"^41",1,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",0,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",1,"^40",false,"^48",["^D",[null,"^49"]]]],"^7",379,"^9",379,"^42",1,"^4;",true,"^3V",["^1E",[[],["^4V"]]],"^3Z","When called with no args, unregisters all coeffect handlers. When given one arg,\n   assumed to be the `id` of a registered coeffect handler, unregisters the \n   associated handler."],"~$reg-event-ctx",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",423,"^8",7,"^9",423,"^:",20,"^3V",["^1E",["^3W",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]]]],"^3Z","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/reg-event-ctx","^6","re_frame/core.cljc","^:",20,"^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^46",null,"^41",3,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",2,"^40",false,"^48","^49"],["^ ","^41",3,"^40",false,"^48","^49"]],"^7",423,"^9",423,"^42",3,"^4;",true,"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3Z","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",273,"^8",7,"^9",273,"^:",13,"^3V",["^1E",["^3W",["^1E",[["^4V","^59"]]]]],"^3Z","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^E","~$re-frame.core/reg-fx","^6","re_frame/core.cljc","^:",13,"^43",["^1E",[["^4V","^59"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",273,"^4:","^49","^9",273,"^42",2,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^4V","^59"]]]]],"^3Z","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$trim-v",["^ ","^5",["^ ","^6","re_frame/core.cljc","^7",552,"^8",6,"^9",552,"^:",12],"^E","~$re-frame.core/trim-v","^6","re_frame/core.cljc","^:",12,"^8",1,"^7",552,"^9",552,"^48","^5L","^3Z","An interceptor which removes the first element of the event vector,\n  allowing you to write more aesthetically pleasing event handlers. No\n  leading underscore on the event-v!\n  Your event handlers will look like this:\n\n      (defn my-handler\n        [db [x y z]]    ;; <-- instead of [_ x y z]\n        ....)"],"~$clear-sub",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",239,"^8",7,"^9",239,"^:",16,"^3V",["^1E",["^3W",["^1E",[[],["^4A"]]]]],"^3Z","When called with no args, unregisters all subscription handlers. When given\n   one arg, assumed to be a `query-id` of a registered subscription handler,\n   unregisters the associated handler.\n\n   NOTE: Depending on the usecase it may also be necessary to call \n         `clear-subscription-cache!`.","^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4A"]]],"^3V",["^1E",[[],["^4A"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/clear-sub","^6","re_frame/core.cljc","^:",16,"^3[",["^ ","^40",false,"^41",1,"^42",1,"^43",["^1E",[[],["^4A"]]],"^3V",["^1E",[[],["^4A"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[[],["^4A"]]],"^46",null,"^41",1,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",0,"^40",false,"^48",["^D",[null,"^49"]]],["^ ","^41",1,"^40",false,"^48",["^D",[null,"^49"]]]],"^7",239,"^9",239,"^42",1,"^4;",true,"^3V",["^1E",[[],["^4A"]]],"^3Z","When called with no args, unregisters all subscription handlers. When given\n   one arg, assumed to be a `query-id` of a registered subscription handler,\n   unregisters the associated handler.\n\n   NOTE: Depending on the usecase it may also be necessary to call \n         `clear-subscription-cache!`."],"~$dispatch",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",26,"^8",7,"^9",26,"^:",15,"^3V",["^1E",["^3W",["^1E",[["~$event"]]]]],"^3Z","Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1}])"],"^E","~$re-frame.core/dispatch","^6","re_frame/core.cljc","^:",15,"^43",["^1E",[["^66"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",26,"^4:","^5?","^9",26,"^42",1,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^66"]]]]],"^3Z","Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1}])"],"^5E",["^ ","^E","~$re-frame.core/after","^6","re_frame/core.cljc","^7",563,"^8",1,"^9",563,"^:",11,"^5",["^ ","^6","re_frame/core.cljc","^7",563,"^8",6,"^9",563,"^:",11],"^3Z","returns an interceptor which runs a given function `f` in the `:after`\n  position, presumably for side effects.\n\n  `f` is called with two arguments: the `:effects` value for `:db`\n  (or the `coeffect` value of db if no db effect is returned) and the event.\n  Its return value is ignored, so `f` can only side-effect.\n\n  Examples use can be seen in the /examples/todomvc:\n     - `f` runs schema validation (reporting any errors found).\n     - `f` writes to localstorage."],"~$add-post-event-callback",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",741,"^8",7,"^9",741,"^:",30,"^3V",["^1E",["^3W",["^1E",[["~$f"],["^4V","~$f"]]]]],"^3Z","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^3[",["^ ","^40",false,"^41",2,"^42",2,"^43",["^1E",[["~$f"],["^4V","~$f"]]],"^3V",["^1E",[["~$f"],["^4V","~$f"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/add-post-event-callback","^6","re_frame/core.cljc","^:",30,"^3[",["^ ","^40",false,"^41",2,"^42",2,"^43",["^1E",[["~$f"],["^4V","~$f"]]],"^3V",["^1E",[["~$f"],["^4V","~$f"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[["~$f"],["^4V","~$f"]]],"^46",null,"^41",2,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",1,"^40",false,"^48","^49"],["^ ","^41",2,"^40",false,"^48","^49"]],"^7",741,"^9",741,"^42",2,"^4;",true,"^3V",["^1E",[["~$f"],["^4V","~$f"]]],"^3Z","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",310,"^8",7,"^9",310,"^:",15,"^3V",["^1E",["^3W",["^1E",[["^4V","^59"]]]]],"^3Z","Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a function which takes either one or two arguements, the first of which is\n  always `coeffects` and which returns an updated `coeffects`.\n\n  See the docs for `inject-cofx` for example use."],"^E","~$re-frame.core/reg-cofx","^6","re_frame/core.cljc","^:",15,"^43",["^1E",[["^4V","^59"]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",310,"^4:","^49","^9",310,"^42",2,"^4;",true,"^3V",["^1E",["^3W",["^1E",[["^4V","^59"]]]]],"^3Z","Register the given coeffect `handler` for the given `id`, for later use\n  within `inject-cofx`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a function which takes either one or two arguements, the first of which is\n  always `coeffects` and which returns an updated `coeffects`.\n\n  See the docs for `inject-cofx` for example use."],"~$reg-event-fx",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",406,"^8",7,"^9",406,"^:",19,"^3V",["^1E",["^3W",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]]]],"^3Z","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^44",["^1E",[null,null]]]],"^E","~$re-frame.core/reg-event-fx","^6","re_frame/core.cljc","^:",19,"^3[",["^ ","^40",false,"^41",3,"^42",3,"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^44",["^1E",[null,null]]],"^43",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^46",null,"^41",3,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^47",[["^ ","^41",2,"^40",false,"^48","^49"],["^ ","^41",3,"^40",false,"^48","^49"]],"^7",406,"^9",406,"^42",3,"^4;",true,"^3V",["^1E",[["^4V","^59"],["^4V","^5:","^59"]]],"^3Z","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^:",23,"^3[",["^ ","^40",true,"^41",0,"^42",0,"^43",[["^1E",["^3Y"]]],"^3V",["^1E",[["~$&","^3Y"]]],"^44",["^1E",[null]]],"^8",7,"^7",771,"^4Q","0.8.0","^9",771,"^3V",["^1E",["^3W",["^1E",[["~$&","^3Y"]]]]],"^3Z","Deprecated. Use `reg-event-db` instead."],"^E","~$re-frame.core/register-handler","^6","re_frame/core.cljc","^:",23,"^3[",["^ ","^40",true,"^41",0,"^42",0,"^43",[["^1E",["^3Y"]]],"^3V",["^1E",[["~$&","^3Y"]]],"^44",["^1E",[null]]],"^43",[["^1E",["^3Y"]]],"^46",null,"^41",0,"^44",["^1E",[null]],"^8",1,"^40",true,"^47",[["^ ","^41",0,"^40",true,"^48","^49"]],"^7",771,"^4Q","0.8.0","^4:","^49","^9",771,"^42",0,"^4;",true,"^3V",["^1E",[["~$&","^3Y"]]],"^3Z","Deprecated. Use `reg-event-db` instead."],"~$clear-subscription-cache!",["^ ","^3U",null,"^5",["^ ","^6","re_frame/core.cljc","^7",251,"^8",7,"^9",251,"^:",32,"^3V",["^1E",["^3W",["^1E",[[]]]]],"^3Z","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^E","~$re-frame.core/clear-subscription-cache!","^6","re_frame/core.cljc","^:",32,"^43",["^1E",[[]]],"^46",null,"^44",["^1E",[null,null]],"^8",1,"^40",false,"^7",251,"^4:",["^D",["^49","^5?"]],"^9",251,"^42",0,"^4;",true,"^3V",["^1E",["^3W",["^1E",[[]]]]],"^3Z","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."]],"^1C",["^ ","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^1=",["^D",["~:warn","~:after","~:id","~:before"]],"~:order",["^6F","^6G","^6E","^6D"]],"^1I",["^ ","^1>",["^D",[]]],"^1J",["^ "],"^1K",["^10","^Z","^U","^M","^K","^14","^T","^Q","^12","^X","^W","^Y","^R","^19","^16","^O"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1Y",[["^6K","~:static-fns"],true,["^6K","~:elide-asserts"],false,["^6K","~:optimize-constants"],null,["^6K","^1P"],null,["^6K","~:external-config"],null,["^6K","~:tooling-config"],null,["^6K","~:emit-constants"],null,["^6K","~:load-tests"],null,["^6K","~:infer-externs"],true,["^6K","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6K","~:fn-invoke-direct"],null,["^6K","~:source-map"],"/dev/null"]]]