["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/xregexp/lib/xregexp.js"],"~:js","shadow$provide.module$node_modules$xregexp$lib$xregexp=function(global$jscomp$0,require,module,exports){function hasNativeFlag(flag){var isSupported=!0;try{RegExp(\"\",flag)}catch(exception){isSupported=!1}return isSupported}function augment(regex,captureNames,xSource,xFlags,isInternalOnly){regex.xregexp={captureNames:captureNames};if(isInternalOnly)return regex;if(regex.__proto__)regex.__proto__=XRegExp.prototype;else for(var p in XRegExp.prototype)regex[p]=XRegExp.prototype[p];regex.xregexp.source=\nxSource;regex.xregexp.flags=xFlags?xFlags.split(\"\").sort().join(\"\"):xFlags;return regex}function clipDuplicates(str){return nativ.replace.call(str,/([\\s\\S])(?=[\\s\\S]*\\1)/g,\"\")}function copyRegex(regex,options){if(!XRegExp.isRegExp(regex))throw new TypeError(\"Type RegExp expected\");var xData=regex.xregexp||{},flags=hasFlagsProp?regex.flags:nativ.exec.call(/\\/([a-z]*)$/i,RegExp.prototype.toString.call(regex))[1],flagsToAdd=\"\",flagsToRemove=\"\",xregexpSource=null,xregexpFlags=null;options=options||{};\noptions.removeG&&(flagsToRemove+=\"g\");options.removeY&&(flagsToRemove+=\"y\");flagsToRemove&&(flags=nativ.replace.call(flags,new RegExp(\"[\".concat(flagsToRemove,\"]+\"),\"g\"),\"\"));options.addG&&(flagsToAdd+=\"g\");options.addY&&(flagsToAdd+=\"y\");flagsToAdd&&(flags=clipDuplicates(flags+flagsToAdd));options.isInternalOnly||(void 0!==xData.source&&(xregexpSource=xData.source),null!=xData.flags&&(xregexpFlags=flagsToAdd?clipDuplicates(xData.flags+flagsToAdd):xData.flags));return regex=augment(new RegExp(options.source||\nregex.source,flags),regex.xregexp&&regex.xregexp.captureNames?xData.captureNames.slice(0):null,xregexpSource,xregexpFlags,options.isInternalOnly)}function dec(hex){return(0,_parseInt2.default)(hex,16)}function getContextualTokenSeparator(match,scope,flags){(scope=\"(\"===match.input[match.index-1]||\")\"===match.input[match.index+match[0].length]||\"|\"===match.input[match.index-1]||\"|\"===match.input[match.index+match[0].length]||1>match.index||match.index+match[0].length>=match.input.length||nativ.test.call(/^\\(\\?[:=!]/,\nmatch.input.substr(match.index-3,3)))||(scope=match.input,match=match.index+match[0].length,scope=nativ.test.call(-1!==flags.indexOf(\"x\")?/^(?:\\s|#[^#\\n]*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/:/^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/,scope.slice(match)));return scope?\"\":\"(?:)\"}function hex$jscomp$0(dec){return(0,_parseInt2.default)(dec,10).toString(16)}function isType(value,type){return toString.call(value)===\"[object \".concat(type,\"]\")}function pad4(str){for(;4>str.length;)str=\"0\".concat(str);\nreturn str}function prepareFlags(pattern,flags){if(clipDuplicates(flags)!==flags)throw new SyntaxError(\"Invalid duplicate regex flag \".concat(flags));pattern=nativ.replace.call(pattern,/^\\(\\?([\\w$]+)\\)/,function($0,$1){if(nativ.test.call(/[gy]/,$1))throw new SyntaxError(\"Cannot use flag g or y in mode modifier \".concat($0));flags=clipDuplicates(flags+$1);return\"\"});var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=(0,_getIterator2.default)(flags),_step;!(_iteratorNormalCompletion=\n(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var flag=_step.value;if(!registeredFlags[flag])throw new SyntaxError(\"Unknown regex flag \".concat(flag));}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError;}}return{pattern:pattern,flags:flags}}function prepareOptions(value){var options={};return isType(value,\"String\")?(XRegExp.forEach(value,/[^\\s,]+/,function(match){options[match]=\n!0}),options):value}function registerFlag(flag){if(!/^[\\w$]$/.test(flag))throw Error(\"Flag must be a single character A-Za-z0-9_$\");registeredFlags[flag]=!0}function toObject(value){if(null==value)throw new TypeError(\"Cannot convert null or undefined to object\");return value}function XRegExp(pattern$jscomp$0,flags$jscomp$0){if(XRegExp.isRegExp(pattern$jscomp$0)){if(void 0!==flags$jscomp$0)throw new TypeError(\"Cannot supply flags when copying a RegExp\");return copyRegex(pattern$jscomp$0)}pattern$jscomp$0=\nvoid 0===pattern$jscomp$0?\"\":String(pattern$jscomp$0);flags$jscomp$0=void 0===flags$jscomp$0?\"\":String(flags$jscomp$0);XRegExp.isInstalled(\"astral\")&&-1===flags$jscomp$0.indexOf(\"A\")&&(flags$jscomp$0+=\"A\");patternCache[pattern$jscomp$0]||(patternCache[pattern$jscomp$0]={});if(!patternCache[pattern$jscomp$0][flags$jscomp$0]){var context={hasNamedCapture:!1,captureNames:[]},scope=\"default\",output=\"\",pos=0,applied=prepareFlags(pattern$jscomp$0,flags$jscomp$0),appliedPattern=applied.pattern;for(applied=\napplied.flags;pos<appliedPattern.length;){do{for(var match,pattern=appliedPattern,flags=applied,pos$jscomp$0=pos,scope$jscomp$0=scope,context$jscomp$0=context,i=tokens.length,leadChar=pattern[pos$jscomp$0],result=null;i--;){var result$jscomp$0=tokens[i];if(!(result$jscomp$0.leadChar&&result$jscomp$0.leadChar!==leadChar||result$jscomp$0.scope!==scope$jscomp$0&&\"all\"!==result$jscomp$0.scope||result$jscomp$0.flag&&-1===flags.indexOf(result$jscomp$0.flag))&&(match=XRegExp.exec(pattern,result$jscomp$0.regex,\npos$jscomp$0,\"sticky\"))){result={matchLength:match[0].length,output:result$jscomp$0.handler.call(context$jscomp$0,match,scope$jscomp$0,flags),reparse:result$jscomp$0.reparse};break}}(result$jscomp$0=result)&&result$jscomp$0.reparse&&(appliedPattern=appliedPattern.slice(0,pos)+result$jscomp$0.output+appliedPattern.slice(pos+result$jscomp$0.matchLength))}while(result$jscomp$0&&result$jscomp$0.reparse);result$jscomp$0?(output+=result$jscomp$0.output,pos+=result$jscomp$0.matchLength||1):(result$jscomp$0=\nXRegExp.exec(appliedPattern,nativeTokens[scope],pos,\"sticky\"),result$jscomp$0=(0,_slicedToArray2.default)(result$jscomp$0,1)[0],output+=result$jscomp$0,pos+=result$jscomp$0.length,\"[\"===result$jscomp$0&&\"default\"===scope?scope=\"class\":\"]\"===result$jscomp$0&&\"class\"===scope&&(scope=\"default\"))}patternCache[pattern$jscomp$0][flags$jscomp$0]={pattern:nativ.replace.call(output,/(?:\\(\\?:\\))+/g,\"(?:)\"),flags:nativ.replace.call(applied,/[^gimuy]+/g,\"\"),captures:context.hasNamedCapture?context.captureNames:\nnull}}context=patternCache[pattern$jscomp$0][flags$jscomp$0];return augment(new RegExp(context.pattern,context.flags),context.captures,pattern$jscomp$0,flags$jscomp$0)}global$jscomp$0=require(\"module$node_modules$$babel$runtime_corejs2$helpers$interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=void 0;var _create=global$jscomp$0(require(\"module$node_modules$$babel$runtime_corejs2$core_js$object$create\")),_slicedToArray2=global$jscomp$0(require(\"module$node_modules$$babel$runtime_corejs2$helpers$slicedToArray\")),\n_getIterator2=global$jscomp$0(require(\"module$node_modules$$babel$runtime_corejs2$core_js$get_iterator\")),_parseInt2=global$jscomp$0(require(\"module$node_modules$$babel$runtime_corejs2$core_js$parse_int\")),features={astral:!1,namespacing:!1},nativ={exec:RegExp.prototype.exec,test:RegExp.prototype.test,match:String.prototype.match,replace:String.prototype.replace,split:String.prototype.split},fixed={},regexCache={},patternCache={},tokens=[],nativeTokens={\"default\":/\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n\"class\":/\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/},replacementToken=/\\$(?:{([\\w$]+)}|<([\\w$]+)>|(\\d\\d?|[\\s\\S]))/g,correctExecNpcg=void 0===nativ.exec.call(/()??/,\"\")[1],hasFlagsProp=void 0!==/x/.flags,toString={}.toString,hasNativeU=hasNativeFlag(\"u\"),hasNativeY=hasNativeFlag(\"y\"),registeredFlags={g:!0,i:!0,m:!0,u:hasNativeU,y:hasNativeY};XRegExp.prototype=/(?:)/;XRegExp.version=\"4.2.4\";XRegExp._clipDuplicates=clipDuplicates;XRegExp._hasNativeFlag=\nhasNativeFlag;XRegExp._dec=dec;XRegExp._hex=hex$jscomp$0;XRegExp._pad4=pad4;XRegExp.addToken=function(regex,handler,options){options=options||{};var optionalFlags=options.optionalFlags;options.flag&&registerFlag(options.flag);if(optionalFlags){optionalFlags=nativ.split.call(optionalFlags,\"\");var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _iterator2=(0,_getIterator2.default)(optionalFlags),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=\n!0)registerFlag(_step2.value)}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{_iteratorNormalCompletion2||null==_iterator2.return||_iterator2.return()}finally{if(_didIteratorError2)throw _iteratorError2;}}}tokens.push({regex:copyRegex(regex,{addG:!0,addY:hasNativeY,isInternalOnly:!0}),handler:handler,scope:options.scope||\"default\",flag:options.flag,reparse:options.reparse,leadChar:options.leadChar});XRegExp.cache.flush(\"patterns\")};XRegExp.cache=function(pattern,flags){regexCache[pattern]||\n(regexCache[pattern]={});return regexCache[pattern][flags]||(regexCache[pattern][flags]=XRegExp(pattern,flags))};XRegExp.cache.flush=function(cacheName){\"patterns\"===cacheName?patternCache={}:regexCache={}};XRegExp.escape=function(str){return nativ.replace.call(toObject(str),/[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g,\"\\\\$\\x26\")};XRegExp.exec=function(str,regex,pos,sticky){var cacheKey=\"g\",addY,fakeY=!1;(addY=hasNativeY&&!!(sticky||regex.sticky&&!1!==sticky))?cacheKey+=\"y\":sticky&&(fakeY=!0,cacheKey+=\"FakeY\");regex.xregexp=\nregex.xregexp||{};sticky=regex.xregexp[cacheKey]||(regex.xregexp[cacheKey]=copyRegex(regex,{addG:!0,addY:addY,source:fakeY?\"\".concat(regex.source,\"|()\"):void 0,removeY:!1===sticky,isInternalOnly:!0}));sticky.lastIndex=pos||0;str=fixed.exec.call(sticky,str);fakeY&&str&&\"\"===str.pop()&&(str=null);regex.global&&(regex.lastIndex=str?sticky.lastIndex:0);return str};XRegExp.forEach=function(str,regex,callback){for(var pos=0,i=-1;pos=XRegExp.exec(str,regex,pos);)callback(pos,++i,str,regex),pos=pos.index+\n(pos[0].length||1)};XRegExp.globalize=function(regex){return copyRegex(regex,{addG:!0})};XRegExp.install=function(options){options=prepareOptions(options);!features.astral&&options.astral&&(features.astral=!0);!features.namespacing&&options.namespacing&&(features.namespacing=!0)};XRegExp.isInstalled=function(feature){return!!features[feature]};XRegExp.isRegExp=function(value){return\"[object RegExp]\"===toString.call(value)};XRegExp.match=function(str,regex,scope){var global=regex.global&&\"one\"!==scope||\n\"all\"===scope,cacheKey=(global?\"g\":\"\")+(regex.sticky?\"y\":\"\")||\"noGY\";regex.xregexp=regex.xregexp||{};cacheKey=regex.xregexp[cacheKey]||(regex.xregexp[cacheKey]=copyRegex(regex,{addG:!!global,removeG:\"one\"===scope,isInternalOnly:!0}));str=nativ.match.call(toObject(str),cacheKey);regex.global&&(regex.lastIndex=\"one\"===scope&&str?str.index+str[0].length:0);return global?str||[]:str&&str[0]};XRegExp.matchChain=function(str,chain){return function recurseChain(values,level){function addMatch(match){if(item.backref){var ERR_UNDEFINED_GROUP=\n\"Backreference to undefined group: \".concat(item.backref),isNamedBackref=isNaN(item.backref);if(isNamedBackref&&XRegExp.isInstalled(\"namespacing\")){if(!(item.backref in match.groups))throw new ReferenceError(ERR_UNDEFINED_GROUP);}else if(!match.hasOwnProperty(item.backref))throw new ReferenceError(ERR_UNDEFINED_GROUP);match=isNamedBackref&&XRegExp.isInstalled(\"namespacing\")?match.groups[item.backref]:match[item.backref];matches.push(match||\"\")}else matches.push(match[0])}var item=chain[level].regex?\nchain[level]:{regex:chain[level]},matches=[],_iteratorNormalCompletion3=!0,_didIteratorError3=!1,_iteratorError3=void 0;try{for(var _iterator3=(0,_getIterator2.default)(values),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=!0)XRegExp.forEach(_step3.value,item.regex,addMatch)}catch(err){_didIteratorError3=!0,_iteratorError3=err}finally{try{_iteratorNormalCompletion3||null==_iterator3.return||_iterator3.return()}finally{if(_didIteratorError3)throw _iteratorError3;\n}}return level!==chain.length-1&&matches.length?recurseChain(matches,level+1):matches}([str],0)};XRegExp.replace=function(str,search,replacement,scope){var isRegex=XRegExp.isRegExp(search),global=search.global&&\"one\"!==scope||\"all\"===scope,cacheKey=(global?\"g\":\"\")+(search.sticky?\"y\":\"\")||\"noGY\",s2=search;isRegex?(search.xregexp=search.xregexp||{},s2=search.xregexp[cacheKey]||(search.xregexp[cacheKey]=copyRegex(search,{addG:!!global,removeG:\"one\"===scope,isInternalOnly:!0}))):global&&(s2=new RegExp(XRegExp.escape(String(search)),\n\"g\"));str=fixed.replace.call(toObject(str),s2,replacement);isRegex&&search.global&&(search.lastIndex=0);return str};XRegExp.replaceEach=function(str,replacements){var _iteratorNormalCompletion4=!0,_didIteratorError4=!1,_iteratorError4=void 0;try{for(var _iterator4=(0,_getIterator2.default)(replacements),_step4;!(_iteratorNormalCompletion4=(_step4=_iterator4.next()).done);_iteratorNormalCompletion4=!0){var r=_step4.value;str=XRegExp.replace(str,r[0],r[1],r[2])}}catch(err){_didIteratorError4=!0,_iteratorError4=\nerr}finally{try{_iteratorNormalCompletion4||null==_iterator4.return||_iterator4.return()}finally{if(_didIteratorError4)throw _iteratorError4;}}return str};XRegExp.split=function(str,separator,limit){return fixed.split.call(toObject(str),separator,limit)};XRegExp.test=function(str,regex,pos,sticky){return!!XRegExp.exec(str,regex,pos,sticky)};XRegExp.uninstall=function(options){options=prepareOptions(options);features.astral&&options.astral&&(features.astral=!1);features.namespacing&&options.namespacing&&\n(features.namespacing=!1)};XRegExp.union=function(patterns,flags,options){function rewrite(match,paren,backref){var name=captureNames[numCaptures-numPriorCaptures];if(paren){if(++numCaptures,name)return\"(?\\x3c\".concat(name,\"\\x3e\")}else if(backref)return\"\\\\\".concat(+backref+numPriorCaptures);return match}options=options||{};options=options.conjunction||\"or\";var numCaptures=0;if(!isType(patterns,\"Array\")||!patterns.length)throw new TypeError(\"Must provide a nonempty array of patterns to merge\");var parts=\n/(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g,output=[],_iteratorNormalCompletion5=!0,_didIteratorError5=!1,_iteratorError5=void 0;try{for(var _iterator5=(0,_getIterator2.default)(patterns),_step5;!(_iteratorNormalCompletion5=(_step5=_iterator5.next()).done);_iteratorNormalCompletion5=!0){var pattern=_step5.value;if(XRegExp.isRegExp(pattern)){var numPriorCaptures=numCaptures;var captureNames=pattern.xregexp&&pattern.xregexp.captureNames||[];output.push(nativ.replace.call(XRegExp(pattern.source).source,\nparts,rewrite))}else output.push(XRegExp.escape(pattern))}}catch(err){_didIteratorError5=!0,_iteratorError5=err}finally{try{_iteratorNormalCompletion5||null==_iterator5.return||_iterator5.return()}finally{if(_didIteratorError5)throw _iteratorError5;}}return XRegExp(output.join(\"none\"===options?\"\":\"|\"),flags)};fixed.exec=function(str){var origLastIndex=this.lastIndex,match=nativ.exec.apply(this,arguments);if(match){if(!correctExecNpcg&&1<match.length&&-1!==match.indexOf(\"\")){var r2=copyRegex(this,\n{removeG:!0,isInternalOnly:!0});nativ.replace.call(String(str).slice(match.index),r2,function(){for(var len=arguments.length,i=1;i<len-2;++i)void 0===(0>i||arguments.length<=i?void 0:arguments[i])&&(match[i]=void 0)})}r2=match;XRegExp.isInstalled(\"namespacing\")&&(match.groups=(0,_create.default)(null),r2=match.groups);if(this.xregexp&&this.xregexp.captureNames)for(var i$jscomp$0=1;i$jscomp$0<match.length;++i$jscomp$0){var name=this.xregexp.captureNames[i$jscomp$0-1];name&&(r2[name]=match[i$jscomp$0])}this.global&&\n!match[0].length&&this.lastIndex>match.index&&(this.lastIndex=match.index)}this.global||(this.lastIndex=origLastIndex);return match};fixed.test=function(str){return!!fixed.exec.call(this,str)};fixed.match=function(regex){if(!XRegExp.isRegExp(regex))regex=new RegExp(regex);else if(regex.global){var result=nativ.match.apply(this,arguments);regex.lastIndex=0;return result}return fixed.exec.call(regex,toObject(this))};fixed.replace=function(search,replacement){var isRegex=XRegExp.isRegExp(search);if(isRegex){if(search.xregexp)var captureNames=\nsearch.xregexp.captureNames;var origLastIndex=search.lastIndex}else search+=\"\";var result=isType(replacement,\"Function\")?nativ.replace.call(String(this),search,function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];if(captureNames)for(XRegExp.isInstalled(\"namespacing\")?(_len=(0,_create.default)(null),args.push(_len)):(args[0]=new String(args[0]),_len=args[0]),_key=0;_key<captureNames.length;++_key)captureNames[_key]&&(_len[captureNames[_key]]=\nargs[_key+1]);isRegex&&search.global&&(search.lastIndex=args[args.length-2]+args[0].length);return replacement.apply(void 0,args)}):nativ.replace.call(null==this?this:String(this),search,function(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++)args[_key2]=arguments[_key2];return nativ.replace.call(String(replacement),replacementToken,function($0,bracketed,angled,dollarToken){if(bracketed=bracketed||angled){angled=+bracketed;if(angled<=args.length-3)return args[angled]||\n\"\";angled=captureNames?captureNames.indexOf(bracketed):-1;if(0>angled)throw new SyntaxError(\"Backreference to undefined group \".concat($0));return args[angled+1]||\"\"}if(\"$\"===dollarToken)return\"$\";if(\"\\x26\"===dollarToken||0===+dollarToken)return args[0];if(\"`\"===dollarToken)return args[args.length-1].slice(0,args[args.length-2]);if(\"'\"===dollarToken)return args[args.length-1].slice(args[args.length-2]+args[0].length);dollarToken=+dollarToken;if(!isNaN(dollarToken)){if(dollarToken>args.length-3)throw new SyntaxError(\"Backreference to undefined group \".concat($0));\nreturn args[dollarToken]||\"\"}throw new SyntaxError(\"Invalid token \".concat($0));})});isRegex&&(search.lastIndex=search.global?0:origLastIndex);return result};fixed.split=function(separator,limit){if(!XRegExp.isRegExp(separator))return nativ.split.apply(this,arguments);var str=String(this),output=[],origLastIndex=separator.lastIndex,lastLastIndex=0,lastLength;limit=(void 0===limit?-1:limit)>>>0;XRegExp.forEach(str,separator,function(match){match.index+match[0].length>lastLastIndex&&(output.push(str.slice(lastLastIndex,\nmatch.index)),1<match.length&&match.index<str.length&&Array.prototype.push.apply(output,match.slice(1)),lastLength=match[0].length,lastLastIndex=match.index+lastLength)});lastLastIndex===str.length?(!nativ.test.call(separator,\"\")||lastLength)&&output.push(\"\"):output.push(str.slice(lastLastIndex));separator.lastIndex=origLastIndex;return output.length>limit?output.slice(0,limit):output};XRegExp.addToken(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/,\nfunction(match,scope){if(\"B\"===match[1]&&\"default\"===scope)return match[0];throw new SyntaxError(\"Invalid escape \".concat(match[0]));},{scope:\"all\",leadChar:\"\\\\\"});XRegExp.addToken(/\\\\u{([\\dA-Fa-f]+)}/,function(match,scope,flags){scope=dec(match[1]);if(1114111<scope)throw new SyntaxError(\"Invalid Unicode code point \".concat(match[0]));if(65535>=scope)return\"\\\\u\".concat(pad4(hex$jscomp$0(scope)));if(hasNativeU&&-1!==flags.indexOf(\"u\"))return match[0];throw new SyntaxError(\"Cannot use Unicode code point above \\\\u{FFFF} without flag u\");\n},{scope:\"all\",leadChar:\"\\\\\"});XRegExp.addToken(/\\[(\\^?)\\]/,function(match){return match[1]?\"[\\\\s\\\\S]\":\"\\\\b\\\\B\"},{leadChar:\"[\"});XRegExp.addToken(/\\(\\?#[^)]*\\)/,getContextualTokenSeparator,{leadChar:\"(\"});XRegExp.addToken(/\\s+|#[^\\n]*\\n?/,getContextualTokenSeparator,{flag:\"x\"});XRegExp.addToken(/\\./,function(){return\"[\\\\s\\\\S]\"},{flag:\"s\",leadChar:\".\"});XRegExp.addToken(/\\\\k<([\\w$]+)>/,function(match){var index=isNaN(match[1])?this.captureNames.indexOf(match[1])+1:+match[1],endIndex=match.index+match[0].length;\nif(!index||index>this.captureNames.length)throw new SyntaxError(\"Backreference to undefined group \".concat(match[0]));return\"\\\\\".concat(index).concat(endIndex===match.input.length||isNaN(match.input[endIndex])?\"\":\"(?:)\")},{leadChar:\"\\\\\"});XRegExp.addToken(/\\\\(\\d+)/,function(match,scope){if(!(\"default\"===scope&&/^[1-9]/.test(match[1])&&+match[1]<=this.captureNames.length)&&\"0\"!==match[1])throw new SyntaxError(\"Cannot use octal escape or backreference to undefined group \".concat(match[0]));return match[0]},\n{scope:\"all\",leadChar:\"\\\\\"});XRegExp.addToken(/\\(\\?P?<([\\w$]+)>/,function(match){if(!isNaN(match[1]))throw new SyntaxError(\"Cannot use integer as capture name \".concat(match[0]));if(!XRegExp.isInstalled(\"namespacing\")&&(\"length\"===match[1]||\"__proto__\"===match[1]))throw new SyntaxError(\"Cannot use reserved word as capture name \".concat(match[0]));if(-1!==this.captureNames.indexOf(match[1]))throw new SyntaxError(\"Cannot use same name for multiple groups \".concat(match[0]));this.captureNames.push(match[1]);\nthis.hasNamedCapture=!0;return\"(\"},{leadChar:\"(\"});XRegExp.addToken(/\\((?!\\?)/,function(match,scope,flags){if(-1!==flags.indexOf(\"n\"))return\"(?:\";this.captureNames.push(null);return\"(\"},{optionalFlags:\"n\",leadChar:\"(\"});exports.default=XRegExp;module.exports=exports[\"default\"]}","~:source","shadow$provide[\"module$node_modules$xregexp$lib$xregexp\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/create\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/slicedToArray\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/get-iterator\"));\n\nvar _parseInt2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/parse-int\"));\n\n/*!\n * XRegExp 4.2.4\n * <xregexp.com>\n * Steven Levithan (c) 2007-present MIT License\n */\n\n/**\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\n * make your client-side grepping simpler and more powerful, while freeing you from related\n * cross-browser inconsistencies.\n */\n// ==--------------------------==\n// Private stuff\n// ==--------------------------==\n// Property name used for extended regex instance data\nvar REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled\n\nvar features = {\n  astral: false,\n  namespacing: false\n}; // Native methods to use and restore ('native' is an ES3 reserved keyword)\n\nvar nativ = {\n  exec: RegExp.prototype.exec,\n  test: RegExp.prototype.test,\n  match: String.prototype.match,\n  replace: String.prototype.replace,\n  split: String.prototype.split\n}; // Storage for fixed/extended native methods\n\nvar fixed = {}; // Storage for regexes cached by `XRegExp.cache`\n\nvar regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor\n\nvar patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\n\nvar tokens = []; // Token scopes\n\nvar defaultScope = 'default';\nvar classScope = 'class'; // Regexes that match native regex syntax, including octals\n\nvar nativeTokens = {\n  // Any native multicharacter token in default scope, or any single character\n  'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n  // Any native multicharacter token in character class scope, or any single character\n  'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\n}; // Any backreference or dollar-prefixed character in replacement strings\n\nvar replacementToken = /\\$(?:{([\\w$]+)}|<([\\w$]+)>|(\\d\\d?|[\\s\\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups\n\nvar correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined; // Check for ES6 `flags` prop support\n\nvar hasFlagsProp = /x/.flags !== undefined; // Shortcut to `Object.prototype.toString`\n\nvar _ref = {},\n    toString = _ref.toString;\n\nfunction hasNativeFlag(flag) {\n  // Can't check based on the presence of properties/getters since browsers might support such\n  // properties even when they don't support the corresponding flag in regex construction (tested\n  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\n  // throws an error)\n  var isSupported = true;\n\n  try {\n    // Can't use regex literals for testing even in a `try` because regex literals with\n    // unsupported flags cause a compilation error in IE\n    new RegExp('', flag);\n  } catch (exception) {\n    isSupported = false;\n  }\n\n  return isSupported;\n} // Check for ES6 `u` flag support\n\n\nvar hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support\n\nvar hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags\n\nvar registeredFlags = {\n  g: true,\n  i: true,\n  m: true,\n  u: hasNativeU,\n  y: hasNativeY\n};\n/**\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to augment.\n * @param {Array} captureNames Array with capture names, or `null`.\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *   skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {RegExp} Augmented regex.\n */\n\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\n  regex[REGEX_DATA] = {\n    captureNames: captureNames\n  };\n\n  if (isInternalOnly) {\n    return regex;\n  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n\n\n  if (regex.__proto__) {\n    regex.__proto__ = XRegExp.prototype;\n  } else {\n    for (var p in XRegExp.prototype) {\n      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\n      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\n      // extensions exist on `regex.prototype` anyway\n      regex[p] = XRegExp.prototype[p];\n    }\n  }\n\n  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\n\n  regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;\n  return regex;\n}\n/**\n * Removes any duplicate characters from the provided string.\n *\n * @private\n * @param {String} str String to remove duplicate characters from.\n * @returns {String} String with any duplicate characters removed.\n */\n\n\nfunction clipDuplicates(str) {\n  return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\n}\n/**\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\n * flags g and y while copying the regex.\n *\n * @private\n * @param {RegExp} regex Regex to copy.\n * @param {Object} [options] Options object with optional properties:\n *   - `addG` {Boolean} Add flag g while copying the regex.\n *   - `addY` {Boolean} Add flag y while copying the regex.\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *     skipping some operations like attaching `XRegExp.prototype` properties.\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\n */\n\n\nfunction copyRegex(regex, options) {\n  if (!XRegExp.isRegExp(regex)) {\n    throw new TypeError('Type RegExp expected');\n  }\n\n  var xData = regex[REGEX_DATA] || {};\n  var flags = getNativeFlags(regex);\n  var flagsToAdd = '';\n  var flagsToRemove = '';\n  var xregexpSource = null;\n  var xregexpFlags = null;\n  options = options || {};\n\n  if (options.removeG) {\n    flagsToRemove += 'g';\n  }\n\n  if (options.removeY) {\n    flagsToRemove += 'y';\n  }\n\n  if (flagsToRemove) {\n    flags = nativ.replace.call(flags, new RegExp(\"[\".concat(flagsToRemove, \"]+\"), 'g'), '');\n  }\n\n  if (options.addG) {\n    flagsToAdd += 'g';\n  }\n\n  if (options.addY) {\n    flagsToAdd += 'y';\n  }\n\n  if (flagsToAdd) {\n    flags = clipDuplicates(flags + flagsToAdd);\n  }\n\n  if (!options.isInternalOnly) {\n    if (xData.source !== undefined) {\n      xregexpSource = xData.source;\n    } // null or undefined; don't want to add to `flags` if the previous value was null, since\n    // that indicates we're not tracking original precompilation flags\n\n\n    if (xData.flags != null) {\n      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\n      // removed for non-internal regexes, so don't need to handle it\n      xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;\n    }\n  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\n  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\n  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\n  // translation to native regex syntax\n\n\n  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);\n  return regex;\n}\n/**\n * Converts hexadecimal to decimal.\n *\n * @private\n * @param {String} hex\n * @returns {Number}\n */\n\n\nfunction dec(hex) {\n  return (0, _parseInt2.default)(hex, 16);\n}\n/**\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\n * inline comment or whitespace with flag x. This is used directly as a token handler function\n * passed to `XRegExp.addToken`.\n *\n * @private\n * @param {String} match Match arg of `XRegExp.addToken` handler\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\n * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.\n */\n\n\nfunction getContextualTokenSeparator(match, scope, flags) {\n  if ( // No need to separate tokens if at the beginning or end of a group\n  match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' || // No need to separate tokens if before or after a `|`\n  match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' || // No need to separate tokens if at the beginning or end of the pattern\n  match.index < 1 || match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.\n  // The way this is written relies on:\n  // - The search regex matching only 3-char strings.\n  // - Although `substr` gives chars from the end of the string if given a negative index,\n  //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`\n  nativ.test.call(/^\\(\\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier\n  isQuantifierNext(match.input, match.index + match[0].length, flags)) {\n    return '';\n  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.\n  // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax\n  // error `(? :` into `(?:`.\n\n\n  return '(?:)';\n}\n/**\n * Returns native `RegExp` flags used by a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {String} Native flags in use.\n */\n\n\nfunction getNativeFlags(regex) {\n  return hasFlagsProp ? regex.flags : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\n  // with an empty string) allows this to continue working predictably when\n  // `XRegExp.proptotype.toString` is overridden\n  nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\n}\n/**\n * Determines whether a regex has extended instance data used to track capture names.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {Boolean} Whether the regex uses named capture.\n */\n\n\nfunction hasNamedCapture(regex) {\n  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\n}\n/**\n * Converts decimal to hexadecimal.\n *\n * @private\n * @param {Number|String} dec\n * @returns {String}\n */\n\n\nfunction hex(dec) {\n  return (0, _parseInt2.default)(dec, 10).toString(16);\n}\n/**\n * Checks whether the next nonignorable token after the specified position is a quantifier.\n *\n * @private\n * @param {String} pattern Pattern to search within.\n * @param {Number} pos Index in `pattern` to search at.\n * @param {String} flags Flags used by the pattern.\n * @returns {Boolean} Whether the next nonignorable token is a quantifier.\n */\n\n\nfunction isQuantifierNext(pattern, pos, flags) {\n  var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';\n  var lineCommentPattern = '#[^#\\\\n]*';\n  var quantifierPattern = '[?*+]|{\\\\d+(?:,\\\\d*)?}';\n  return nativ.test.call(flags.indexOf('x') !== -1 ? // Ignore any leading whitespace, line comments, and inline comments\n  /^(?:\\s|#[^#\\n]*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/ : // Ignore any leading inline comments\n  /^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/, pattern.slice(pos));\n}\n/**\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\n *\n * @private\n * @param {*} value Object to check.\n * @param {String} type Type to check for, in TitleCase.\n * @returns {Boolean} Whether the object matches the type.\n */\n\n\nfunction isType(value, type) {\n  return toString.call(value) === \"[object \".concat(type, \"]\");\n}\n/**\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\n *\n * @private\n * @param {String} str\n * @returns {String}\n */\n\n\nfunction pad4(str) {\n  while (str.length < 4) {\n    str = \"0\".concat(str);\n  }\n\n  return str;\n}\n/**\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\n * the flag preparation logic from the `XRegExp` constructor.\n *\n * @private\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\n * @param {String} flags Any combination of flags.\n * @returns {Object} Object with properties `pattern` and `flags`.\n */\n\n\nfunction prepareFlags(pattern, flags) {\n  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\n  if (clipDuplicates(flags) !== flags) {\n    throw new SyntaxError(\"Invalid duplicate regex flag \".concat(flags));\n  } // Strip and apply a leading mode modifier with any combination of flags except g or y\n\n\n  pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\n    if (nativ.test.call(/[gy]/, $1)) {\n      throw new SyntaxError(\"Cannot use flag g or y in mode modifier \".concat($0));\n    } // Allow duplicate flags within the mode modifier\n\n\n    flags = clipDuplicates(flags + $1);\n    return '';\n  }); // Throw on unknown native or nonnative flags\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator2.default)(flags), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var flag = _step.value;\n\n      if (!registeredFlags[flag]) {\n        throw new SyntaxError(\"Unknown regex flag \".concat(flag));\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return {\n    pattern: pattern,\n    flags: flags\n  };\n}\n/**\n * Prepares an options object from the given value.\n *\n * @private\n * @param {String|Object} value Value to convert to an options object.\n * @returns {Object} Options object.\n */\n\n\nfunction prepareOptions(value) {\n  var options = {};\n\n  if (isType(value, 'String')) {\n    XRegExp.forEach(value, /[^\\s,]+/, function (match) {\n      options[match] = true;\n    });\n    return options;\n  }\n\n  return value;\n}\n/**\n * Registers a flag so it doesn't throw an 'unknown flag' error.\n *\n * @private\n * @param {String} flag Single-character flag to register.\n */\n\n\nfunction registerFlag(flag) {\n  if (!/^[\\w$]$/.test(flag)) {\n    throw new Error('Flag must be a single character A-Za-z0-9_$');\n  }\n\n  registeredFlags[flag] = true;\n}\n/**\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\n * position, until a match is found.\n *\n * @private\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\n * @param {String} flags Flags being used to construct the regex.\n * @param {Number} pos Position to search for tokens within `pattern`.\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\n * @param {Object} context Context object to use for token handler functions.\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\n */\n\n\nfunction runTokens(pattern, flags, pos, scope, context) {\n  var i = tokens.length;\n  var leadChar = pattern[pos];\n  var result = null;\n  var match;\n  var t; // Run in reverse insertion order\n\n  while (i--) {\n    t = tokens[i];\n\n    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(flags.indexOf(t.flag) !== -1)) {\n      continue;\n    }\n\n    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\n\n    if (match) {\n      result = {\n        matchLength: match[0].length,\n        output: t.handler.call(context, match, scope, flags),\n        reparse: t.reparse\n      }; // Finished with token tests\n\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\n * the Unicode Base addon is not available, since flag A is registered by that addon.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setAstral(on) {\n  features.astral = on;\n}\n/**\n * Adds named capture groups to the `groups` property of match arrays. See here for details:\n * https://github.com/tc39/proposal-regexp-named-groups\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setNamespacing(on) {\n  features.namespacing = on;\n}\n/**\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\n * the ES5 abstract operation `ToObject`.\n *\n * @private\n * @param {*} value Object to check and return.\n * @returns {*} The provided object.\n */\n\n\nfunction toObject(value) {\n  // null or undefined\n  if (value == null) {\n    throw new TypeError('Cannot convert null or undefined to object');\n  }\n\n  return value;\n} // ==--------------------------==\n// Constructor\n// ==--------------------------==\n\n/**\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\n * native regular expression in that additional syntax and flags are supported. The returned object\n * is in fact a native `RegExp` and works with all native methods.\n *\n * @class XRegExp\n * @constructor\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\n * @param {String} [flags] Any combination of flags.\n *   Native flags:\n *     - `g` - global\n *     - `i` - ignore case\n *     - `m` - multiline anchors\n *     - `u` - unicode (ES6)\n *     - `y` - sticky (Firefox 3+, ES6)\n *   Additional XRegExp flags:\n *     - `n` - explicit capture\n *     - `s` - dot matches all (aka singleline)\n *     - `x` - free-spacing and line comments (aka extended)\n *     - `A` - astral (requires the Unicode Base addon)\n *   Flags cannot be provided when constructing one `RegExp` from another.\n * @returns {RegExp} Extended regular expression object.\n * @example\n *\n * // With named capture and flag x\n * XRegExp(`(?<year>  [0-9]{4} ) -?  # year\n *          (?<month> [0-9]{2} ) -?  # month\n *          (?<day>   [0-9]{2} )     # day`, 'x');\n *\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\n * // have fresh `lastIndex` properties (set to zero).\n * XRegExp(/regex/);\n */\n\n\nfunction XRegExp(pattern, flags) {\n  if (XRegExp.isRegExp(pattern)) {\n    if (flags !== undefined) {\n      throw new TypeError('Cannot supply flags when copying a RegExp');\n    }\n\n    return copyRegex(pattern);\n  } // Copy the argument behavior of `RegExp`\n\n\n  pattern = pattern === undefined ? '' : String(pattern);\n  flags = flags === undefined ? '' : String(flags);\n\n  if (XRegExp.isInstalled('astral') && !(flags.indexOf('A') !== -1)) {\n    // This causes an error to be thrown if the Unicode Base addon is not available\n    flags += 'A';\n  }\n\n  if (!patternCache[pattern]) {\n    patternCache[pattern] = {};\n  }\n\n  if (!patternCache[pattern][flags]) {\n    var context = {\n      hasNamedCapture: false,\n      captureNames: []\n    };\n    var scope = defaultScope;\n    var output = '';\n    var pos = 0;\n    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier\n\n    var applied = prepareFlags(pattern, flags);\n    var appliedPattern = applied.pattern;\n    var appliedFlags = applied.flags; // Use XRegExp's tokens to translate the pattern to a native regex pattern.\n    // `appliedPattern.length` may change on each iteration if tokens use `reparse`\n\n    while (pos < appliedPattern.length) {\n      do {\n        // Check for custom tokens at the current position\n        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the\n        // pattern before running tokens again at the same position\n\n        if (result && result.reparse) {\n          appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);\n        }\n      } while (result && result.reparse);\n\n      if (result) {\n        output += result.output;\n        pos += result.matchLength || 1;\n      } else {\n        // Get the native token at the current position\n        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),\n            _XRegExp$exec2 = (0, _slicedToArray2.default)(_XRegExp$exec, 1),\n            token = _XRegExp$exec2[0];\n\n        output += token;\n        pos += token.length;\n\n        if (token === '[' && scope === defaultScope) {\n          scope = classScope;\n        } else if (token === ']' && scope === classScope) {\n          scope = defaultScope;\n        }\n      }\n    }\n\n    patternCache[pattern][flags] = {\n      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\n      // groups are sometimes inserted during regex transpilation in order to keep tokens\n      // separated. However, more than one empty group in a row is never needed.\n      pattern: nativ.replace.call(output, /(?:\\(\\?:\\))+/g, '(?:)'),\n      // Strip all but native flags\n      flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\n      // `context.captureNames` has an item for each capturing group, even if unnamed\n      captures: context.hasNamedCapture ? context.captureNames : null\n    };\n  }\n\n  var generated = patternCache[pattern][flags];\n  return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);\n} // Add `RegExp.prototype` to the prototype chain\n\n\nXRegExp.prototype = /(?:)/; // ==--------------------------==\n// Public properties\n// ==--------------------------==\n\n/**\n * The XRegExp version number as a string containing three dot-separated parts. For example,\n * '2.0.0-beta-3'.\n *\n * @static\n * @memberOf XRegExp\n * @type String\n */\n\nXRegExp.version = '4.2.4'; // ==--------------------------==\n// Public methods\n// ==--------------------------==\n// Intentionally undocumented; used in tests and addons\n\nXRegExp._clipDuplicates = clipDuplicates;\nXRegExp._hasNativeFlag = hasNativeFlag;\nXRegExp._dec = dec;\nXRegExp._hex = hex;\nXRegExp._pad4 = pad4;\n/**\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex object that matches the new token.\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\n *   properties of the regex being built, through `this`. Invoked with three arguments:\n *   - The match array, with named backreference properties.\n *   - The regex scope where the match was found: 'default' or 'class'.\n *   - The flags used by the regex, including any flags in a leading mode modifier.\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\n *   construct XRegExps within the function or you will trigger infinite recursion.\n * @param {Object} [options] Options object with optional properties:\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\n *     throwing an 'unknown flag' error when any of the flags are used.\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\n *     final, and instead be reparseable by other tokens (including the current token). Allows\n *     token chaining or deferring.\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\n *     you provide an erroneous value. However, providing it can increase the token's performance\n *     since the token can be skipped at any positions where this character doesn't appear.\n * @example\n *\n * // Basic usage: Add \\a for the ALERT control code\n * XRegExp.addToken(\n *   /\\\\a/,\n *   () => '\\\\x07',\n *   {scope: 'all'}\n * );\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\n *\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\n * // character classes only)\n * XRegExp.addToken(\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\n *   (match) => `${match[1]}${match[2] ? '' : '?'}`,\n *   {flag: 'U'}\n * );\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\n */\n\nXRegExp.addToken = function (regex, handler, options) {\n  options = options || {};\n  var _options = options,\n      optionalFlags = _options.optionalFlags;\n\n  if (options.flag) {\n    registerFlag(options.flag);\n  }\n\n  if (optionalFlags) {\n    optionalFlags = nativ.split.call(optionalFlags, '');\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = (0, _getIterator2.default)(optionalFlags), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var flag = _step2.value;\n        registerFlag(flag);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  } // Add to the private list of syntax tokens\n\n\n  tokens.push({\n    regex: copyRegex(regex, {\n      addG: true,\n      addY: hasNativeY,\n      isInternalOnly: true\n    }),\n    handler: handler,\n    scope: options.scope || defaultScope,\n    flag: options.flag,\n    reparse: options.reparse,\n    leadChar: options.leadChar\n  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\n  // might now produce different results\n\n  XRegExp.cache.flush('patterns');\n};\n/**\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\n * the same pattern and flag combination, the cached copy of the regex is returned.\n *\n * @memberOf XRegExp\n * @param {String} pattern Regex pattern string.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Cached XRegExp object.\n * @example\n *\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\n *   // The regex is compiled once only\n * }\n */\n\n\nXRegExp.cache = function (pattern, flags) {\n  if (!regexCache[pattern]) {\n    regexCache[pattern] = {};\n  }\n\n  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));\n}; // Intentionally undocumented; used in tests\n\n\nXRegExp.cache.flush = function (cacheName) {\n  if (cacheName === 'patterns') {\n    // Flush the pattern cache used by the `XRegExp` constructor\n    patternCache = {};\n  } else {\n    // Flush the regex cache populated by `XRegExp.cache`\n    regexCache = {};\n  }\n};\n/**\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\n * can safely be used at any point within a regex that uses any flags.\n *\n * @memberOf XRegExp\n * @param {String} str String to escape.\n * @returns {String} String with regex metacharacters escaped.\n * @example\n *\n * XRegExp.escape('Escaped? <.>');\n * // -> 'Escaped\\?\\ <\\.>'\n */\n\n\nXRegExp.escape = function (str) {\n  return nativ.replace.call(toObject(str), /[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n/**\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\n * regex uses named capture, named backreference properties are included on the match array.\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Array} Match array with named backreference properties, or `null`.\n * @example\n *\n * // Basic use, with named backreference\n * let match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\n * match.hex; // -> '2620'\n *\n * // With pos and sticky, in a loop\n * let pos = 2, result = [], match;\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\n *   result.push(match[1]);\n *   pos = match.index + match[0].length;\n * }\n * // result -> ['2', '3', '4']\n */\n\n\nXRegExp.exec = function (str, regex, pos, sticky) {\n  var cacheKey = 'g';\n  var addY = false;\n  var fakeY = false;\n  var match;\n  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);\n\n  if (addY) {\n    cacheKey += 'y';\n  } else if (sticky) {\n    // Simulate sticky matching by appending an empty capture to the original regex. The\n    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\n    // and will not search the rest of the subject string. We'll know that the original regex\n    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\n    // capture participated in the match).\n    fakeY = true;\n    cacheKey += 'FakeY';\n  }\n\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: true,\n    addY: addY,\n    source: fakeY ? \"\".concat(regex.source, \"|()\") : undefined,\n    removeY: sticky === false,\n    isInternalOnly: true\n  }));\n  pos = pos || 0;\n  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\n\n  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\n  // the original regexp failed (see above).\n\n  if (fakeY && match && match.pop() === '') {\n    match = null;\n  }\n\n  if (regex.global) {\n    regex.lastIndex = match ? r2.lastIndex : 0;\n  }\n\n  return match;\n};\n/**\n * Executes a provided function once per regex match. Searches always start at the beginning of the\n * string and continue until the end, regardless of the state of the regex's `global` property and\n * initial `lastIndex`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\n *   - The match array, with named backreference properties.\n *   - The zero-based match index.\n *   - The string being traversed.\n *   - The regex object being used to traverse the string.\n * @example\n *\n * // Extracts every other digit from a string\n * const evens = [];\n * XRegExp.forEach('1a2345', /\\d/, (match, i) => {\n *   if (i % 2) evens.push(+match[0]);\n * });\n * // evens -> [2, 4]\n */\n\n\nXRegExp.forEach = function (str, regex, callback) {\n  var pos = 0;\n  var i = -1;\n  var match;\n\n  while (match = XRegExp.exec(str, regex, pos)) {\n    // Because `regex` is provided to `callback`, the function could use the deprecated/\n    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\n    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\n    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\n    // regexes, mutating the regex will not have any effect on the iteration or matched strings,\n    // which is a nice side effect that brings extra safety.\n    callback(match, ++i, str, regex);\n    pos = match.index + (match[0].length || 1);\n  }\n};\n/**\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\n * regexes are not recompiled using XRegExp syntax.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex to globalize.\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\n * @example\n *\n * const globalCopy = XRegExp.globalize(/regex/);\n * globalCopy.global; // -> true\n */\n\n\nXRegExp.globalize = function (regex) {\n  return copyRegex(regex, {\n    addG: true\n  });\n};\n/**\n * Installs optional features according to the specified options. Can be undone using\n * `XRegExp.uninstall`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.install({\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\n *   astral: true,\n *\n *   // Adds named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.install('astral namespacing');\n */\n\n\nXRegExp.install = function (options) {\n  options = prepareOptions(options);\n\n  if (!features.astral && options.astral) {\n    setAstral(true);\n  }\n\n  if (!features.namespacing && options.namespacing) {\n    setNamespacing(true);\n  }\n};\n/**\n * Checks whether an individual optional feature is installed.\n *\n * @memberOf XRegExp\n * @param {String} feature Name of the feature to check. One of:\n *   - `astral`\n *   - `namespacing`\n * @returns {Boolean} Whether the feature is installed.\n * @example\n *\n * XRegExp.isInstalled('astral');\n */\n\n\nXRegExp.isInstalled = function (feature) {\n  return !!features[feature];\n};\n/**\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\n * created in another frame, when `instanceof` and `constructor` checks would fail.\n *\n * @memberOf XRegExp\n * @param {*} value Object to check.\n * @returns {Boolean} Whether the object is a `RegExp` object.\n * @example\n *\n * XRegExp.isRegExp('string'); // -> false\n * XRegExp.isRegExp(/regex/i); // -> true\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\n */\n\n\nXRegExp.isRegExp = function (value) {\n  return toString.call(value) === '[object RegExp]';\n}; // isType(value, 'RegExp');\n\n/**\n * Returns the first matched string, or in global mode, an array containing all matched strings.\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\n *   `scope` is 'all'.\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\n *   mode: Array of all matched strings, or an empty array.\n * @example\n *\n * // Match first\n * XRegExp.match('abc', /\\w/); // -> 'a'\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\n * XRegExp.match('abc', /x/g, 'one'); // -> null\n *\n * // Match all\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /x/, 'all'); // -> []\n */\n\n\nXRegExp.match = function (str, regex, scope) {\n  var global = regex.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: !!global,\n    removeG: scope === 'one',\n    isInternalOnly: true\n  }));\n  var result = nativ.match.call(toObject(str), r2);\n\n  if (regex.global) {\n    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\n    result.index + result[0].length : 0;\n  }\n\n  return global ? result || [] : result && result[0];\n};\n/**\n * Retrieves the matches from searching a string using a chain of regexes that successively search\n * within previous matches. The provided `chain` array can contain regexes and or objects with\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\n * backreference is passed forward to the next regex or returned.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} chain Regexes that each search for matches within preceding results.\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\n * @example\n *\n * // Basic usage; matches numbers within <b> tags\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n *   XRegExp('(?is)<b>.*?</b>'),\n *   /\\d+/\n * ]);\n * // -> ['2', '4', '56']\n *\n * // Passing forward and returning specific backreferences\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\n *         <a href=\"http://www.google.com/\">Google</a>';\n * XRegExp.matchChain(html, [\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n * ]);\n * // -> ['xregexp.com', 'www.google.com']\n */\n\n\nXRegExp.matchChain = function (str, chain) {\n  return function recurseChain(values, level) {\n    var item = chain[level].regex ? chain[level] : {\n      regex: chain[level]\n    };\n    var matches = [];\n\n    function addMatch(match) {\n      if (item.backref) {\n        var ERR_UNDEFINED_GROUP = \"Backreference to undefined group: \".concat(item.backref);\n        var isNamedBackref = isNaN(item.backref);\n\n        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {\n          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`\n          if (!(item.backref in match.groups)) {\n            throw new ReferenceError(ERR_UNDEFINED_GROUP);\n          }\n        } else if (!match.hasOwnProperty(item.backref)) {\n          throw new ReferenceError(ERR_UNDEFINED_GROUP);\n        }\n\n        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];\n        matches.push(backrefValue || '');\n      } else {\n        matches.push(match[0]);\n      }\n    }\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = (0, _getIterator2.default)(values), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var value = _step3.value;\n        XRegExp.forEach(value, item.regex, addMatch);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\n  }([str], 0);\n};\n/**\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\n * or regex, and the replacement can be a string or a function to be called for each match. To\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\n * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.\n * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\n * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n *   Replacement strings can include special replacement syntax:\n *     - $$ - Inserts a literal $ character.\n *     - $&, $0 - Inserts the matched substring.\n *     - $` - Inserts the string that precedes the matched substring (left context).\n *     - $' - Inserts the string that follows the matched substring (right context).\n *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\n *       backreference n/nn.\n *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing\n *       group, inserts backreference n.\n *   Replacement functions are invoked with three or more arguments:\n *     - The matched substring (corresponds to $& above). Named backreferences are accessible as\n *       properties of this first argument.\n *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\n *     - The zero-based index of the match within the total search string.\n *     - The total string being searched.\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\n * @returns {String} New string with one or all matches replaced.\n * @example\n *\n * // Regex search, using named backreferences in replacement string\n * const name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\n * XRegExp.replace('John Smith', name, '$<last>, $<first>');\n * // -> 'Smith, John'\n *\n * // Regex search, using named backreferences in replacement function\n * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);\n * // -> 'Smith, John'\n *\n * // String search, with replace-all\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\n * // -> 'XRegExp builds XRegExps'\n */\n\n\nXRegExp.replace = function (str, search, replacement, scope) {\n  var isRegex = XRegExp.isRegExp(search);\n  var global = search.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';\n  var s2 = search;\n\n  if (isRegex) {\n    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\n    // `lastIndex` isn't updated *during* replacement iterations\n\n    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {\n      addG: !!global,\n      removeG: scope === 'one',\n      isInternalOnly: true\n    }));\n  } else if (global) {\n    s2 = new RegExp(XRegExp.escape(String(search)), 'g');\n  } // Fixed `replace` required for named backreferences, etc.\n\n\n  var result = fixed.replace.call(toObject(str), s2, replacement);\n\n  if (isRegex && search.global) {\n    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n    search.lastIndex = 0;\n  }\n\n  return result;\n};\n/**\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\n * array of replacement details. Later replacements operate on the output of earlier replacements.\n * Replacement details are accepted as an array with a regex or string to search for, the\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\n * replacement text syntax, which supports named backreference properties via `${name}` or\n * `$<name>`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} replacements Array of replacement detail arrays.\n * @returns {String} New string with all replacements.\n * @example\n *\n * str = XRegExp.replaceEach(str, [\n *   [XRegExp('(?<name>a)'), 'z${name}'],\n *   [/b/gi, 'y'],\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\n *   [/f/g, ($0) => $0.toUpperCase()]\n * ]);\n */\n\n\nXRegExp.replaceEach = function (str, replacements) {\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = (0, _getIterator2.default)(replacements), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var r = _step4.value;\n      str = XRegExp.replace(str, r[0], r[1], r[2]);\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  return str;\n};\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * XRegExp.split('a b c', ' ');\n * // -> ['a', 'b', 'c']\n *\n * // With limit\n * XRegExp.split('a b c', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', '..']\n */\n\n\nXRegExp.split = function (str, separator, limit) {\n  return fixed.split.call(toObject(str), separator, limit);\n};\n/**\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\n * `sticky` arguments specify the search start position, and whether the match must start at the\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\n * updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.test` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Boolean} Whether the regex matched the provided value.\n * @example\n *\n * // Basic use\n * XRegExp.test('abc', /c/); // -> true\n *\n * // With pos and sticky\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\n */\n// Do this the easy way :-)\n\n\nXRegExp.test = function (str, regex, pos, sticky) {\n  return !!XRegExp.exec(str, regex, pos, sticky);\n};\n/**\n * Uninstalls optional features according to the specified options. All optional features start out\n * uninstalled, so this is used to undo the actions of `XRegExp.install`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.uninstall({\n *   // Disables support for astral code points in Unicode addons\n *   astral: true,\n *\n *   // Don't add named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.uninstall('astral namespacing');\n */\n\n\nXRegExp.uninstall = function (options) {\n  options = prepareOptions(options);\n\n  if (features.astral && options.astral) {\n    setAstral(false);\n  }\n\n  if (features.namespacing && options.namespacing) {\n    setNamespacing(false);\n  }\n};\n/**\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\n * `flags` argument.\n *\n * @memberOf XRegExp\n * @param {Array} patterns Regexes and strings to combine.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @param {Object} [options] Options object with optional properties:\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\n * @returns {RegExp} Union of the provided regexes and strings.\n * @example\n *\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n *\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\n * // -> /manbearpig/i\n */\n\n\nXRegExp.union = function (patterns, flags, options) {\n  options = options || {};\n  var conjunction = options.conjunction || 'or';\n  var numCaptures = 0;\n  var numPriorCaptures;\n  var captureNames;\n\n  function rewrite(match, paren, backref) {\n    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group\n\n    if (paren) {\n      ++numCaptures; // If the current capture has a name, preserve the name\n\n      if (name) {\n        return \"(?<\".concat(name, \">\");\n      } // Backreference\n\n    } else if (backref) {\n      // Rewrite the backreference\n      return \"\\\\\".concat(+backref + numPriorCaptures);\n    }\n\n    return match;\n  }\n\n  if (!(isType(patterns, 'Array') && patterns.length)) {\n    throw new TypeError('Must provide a nonempty array of patterns to merge');\n  }\n\n  var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\n  var output = [];\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = (0, _getIterator2.default)(patterns), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var pattern = _step5.value;\n\n      if (XRegExp.isRegExp(pattern)) {\n        numPriorCaptures = numCaptures;\n        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\n        // independently valid; helps keep this simple. Named captures are put back\n\n        output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));\n      } else {\n        output.push(XRegExp.escape(pattern));\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n\n  var separator = conjunction === 'none' ? '' : '|';\n  return XRegExp(output.join(separator), flags);\n}; // ==--------------------------==\n// Fixed/extended native methods\n// ==--------------------------==\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {Array} Match array with named backreference properties, or `null`.\n */\n\n\nfixed.exec = function (str) {\n  var origLastIndex = this.lastIndex;\n  var match = nativ.exec.apply(this, arguments);\n\n  if (match) {\n    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\n    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\n    // in standards mode follows the spec.\n    if (!correctExecNpcg && match.length > 1 && match.indexOf('') !== -1) {\n      var r2 = copyRegex(this, {\n        removeG: true,\n        isInternalOnly: true\n      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n      // matching due to characters outside the match\n\n      nativ.replace.call(String(str).slice(match.index), r2, function () {\n        var len = arguments.length; // Skip index 0 and the last 2\n\n        for (var i = 1; i < len - 2; ++i) {\n          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {\n            match[i] = undefined;\n          }\n        }\n      });\n    } // Attach named capture properties\n\n\n    var groupsObject = match;\n\n    if (XRegExp.isInstalled('namespacing')) {\n      // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n      match.groups = (0, _create.default)(null);\n      groupsObject = match.groups;\n    }\n\n    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\n      // Skip index 0\n      for (var i = 1; i < match.length; ++i) {\n        var name = this[REGEX_DATA].captureNames[i - 1];\n\n        if (name) {\n          groupsObject[name] = match[i];\n        }\n      }\n    } // Fix browsers that increment `lastIndex` after zero-length matches\n\n\n    if (this.global && !match[0].length && this.lastIndex > match.index) {\n      this.lastIndex = match.index;\n    }\n  }\n\n  if (!this.global) {\n    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n    this.lastIndex = origLastIndex;\n  }\n\n  return match;\n};\n/**\n * Fixes browser bugs in the native `RegExp.prototype.test`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {Boolean} Whether the regex matched the provided value.\n */\n\n\nfixed.test = function (str) {\n  // Do this the easy way :-)\n  return !!fixed.exec.call(this, str);\n};\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `String.prototype.match`.\n *\n * @memberOf String\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\n *   the result of calling `regex.exec(this)`.\n */\n\n\nfixed.match = function (regex) {\n  if (!XRegExp.isRegExp(regex)) {\n    // Use the native `RegExp` rather than `XRegExp`\n    regex = new RegExp(regex);\n  } else if (regex.global) {\n    var result = nativ.match.apply(this, arguments); // Fixes IE bug\n\n    regex.lastIndex = 0;\n    return result;\n  }\n\n  return fixed.exec.call(regex, toObject(this));\n};\n/**\n * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement\n * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also\n * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex\n * search value, and the value of a replacement regex's `lastIndex` property during replacement\n * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third\n * (`flags`) argument. Use via `XRegExp.replace`.\n *\n * @memberOf String\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n * @returns {String} New string with one or all matches replaced.\n */\n\n\nfixed.replace = function (search, replacement) {\n  var isRegex = XRegExp.isRegExp(search);\n  var origLastIndex;\n  var captureNames;\n  var result;\n\n  if (isRegex) {\n    if (search[REGEX_DATA]) {\n      captureNames = search[REGEX_DATA].captureNames;\n    } // Only needed if `search` is nonglobal\n\n\n    origLastIndex = search.lastIndex;\n  } else {\n    search += ''; // Type-convert\n  } // Don't use `typeof`; some older browsers return 'function' for regex objects\n\n\n  if (isType(replacement, 'Function')) {\n    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\n    // functions isn't type-converted to a string\n    result = nativ.replace.call(String(this), search, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (captureNames) {\n        var groupsObject;\n\n        if (XRegExp.isInstalled('namespacing')) {\n          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n          groupsObject = (0, _create.default)(null);\n          args.push(groupsObject);\n        } else {\n          // Change the `args[0]` string primitive to a `String` object that can store\n          // properties. This really does need to use `String` as a constructor\n          args[0] = new String(args[0]);\n          groupsObject = args[0];\n        } // Store named backreferences\n\n\n        for (var i = 0; i < captureNames.length; ++i) {\n          if (captureNames[i]) {\n            groupsObject[captureNames[i]] = args[i + 1];\n          }\n        }\n      } // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari\n      // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\n\n\n      if (isRegex && search.global) {\n        search.lastIndex = args[args.length - 2] + args[0].length;\n      } // ES6 specs the context for replacement functions as `undefined`\n\n\n      return replacement.apply(void 0, args);\n    });\n  } else {\n    // Ensure that the last value of `args` will be a string when given nonstring `this`,\n    // while still throwing on null or undefined context\n    result = nativ.replace.call(this == null ? this : String(this), search, function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return nativ.replace.call(String(replacement), replacementToken, replacer);\n\n      function replacer($0, bracketed, angled, dollarToken) {\n        bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces\n\n        if (bracketed) {\n          // XRegExp behavior for `${n}` or `$<n>`:\n          // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the\n          //    entire match. Any number of leading zeros may be used.\n          // 2. Backreference to named capture `n`, if it exists and is not an integer\n          //    overridden by numbered capture. In practice, this does not overlap with\n          //    numbered capture since XRegExp does not allow named capture to use a bare\n          //    integer as the name.\n          // 3. If the name or number does not refer to an existing capturing group, it's\n          //    an error.\n          var n = +bracketed; // Type-convert; drop leading zeros\n\n          if (n <= args.length - 3) {\n            return args[n] || '';\n          } // Groups with the same name is an error, else would need `lastIndexOf`\n\n\n          n = captureNames ? captureNames.indexOf(bracketed) : -1;\n\n          if (n < 0) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[n + 1] || '';\n        } // Else, special variable or numbered backreference without curly braces\n\n\n        if (dollarToken === '$') {\n          // $$\n          return '$';\n        }\n\n        if (dollarToken === '&' || +dollarToken === 0) {\n          // $&, $0 (not followed by 1-9), $00\n          return args[0];\n        }\n\n        if (dollarToken === '`') {\n          // $` (left context)\n          return args[args.length - 1].slice(0, args[args.length - 2]);\n        }\n\n        if (dollarToken === \"'\") {\n          // $' (right context)\n          return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\n        } // Else, numbered backreference without braces\n\n\n        dollarToken = +dollarToken; // Type-convert; drop leading zero\n        // XRegExp behavior for `$n` and `$nn`:\n        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.\n        // - `$1` is an error if no capturing groups.\n        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`\n        //   instead.\n        // - `$01` is `$1` if at least one capturing group, else it's an error.\n        // - `$0` (not followed by 1-9) and `$00` are the entire match.\n        // Native behavior, for comparison:\n        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\n        // - `$1` is a literal `$1` if no capturing groups.\n        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\n        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\n        // - `$0` is a literal `$0`.\n\n        if (!isNaN(dollarToken)) {\n          if (dollarToken > args.length - 3) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[dollarToken] || '';\n        } // `$` followed by an unsupported char is an error, unlike native JS\n\n\n        throw new SyntaxError(\"Invalid token \".concat($0));\n      }\n    });\n  }\n\n  if (isRegex) {\n    if (search.global) {\n      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n      search.lastIndex = 0;\n    } else {\n      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n      search.lastIndex = origLastIndex;\n    }\n  }\n\n  return result;\n};\n/**\n * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.\n *\n * @memberOf String\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n */\n\n\nfixed.split = function (separator, limit) {\n  if (!XRegExp.isRegExp(separator)) {\n    // Browsers handle nonregex split correctly, so use the faster native method\n    return nativ.split.apply(this, arguments);\n  }\n\n  var str = String(this);\n  var output = [];\n  var origLastIndex = separator.lastIndex;\n  var lastLastIndex = 0;\n  var lastLength; // Values for `limit`, per the spec:\n  // If undefined: pow(2,32) - 1\n  // If 0, Infinity, or NaN: 0\n  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\n  // If negative number: pow(2,32) - floor(abs(limit))\n  // If other: Type-convert, then use the above rules\n  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\n  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\n\n  limit = (limit === undefined ? -1 : limit) >>> 0;\n  XRegExp.forEach(str, separator, function (match) {\n    // This condition is not the same as `if (match[0].length)`\n    if (match.index + match[0].length > lastLastIndex) {\n      output.push(str.slice(lastLastIndex, match.index));\n\n      if (match.length > 1 && match.index < str.length) {\n        Array.prototype.push.apply(output, match.slice(1));\n      }\n\n      lastLength = match[0].length;\n      lastLastIndex = match.index + lastLength;\n    }\n  });\n\n  if (lastLastIndex === str.length) {\n    if (!nativ.test.call(separator, '') || lastLength) {\n      output.push('');\n    }\n  } else {\n    output.push(str.slice(lastLastIndex));\n  }\n\n  separator.lastIndex = origLastIndex;\n  return output.length > limit ? output.slice(0, limit) : output;\n}; // ==--------------------------==\n// Built-in syntax/flag tokens\n// ==--------------------------==\n\n/*\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\n * consistency and to reserve their syntax, but lets them be superseded by addons.\n */\n\n\nXRegExp.addToken(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/, function (match, scope) {\n  // \\B is allowed in default scope only\n  if (match[1] === 'B' && scope === defaultScope) {\n    return match[0];\n  }\n\n  throw new SyntaxError(\"Invalid escape \".concat(match[0]));\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\n * if you use the same in a character class.\n */\n\nXRegExp.addToken(/\\\\u{([\\dA-Fa-f]+)}/, function (match, scope, flags) {\n  var code = dec(match[1]);\n\n  if (code > 0x10FFFF) {\n    throw new SyntaxError(\"Invalid Unicode code point \".concat(match[0]));\n  }\n\n  if (code <= 0xFFFF) {\n    // Converting to \\uNNNN avoids needing to escape the literal character and keep it\n    // separate from preceding tokens\n    return \"\\\\u\".concat(pad4(hex(code)));\n  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\n\n\n  if (hasNativeU && flags.indexOf('u') !== -1) {\n    return match[0];\n  }\n\n  throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\n * character class endings can't be determined.\n */\n\nXRegExp.addToken(/\\[(\\^?)\\]/, // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\n// (?!) should work like \\b\\B, but is unreliable in some versions of Firefox\n\n/* eslint-disable no-confusing-arrow */\nfunction (match) {\n  return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';\n},\n/* eslint-enable no-confusing-arrow */\n{\n  leadChar: '['\n});\n/*\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\n * free-spacing mode (flag x).\n */\n\nXRegExp.addToken(/\\(\\?#[^)]*\\)/, getContextualTokenSeparator, {\n  leadChar: '('\n});\n/*\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\n */\n\nXRegExp.addToken(/\\s+|#[^\\n]*\\n?/, getContextualTokenSeparator, {\n  flag: 'x'\n});\n/*\n * Dot, in dotall mode (aka singleline mode, flag s) only.\n */\n\nXRegExp.addToken(/\\./, function () {\n  return '[\\\\s\\\\S]';\n}, {\n  flag: 's',\n  leadChar: '.'\n});\n/*\n * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\n * and $ only. Also allows numbered backreferences as `\\k<n>`.\n */\n\nXRegExp.addToken(/\\\\k<([\\w$]+)>/, function (match) {\n  // Groups with the same name is an error, else would need `lastIndexOf`\n  var index = isNaN(match[1]) ? this.captureNames.indexOf(match[1]) + 1 : +match[1];\n  var endIndex = match.index + match[0].length;\n\n  if (!index || index > this.captureNames.length) {\n    throw new SyntaxError(\"Backreference to undefined group \".concat(match[0]));\n  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\n  // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.\n\n\n  return \"\\\\\".concat(index).concat(endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');\n}, {\n  leadChar: '\\\\'\n});\n/*\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\n */\n\nXRegExp.addToken(/\\\\(\\d+)/, function (match, scope) {\n  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {\n    throw new SyntaxError(\"Cannot use octal escape or backreference to undefined group \".concat(match[0]));\n  }\n\n  return match[0];\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\n * Python-style named capture as octals.\n */\n\nXRegExp.addToken(/\\(\\?P?<([\\w$]+)>/, function (match) {\n  // Disallow bare integers as names because named backreferences are added to match arrays\n  // and therefore numeric properties may lead to incorrect lookups\n  if (!isNaN(match[1])) {\n    throw new SyntaxError(\"Cannot use integer as capture name \".concat(match[0]));\n  }\n\n  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {\n    throw new SyntaxError(\"Cannot use reserved word as capture name \".concat(match[0]));\n  }\n\n  if (this.captureNames.indexOf(match[1]) !== -1) {\n    throw new SyntaxError(\"Cannot use same name for multiple groups \".concat(match[0]));\n  }\n\n  this.captureNames.push(match[1]);\n  this.hasNamedCapture = true;\n  return '(';\n}, {\n  leadChar: '('\n});\n/*\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\n * groups. Also adds explicit capture mode (flag n).\n */\n\nXRegExp.addToken(/\\((?!\\?)/, function (match, scope, flags) {\n  if (flags.indexOf('n') !== -1) {\n    return '(?:';\n  }\n\n  this.captureNames.push(null);\n  return '(';\n}, {\n  optionalFlags: 'n',\n  leadChar: '('\n});\nvar _default = XRegExp;\nexports.default = _default;\nmodule.exports = exports[\"default\"];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime_corejs2$core_js$parse_int","~$module$node_modules$$babel$runtime_corejs2$core_js$get_iterator","~$shadow.js","~$module$node_modules$$babel$runtime_corejs2$helpers$interopRequireDefault","~$module$node_modules$$babel$runtime_corejs2$core_js$object$create","~$module$node_modules$$babel$runtime_corejs2$helpers$slicedToArray"]],"~:properties",["^5",["replaceEach","leadChar","handler","_hasNativeFlag","forEach","output","namespacing","removeY","prototype","addToken","captures","astral","__esModule","union","optionalFlags","_pad4","regex","lastIndex","flush","flags","globalize","hasNamedCapture","exec","cache","escape","replace","addG","value","uninstall","isInternalOnly","install","split","_hex","scope","addY","i","source","pattern","y","removeG","match","version","__proto__","g","u","_dec","_clipDuplicates","matchLength","isInstalled","reparse","isRegExp","m","captureNames","default","groups","flag","matchChain","test"]],"~:compiled-at",1597771434231,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$xregexp$lib$xregexp.js\",\n\"lineCount\":41,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/xregexp/lib/xregexp.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$xregexp$lib$xregexp\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime-corejs2/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\n\\nvar _create = _interopRequireDefault(require(\\\"@babel/runtime-corejs2/core-js/object/create\\\"));\\n\\nvar _slicedToArray2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs2/helpers/slicedToArray\\\"));\\n\\nvar _getIterator2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs2/core-js/get-iterator\\\"));\\n\\nvar _parseInt2 = _interopRequireDefault(require(\\\"@babel/runtime-corejs2/core-js/parse-int\\\"));\\n\\n/*!\\n * XRegExp 4.2.4\\n * <xregexp.com>\\n * Steven Levithan (c) 2007-present MIT License\\n */\\n\\n/**\\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\\n * make your client-side grepping simpler and more powerful, while freeing you from related\\n * cross-browser inconsistencies.\\n */\\n// ==--------------------------==\\n// Private stuff\\n// ==--------------------------==\\n// Property name used for extended regex instance data\\nvar REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled\\n\\nvar features = {\\n  astral: false,\\n  namespacing: false\\n}; // Native methods to use and restore ('native' is an ES3 reserved keyword)\\n\\nvar nativ = {\\n  exec: RegExp.prototype.exec,\\n  test: RegExp.prototype.test,\\n  match: String.prototype.match,\\n  replace: String.prototype.replace,\\n  split: String.prototype.split\\n}; // Storage for fixed/extended native methods\\n\\nvar fixed = {}; // Storage for regexes cached by `XRegExp.cache`\\n\\nvar regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor\\n\\nvar patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\\n\\nvar tokens = []; // Token scopes\\n\\nvar defaultScope = 'default';\\nvar classScope = 'class'; // Regexes that match native regex syntax, including octals\\n\\nvar nativeTokens = {\\n  // Any native multicharacter token in default scope, or any single character\\n  'default': /\\\\\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\\\d*|x[\\\\dA-Fa-f]{2}|u(?:[\\\\dA-Fa-f]{4}|{[\\\\dA-Fa-f]+})|c[A-Za-z]|[\\\\s\\\\S])|\\\\(\\\\?(?:[:=!]|<[=!])|[?*+]\\\\?|{\\\\d+(?:,\\\\d*)?}\\\\??|[\\\\s\\\\S]/,\\n  // Any native multicharacter token in character class scope, or any single character\\n  'class': /\\\\\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\\\dA-Fa-f]{2}|u(?:[\\\\dA-Fa-f]{4}|{[\\\\dA-Fa-f]+})|c[A-Za-z]|[\\\\s\\\\S])|[\\\\s\\\\S]/\\n}; // Any backreference or dollar-prefixed character in replacement strings\\n\\nvar replacementToken = /\\\\$(?:{([\\\\w$]+)}|<([\\\\w$]+)>|(\\\\d\\\\d?|[\\\\s\\\\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups\\n\\nvar correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined; // Check for ES6 `flags` prop support\\n\\nvar hasFlagsProp = /x/.flags !== undefined; // Shortcut to `Object.prototype.toString`\\n\\nvar _ref = {},\\n    toString = _ref.toString;\\n\\nfunction hasNativeFlag(flag) {\\n  // Can't check based on the presence of properties/getters since browsers might support such\\n  // properties even when they don't support the corresponding flag in regex construction (tested\\n  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\\n  // throws an error)\\n  var isSupported = true;\\n\\n  try {\\n    // Can't use regex literals for testing even in a `try` because regex literals with\\n    // unsupported flags cause a compilation error in IE\\n    new RegExp('', flag);\\n  } catch (exception) {\\n    isSupported = false;\\n  }\\n\\n  return isSupported;\\n} // Check for ES6 `u` flag support\\n\\n\\nvar hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support\\n\\nvar hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags\\n\\nvar registeredFlags = {\\n  g: true,\\n  i: true,\\n  m: true,\\n  u: hasNativeU,\\n  y: hasNativeY\\n};\\n/**\\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\\n *\\n * @private\\n * @param {RegExp} regex Regex to augment.\\n * @param {Array} captureNames Array with capture names, or `null`.\\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\\n *   skipping some operations like attaching `XRegExp.prototype` properties.\\n * @returns {RegExp} Augmented regex.\\n */\\n\\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\\n  regex[REGEX_DATA] = {\\n    captureNames: captureNames\\n  };\\n\\n  if (isInternalOnly) {\\n    return regex;\\n  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\\n\\n\\n  if (regex.__proto__) {\\n    regex.__proto__ = XRegExp.prototype;\\n  } else {\\n    for (var p in XRegExp.prototype) {\\n      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\\n      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\\n      // extensions exist on `regex.prototype` anyway\\n      regex[p] = XRegExp.prototype[p];\\n    }\\n  }\\n\\n  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\\n\\n  regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;\\n  return regex;\\n}\\n/**\\n * Removes any duplicate characters from the provided string.\\n *\\n * @private\\n * @param {String} str String to remove duplicate characters from.\\n * @returns {String} String with any duplicate characters removed.\\n */\\n\\n\\nfunction clipDuplicates(str) {\\n  return nativ.replace.call(str, /([\\\\s\\\\S])(?=[\\\\s\\\\S]*\\\\1)/g, '');\\n}\\n/**\\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\\n * flags g and y while copying the regex.\\n *\\n * @private\\n * @param {RegExp} regex Regex to copy.\\n * @param {Object} [options] Options object with optional properties:\\n *   - `addG` {Boolean} Add flag g while copying the regex.\\n *   - `addY` {Boolean} Add flag y while copying the regex.\\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\\n *     skipping some operations like attaching `XRegExp.prototype` properties.\\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\\n */\\n\\n\\nfunction copyRegex(regex, options) {\\n  if (!XRegExp.isRegExp(regex)) {\\n    throw new TypeError('Type RegExp expected');\\n  }\\n\\n  var xData = regex[REGEX_DATA] || {};\\n  var flags = getNativeFlags(regex);\\n  var flagsToAdd = '';\\n  var flagsToRemove = '';\\n  var xregexpSource = null;\\n  var xregexpFlags = null;\\n  options = options || {};\\n\\n  if (options.removeG) {\\n    flagsToRemove += 'g';\\n  }\\n\\n  if (options.removeY) {\\n    flagsToRemove += 'y';\\n  }\\n\\n  if (flagsToRemove) {\\n    flags = nativ.replace.call(flags, new RegExp(\\\"[\\\".concat(flagsToRemove, \\\"]+\\\"), 'g'), '');\\n  }\\n\\n  if (options.addG) {\\n    flagsToAdd += 'g';\\n  }\\n\\n  if (options.addY) {\\n    flagsToAdd += 'y';\\n  }\\n\\n  if (flagsToAdd) {\\n    flags = clipDuplicates(flags + flagsToAdd);\\n  }\\n\\n  if (!options.isInternalOnly) {\\n    if (xData.source !== undefined) {\\n      xregexpSource = xData.source;\\n    } // null or undefined; don't want to add to `flags` if the previous value was null, since\\n    // that indicates we're not tracking original precompilation flags\\n\\n\\n    if (xData.flags != null) {\\n      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\\n      // removed for non-internal regexes, so don't need to handle it\\n      xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;\\n    }\\n  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\\n  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\\n  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\\n  // translation to native regex syntax\\n\\n\\n  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);\\n  return regex;\\n}\\n/**\\n * Converts hexadecimal to decimal.\\n *\\n * @private\\n * @param {String} hex\\n * @returns {Number}\\n */\\n\\n\\nfunction dec(hex) {\\n  return (0, _parseInt2.default)(hex, 16);\\n}\\n/**\\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\\n * inline comment or whitespace with flag x. This is used directly as a token handler function\\n * passed to `XRegExp.addToken`.\\n *\\n * @private\\n * @param {String} match Match arg of `XRegExp.addToken` handler\\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\\n * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.\\n */\\n\\n\\nfunction getContextualTokenSeparator(match, scope, flags) {\\n  if ( // No need to separate tokens if at the beginning or end of a group\\n  match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' || // No need to separate tokens if before or after a `|`\\n  match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' || // No need to separate tokens if at the beginning or end of the pattern\\n  match.index < 1 || match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.\\n  // The way this is written relies on:\\n  // - The search regex matching only 3-char strings.\\n  // - Although `substr` gives chars from the end of the string if given a negative index,\\n  //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`\\n  nativ.test.call(/^\\\\(\\\\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier\\n  isQuantifierNext(match.input, match.index + match[0].length, flags)) {\\n    return '';\\n  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\\\\1 1` or `\\\\1(?#)1` to `\\\\11`.\\n  // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax\\n  // error `(? :` into `(?:`.\\n\\n\\n  return '(?:)';\\n}\\n/**\\n * Returns native `RegExp` flags used by a regex object.\\n *\\n * @private\\n * @param {RegExp} regex Regex to check.\\n * @returns {String} Native flags in use.\\n */\\n\\n\\nfunction getNativeFlags(regex) {\\n  return hasFlagsProp ? regex.flags : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\\n  // with an empty string) allows this to continue working predictably when\\n  // `XRegExp.proptotype.toString` is overridden\\n  nativ.exec.call(/\\\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\\n}\\n/**\\n * Determines whether a regex has extended instance data used to track capture names.\\n *\\n * @private\\n * @param {RegExp} regex Regex to check.\\n * @returns {Boolean} Whether the regex uses named capture.\\n */\\n\\n\\nfunction hasNamedCapture(regex) {\\n  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\\n}\\n/**\\n * Converts decimal to hexadecimal.\\n *\\n * @private\\n * @param {Number|String} dec\\n * @returns {String}\\n */\\n\\n\\nfunction hex(dec) {\\n  return (0, _parseInt2.default)(dec, 10).toString(16);\\n}\\n/**\\n * Checks whether the next nonignorable token after the specified position is a quantifier.\\n *\\n * @private\\n * @param {String} pattern Pattern to search within.\\n * @param {Number} pos Index in `pattern` to search at.\\n * @param {String} flags Flags used by the pattern.\\n * @returns {Boolean} Whether the next nonignorable token is a quantifier.\\n */\\n\\n\\nfunction isQuantifierNext(pattern, pos, flags) {\\n  var inlineCommentPattern = '\\\\\\\\(\\\\\\\\?#[^)]*\\\\\\\\)';\\n  var lineCommentPattern = '#[^#\\\\\\\\n]*';\\n  var quantifierPattern = '[?*+]|{\\\\\\\\d+(?:,\\\\\\\\d*)?}';\\n  return nativ.test.call(flags.indexOf('x') !== -1 ? // Ignore any leading whitespace, line comments, and inline comments\\n  /^(?:\\\\s|#[^#\\\\n]*|\\\\(\\\\?#[^)]*\\\\))*(?:[?*+]|{\\\\d+(?:,\\\\d*)?})/ : // Ignore any leading inline comments\\n  /^(?:\\\\(\\\\?#[^)]*\\\\))*(?:[?*+]|{\\\\d+(?:,\\\\d*)?})/, pattern.slice(pos));\\n}\\n/**\\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\\n *\\n * @private\\n * @param {*} value Object to check.\\n * @param {String} type Type to check for, in TitleCase.\\n * @returns {Boolean} Whether the object matches the type.\\n */\\n\\n\\nfunction isType(value, type) {\\n  return toString.call(value) === \\\"[object \\\".concat(type, \\\"]\\\");\\n}\\n/**\\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\\n *\\n * @private\\n * @param {String} str\\n * @returns {String}\\n */\\n\\n\\nfunction pad4(str) {\\n  while (str.length < 4) {\\n    str = \\\"0\\\".concat(str);\\n  }\\n\\n  return str;\\n}\\n/**\\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\\n * the flag preparation logic from the `XRegExp` constructor.\\n *\\n * @private\\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\\n * @param {String} flags Any combination of flags.\\n * @returns {Object} Object with properties `pattern` and `flags`.\\n */\\n\\n\\nfunction prepareFlags(pattern, flags) {\\n  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\\n  if (clipDuplicates(flags) !== flags) {\\n    throw new SyntaxError(\\\"Invalid duplicate regex flag \\\".concat(flags));\\n  } // Strip and apply a leading mode modifier with any combination of flags except g or y\\n\\n\\n  pattern = nativ.replace.call(pattern, /^\\\\(\\\\?([\\\\w$]+)\\\\)/, function ($0, $1) {\\n    if (nativ.test.call(/[gy]/, $1)) {\\n      throw new SyntaxError(\\\"Cannot use flag g or y in mode modifier \\\".concat($0));\\n    } // Allow duplicate flags within the mode modifier\\n\\n\\n    flags = clipDuplicates(flags + $1);\\n    return '';\\n  }); // Throw on unknown native or nonnative flags\\n\\n  var _iteratorNormalCompletion = true;\\n  var _didIteratorError = false;\\n  var _iteratorError = undefined;\\n\\n  try {\\n    for (var _iterator = (0, _getIterator2.default)(flags), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\\n      var flag = _step.value;\\n\\n      if (!registeredFlags[flag]) {\\n        throw new SyntaxError(\\\"Unknown regex flag \\\".concat(flag));\\n      }\\n    }\\n  } catch (err) {\\n    _didIteratorError = true;\\n    _iteratorError = err;\\n  } finally {\\n    try {\\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\\n        _iterator.return();\\n      }\\n    } finally {\\n      if (_didIteratorError) {\\n        throw _iteratorError;\\n      }\\n    }\\n  }\\n\\n  return {\\n    pattern: pattern,\\n    flags: flags\\n  };\\n}\\n/**\\n * Prepares an options object from the given value.\\n *\\n * @private\\n * @param {String|Object} value Value to convert to an options object.\\n * @returns {Object} Options object.\\n */\\n\\n\\nfunction prepareOptions(value) {\\n  var options = {};\\n\\n  if (isType(value, 'String')) {\\n    XRegExp.forEach(value, /[^\\\\s,]+/, function (match) {\\n      options[match] = true;\\n    });\\n    return options;\\n  }\\n\\n  return value;\\n}\\n/**\\n * Registers a flag so it doesn't throw an 'unknown flag' error.\\n *\\n * @private\\n * @param {String} flag Single-character flag to register.\\n */\\n\\n\\nfunction registerFlag(flag) {\\n  if (!/^[\\\\w$]$/.test(flag)) {\\n    throw new Error('Flag must be a single character A-Za-z0-9_$');\\n  }\\n\\n  registeredFlags[flag] = true;\\n}\\n/**\\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\\n * position, until a match is found.\\n *\\n * @private\\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\\n * @param {String} flags Flags being used to construct the regex.\\n * @param {Number} pos Position to search for tokens within `pattern`.\\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\\n * @param {Object} context Context object to use for token handler functions.\\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\\n */\\n\\n\\nfunction runTokens(pattern, flags, pos, scope, context) {\\n  var i = tokens.length;\\n  var leadChar = pattern[pos];\\n  var result = null;\\n  var match;\\n  var t; // Run in reverse insertion order\\n\\n  while (i--) {\\n    t = tokens[i];\\n\\n    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(flags.indexOf(t.flag) !== -1)) {\\n      continue;\\n    }\\n\\n    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\\n\\n    if (match) {\\n      result = {\\n        matchLength: match[0].length,\\n        output: t.handler.call(context, match, scope, flags),\\n        reparse: t.reparse\\n      }; // Finished with token tests\\n\\n      break;\\n    }\\n  }\\n\\n  return result;\\n}\\n/**\\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\\n * the Unicode Base addon is not available, since flag A is registered by that addon.\\n *\\n * @private\\n * @param {Boolean} on `true` to enable; `false` to disable.\\n */\\n\\n\\nfunction setAstral(on) {\\n  features.astral = on;\\n}\\n/**\\n * Adds named capture groups to the `groups` property of match arrays. See here for details:\\n * https://github.com/tc39/proposal-regexp-named-groups\\n *\\n * @private\\n * @param {Boolean} on `true` to enable; `false` to disable.\\n */\\n\\n\\nfunction setNamespacing(on) {\\n  features.namespacing = on;\\n}\\n/**\\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\\n * the ES5 abstract operation `ToObject`.\\n *\\n * @private\\n * @param {*} value Object to check and return.\\n * @returns {*} The provided object.\\n */\\n\\n\\nfunction toObject(value) {\\n  // null or undefined\\n  if (value == null) {\\n    throw new TypeError('Cannot convert null or undefined to object');\\n  }\\n\\n  return value;\\n} // ==--------------------------==\\n// Constructor\\n// ==--------------------------==\\n\\n/**\\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\\n * native regular expression in that additional syntax and flags are supported. The returned object\\n * is in fact a native `RegExp` and works with all native methods.\\n *\\n * @class XRegExp\\n * @constructor\\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\\n * @param {String} [flags] Any combination of flags.\\n *   Native flags:\\n *     - `g` - global\\n *     - `i` - ignore case\\n *     - `m` - multiline anchors\\n *     - `u` - unicode (ES6)\\n *     - `y` - sticky (Firefox 3+, ES6)\\n *   Additional XRegExp flags:\\n *     - `n` - explicit capture\\n *     - `s` - dot matches all (aka singleline)\\n *     - `x` - free-spacing and line comments (aka extended)\\n *     - `A` - astral (requires the Unicode Base addon)\\n *   Flags cannot be provided when constructing one `RegExp` from another.\\n * @returns {RegExp} Extended regular expression object.\\n * @example\\n *\\n * // With named capture and flag x\\n * XRegExp(`(?<year>  [0-9]{4} ) -?  # year\\n *          (?<month> [0-9]{2} ) -?  # month\\n *          (?<day>   [0-9]{2} )     # day`, 'x');\\n *\\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\\n * // have fresh `lastIndex` properties (set to zero).\\n * XRegExp(/regex/);\\n */\\n\\n\\nfunction XRegExp(pattern, flags) {\\n  if (XRegExp.isRegExp(pattern)) {\\n    if (flags !== undefined) {\\n      throw new TypeError('Cannot supply flags when copying a RegExp');\\n    }\\n\\n    return copyRegex(pattern);\\n  } // Copy the argument behavior of `RegExp`\\n\\n\\n  pattern = pattern === undefined ? '' : String(pattern);\\n  flags = flags === undefined ? '' : String(flags);\\n\\n  if (XRegExp.isInstalled('astral') && !(flags.indexOf('A') !== -1)) {\\n    // This causes an error to be thrown if the Unicode Base addon is not available\\n    flags += 'A';\\n  }\\n\\n  if (!patternCache[pattern]) {\\n    patternCache[pattern] = {};\\n  }\\n\\n  if (!patternCache[pattern][flags]) {\\n    var context = {\\n      hasNamedCapture: false,\\n      captureNames: []\\n    };\\n    var scope = defaultScope;\\n    var output = '';\\n    var pos = 0;\\n    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier\\n\\n    var applied = prepareFlags(pattern, flags);\\n    var appliedPattern = applied.pattern;\\n    var appliedFlags = applied.flags; // Use XRegExp's tokens to translate the pattern to a native regex pattern.\\n    // `appliedPattern.length` may change on each iteration if tokens use `reparse`\\n\\n    while (pos < appliedPattern.length) {\\n      do {\\n        // Check for custom tokens at the current position\\n        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the\\n        // pattern before running tokens again at the same position\\n\\n        if (result && result.reparse) {\\n          appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);\\n        }\\n      } while (result && result.reparse);\\n\\n      if (result) {\\n        output += result.output;\\n        pos += result.matchLength || 1;\\n      } else {\\n        // Get the native token at the current position\\n        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),\\n            _XRegExp$exec2 = (0, _slicedToArray2.default)(_XRegExp$exec, 1),\\n            token = _XRegExp$exec2[0];\\n\\n        output += token;\\n        pos += token.length;\\n\\n        if (token === '[' && scope === defaultScope) {\\n          scope = classScope;\\n        } else if (token === ']' && scope === classScope) {\\n          scope = defaultScope;\\n        }\\n      }\\n    }\\n\\n    patternCache[pattern][flags] = {\\n      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\\n      // groups are sometimes inserted during regex transpilation in order to keep tokens\\n      // separated. However, more than one empty group in a row is never needed.\\n      pattern: nativ.replace.call(output, /(?:\\\\(\\\\?:\\\\))+/g, '(?:)'),\\n      // Strip all but native flags\\n      flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\\n      // `context.captureNames` has an item for each capturing group, even if unnamed\\n      captures: context.hasNamedCapture ? context.captureNames : null\\n    };\\n  }\\n\\n  var generated = patternCache[pattern][flags];\\n  return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);\\n} // Add `RegExp.prototype` to the prototype chain\\n\\n\\nXRegExp.prototype = /(?:)/; // ==--------------------------==\\n// Public properties\\n// ==--------------------------==\\n\\n/**\\n * The XRegExp version number as a string containing three dot-separated parts. For example,\\n * '2.0.0-beta-3'.\\n *\\n * @static\\n * @memberOf XRegExp\\n * @type String\\n */\\n\\nXRegExp.version = '4.2.4'; // ==--------------------------==\\n// Public methods\\n// ==--------------------------==\\n// Intentionally undocumented; used in tests and addons\\n\\nXRegExp._clipDuplicates = clipDuplicates;\\nXRegExp._hasNativeFlag = hasNativeFlag;\\nXRegExp._dec = dec;\\nXRegExp._hex = hex;\\nXRegExp._pad4 = pad4;\\n/**\\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\\n *\\n * @memberOf XRegExp\\n * @param {RegExp} regex Regex object that matches the new token.\\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\\n *   properties of the regex being built, through `this`. Invoked with three arguments:\\n *   - The match array, with named backreference properties.\\n *   - The regex scope where the match was found: 'default' or 'class'.\\n *   - The flags used by the regex, including any flags in a leading mode modifier.\\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\\n *   construct XRegExps within the function or you will trigger infinite recursion.\\n * @param {Object} [options] Options object with optional properties:\\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\\n *     throwing an 'unknown flag' error when any of the flags are used.\\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\\n *     final, and instead be reparseable by other tokens (including the current token). Allows\\n *     token chaining or deferring.\\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\\n *     you provide an erroneous value. However, providing it can increase the token's performance\\n *     since the token can be skipped at any positions where this character doesn't appear.\\n * @example\\n *\\n * // Basic usage: Add \\\\a for the ALERT control code\\n * XRegExp.addToken(\\n *   /\\\\\\\\a/,\\n *   () => '\\\\\\\\x07',\\n *   {scope: 'all'}\\n * );\\n * XRegExp('\\\\\\\\a[\\\\\\\\a-\\\\\\\\n]+').test('\\\\x07\\\\n\\\\x07'); // -> true\\n *\\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\\n * // character classes only)\\n * XRegExp.addToken(\\n *   /([?*+]|{\\\\d+(?:,\\\\d*)?})(\\\\??)/,\\n *   (match) => `${match[1]}${match[2] ? '' : '?'}`,\\n *   {flag: 'U'}\\n * );\\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\\n */\\n\\nXRegExp.addToken = function (regex, handler, options) {\\n  options = options || {};\\n  var _options = options,\\n      optionalFlags = _options.optionalFlags;\\n\\n  if (options.flag) {\\n    registerFlag(options.flag);\\n  }\\n\\n  if (optionalFlags) {\\n    optionalFlags = nativ.split.call(optionalFlags, '');\\n    var _iteratorNormalCompletion2 = true;\\n    var _didIteratorError2 = false;\\n    var _iteratorError2 = undefined;\\n\\n    try {\\n      for (var _iterator2 = (0, _getIterator2.default)(optionalFlags), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\\n        var flag = _step2.value;\\n        registerFlag(flag);\\n      }\\n    } catch (err) {\\n      _didIteratorError2 = true;\\n      _iteratorError2 = err;\\n    } finally {\\n      try {\\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\\n          _iterator2.return();\\n        }\\n      } finally {\\n        if (_didIteratorError2) {\\n          throw _iteratorError2;\\n        }\\n      }\\n    }\\n  } // Add to the private list of syntax tokens\\n\\n\\n  tokens.push({\\n    regex: copyRegex(regex, {\\n      addG: true,\\n      addY: hasNativeY,\\n      isInternalOnly: true\\n    }),\\n    handler: handler,\\n    scope: options.scope || defaultScope,\\n    flag: options.flag,\\n    reparse: options.reparse,\\n    leadChar: options.leadChar\\n  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\\n  // might now produce different results\\n\\n  XRegExp.cache.flush('patterns');\\n};\\n/**\\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\\n * the same pattern and flag combination, the cached copy of the regex is returned.\\n *\\n * @memberOf XRegExp\\n * @param {String} pattern Regex pattern string.\\n * @param {String} [flags] Any combination of XRegExp flags.\\n * @returns {RegExp} Cached XRegExp object.\\n * @example\\n *\\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\\n *   // The regex is compiled once only\\n * }\\n */\\n\\n\\nXRegExp.cache = function (pattern, flags) {\\n  if (!regexCache[pattern]) {\\n    regexCache[pattern] = {};\\n  }\\n\\n  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));\\n}; // Intentionally undocumented; used in tests\\n\\n\\nXRegExp.cache.flush = function (cacheName) {\\n  if (cacheName === 'patterns') {\\n    // Flush the pattern cache used by the `XRegExp` constructor\\n    patternCache = {};\\n  } else {\\n    // Flush the regex cache populated by `XRegExp.cache`\\n    regexCache = {};\\n  }\\n};\\n/**\\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\\n * can safely be used at any point within a regex that uses any flags.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to escape.\\n * @returns {String} String with regex metacharacters escaped.\\n * @example\\n *\\n * XRegExp.escape('Escaped? <.>');\\n * // -> 'Escaped\\\\?\\\\ <\\\\.>'\\n */\\n\\n\\nXRegExp.escape = function (str) {\\n  return nativ.replace.call(toObject(str), /[-\\\\[\\\\]{}()*+?.,\\\\\\\\^$|#\\\\s]/g, '\\\\\\\\$&');\\n};\\n/**\\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\\n * regex uses named capture, named backreference properties are included on the match array.\\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {Number} [pos=0] Zero-based index at which to start the search.\\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\\n * @returns {Array} Match array with named backreference properties, or `null`.\\n * @example\\n *\\n * // Basic use, with named backreference\\n * let match = XRegExp.exec('U+2620', XRegExp('U\\\\\\\\+(?<hex>[0-9A-F]{4})'));\\n * match.hex; // -> '2620'\\n *\\n * // With pos and sticky, in a loop\\n * let pos = 2, result = [], match;\\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\\\d)>/, pos, 'sticky')) {\\n *   result.push(match[1]);\\n *   pos = match.index + match[0].length;\\n * }\\n * // result -> ['2', '3', '4']\\n */\\n\\n\\nXRegExp.exec = function (str, regex, pos, sticky) {\\n  var cacheKey = 'g';\\n  var addY = false;\\n  var fakeY = false;\\n  var match;\\n  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);\\n\\n  if (addY) {\\n    cacheKey += 'y';\\n  } else if (sticky) {\\n    // Simulate sticky matching by appending an empty capture to the original regex. The\\n    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\\n    // and will not search the rest of the subject string. We'll know that the original regex\\n    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\\n    // capture participated in the match).\\n    fakeY = true;\\n    cacheKey += 'FakeY';\\n  }\\n\\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`\\n\\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\\n    addG: true,\\n    addY: addY,\\n    source: fakeY ? \\\"\\\".concat(regex.source, \\\"|()\\\") : undefined,\\n    removeY: sticky === false,\\n    isInternalOnly: true\\n  }));\\n  pos = pos || 0;\\n  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\\n\\n  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\\n  // the original regexp failed (see above).\\n\\n  if (fakeY && match && match.pop() === '') {\\n    match = null;\\n  }\\n\\n  if (regex.global) {\\n    regex.lastIndex = match ? r2.lastIndex : 0;\\n  }\\n\\n  return match;\\n};\\n/**\\n * Executes a provided function once per regex match. Searches always start at the beginning of the\\n * string and continue until the end, regardless of the state of the regex's `global` property and\\n * initial `lastIndex`.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\\n *   - The match array, with named backreference properties.\\n *   - The zero-based match index.\\n *   - The string being traversed.\\n *   - The regex object being used to traverse the string.\\n * @example\\n *\\n * // Extracts every other digit from a string\\n * const evens = [];\\n * XRegExp.forEach('1a2345', /\\\\d/, (match, i) => {\\n *   if (i % 2) evens.push(+match[0]);\\n * });\\n * // evens -> [2, 4]\\n */\\n\\n\\nXRegExp.forEach = function (str, regex, callback) {\\n  var pos = 0;\\n  var i = -1;\\n  var match;\\n\\n  while (match = XRegExp.exec(str, regex, pos)) {\\n    // Because `regex` is provided to `callback`, the function could use the deprecated/\\n    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\\n    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\\n    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\\n    // regexes, mutating the regex will not have any effect on the iteration or matched strings,\\n    // which is a nice side effect that brings extra safety.\\n    callback(match, ++i, str, regex);\\n    pos = match.index + (match[0].length || 1);\\n  }\\n};\\n/**\\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\\n * regexes are not recompiled using XRegExp syntax.\\n *\\n * @memberOf XRegExp\\n * @param {RegExp} regex Regex to globalize.\\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\\n * @example\\n *\\n * const globalCopy = XRegExp.globalize(/regex/);\\n * globalCopy.global; // -> true\\n */\\n\\n\\nXRegExp.globalize = function (regex) {\\n  return copyRegex(regex, {\\n    addG: true\\n  });\\n};\\n/**\\n * Installs optional features according to the specified options. Can be undone using\\n * `XRegExp.uninstall`.\\n *\\n * @memberOf XRegExp\\n * @param {Object|String} options Options object or string.\\n * @example\\n *\\n * // With an options object\\n * XRegExp.install({\\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\\n *   astral: true,\\n *\\n *   // Adds named capture groups to the `groups` property of matches\\n *   namespacing: true\\n * });\\n *\\n * // With an options string\\n * XRegExp.install('astral namespacing');\\n */\\n\\n\\nXRegExp.install = function (options) {\\n  options = prepareOptions(options);\\n\\n  if (!features.astral && options.astral) {\\n    setAstral(true);\\n  }\\n\\n  if (!features.namespacing && options.namespacing) {\\n    setNamespacing(true);\\n  }\\n};\\n/**\\n * Checks whether an individual optional feature is installed.\\n *\\n * @memberOf XRegExp\\n * @param {String} feature Name of the feature to check. One of:\\n *   - `astral`\\n *   - `namespacing`\\n * @returns {Boolean} Whether the feature is installed.\\n * @example\\n *\\n * XRegExp.isInstalled('astral');\\n */\\n\\n\\nXRegExp.isInstalled = function (feature) {\\n  return !!features[feature];\\n};\\n/**\\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\\n * created in another frame, when `instanceof` and `constructor` checks would fail.\\n *\\n * @memberOf XRegExp\\n * @param {*} value Object to check.\\n * @returns {Boolean} Whether the object is a `RegExp` object.\\n * @example\\n *\\n * XRegExp.isRegExp('string'); // -> false\\n * XRegExp.isRegExp(/regex/i); // -> true\\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\\n */\\n\\n\\nXRegExp.isRegExp = function (value) {\\n  return toString.call(value) === '[object RegExp]';\\n}; // isType(value, 'RegExp');\\n\\n/**\\n * Returns the first matched string, or in global mode, an array containing all matched strings.\\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\\n *   `scope` is 'all'.\\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\\n *   mode: Array of all matched strings, or an empty array.\\n * @example\\n *\\n * // Match first\\n * XRegExp.match('abc', /\\\\w/); // -> 'a'\\n * XRegExp.match('abc', /\\\\w/g, 'one'); // -> 'a'\\n * XRegExp.match('abc', /x/g, 'one'); // -> null\\n *\\n * // Match all\\n * XRegExp.match('abc', /\\\\w/g); // -> ['a', 'b', 'c']\\n * XRegExp.match('abc', /\\\\w/, 'all'); // -> ['a', 'b', 'c']\\n * XRegExp.match('abc', /x/, 'all'); // -> []\\n */\\n\\n\\nXRegExp.match = function (str, regex, scope) {\\n  var global = regex.global && scope !== 'one' || scope === 'all';\\n  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';\\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`\\n\\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\\n    addG: !!global,\\n    removeG: scope === 'one',\\n    isInternalOnly: true\\n  }));\\n  var result = nativ.match.call(toObject(str), r2);\\n\\n  if (regex.global) {\\n    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\\n    result.index + result[0].length : 0;\\n  }\\n\\n  return global ? result || [] : result && result[0];\\n};\\n/**\\n * Retrieves the matches from searching a string using a chain of regexes that successively search\\n * within previous matches. The provided `chain` array can contain regexes and or objects with\\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\\n * backreference is passed forward to the next regex or returned.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {Array} chain Regexes that each search for matches within preceding results.\\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\\n * @example\\n *\\n * // Basic usage; matches numbers within <b> tags\\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\\n *   XRegExp('(?is)<b>.*?</b>'),\\n *   /\\\\d+/\\n * ]);\\n * // -> ['2', '4', '56']\\n *\\n * // Passing forward and returning specific backreferences\\n * html = '<a href=\\\"http://xregexp.com/api/\\\">XRegExp</a>\\\\\\n *         <a href=\\\"http://www.google.com/\\\">Google</a>';\\n * XRegExp.matchChain(html, [\\n *   {regex: /<a href=\\\"([^\\\"]+)\\\">/i, backref: 1},\\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\\n * ]);\\n * // -> ['xregexp.com', 'www.google.com']\\n */\\n\\n\\nXRegExp.matchChain = function (str, chain) {\\n  return function recurseChain(values, level) {\\n    var item = chain[level].regex ? chain[level] : {\\n      regex: chain[level]\\n    };\\n    var matches = [];\\n\\n    function addMatch(match) {\\n      if (item.backref) {\\n        var ERR_UNDEFINED_GROUP = \\\"Backreference to undefined group: \\\".concat(item.backref);\\n        var isNamedBackref = isNaN(item.backref);\\n\\n        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {\\n          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`\\n          if (!(item.backref in match.groups)) {\\n            throw new ReferenceError(ERR_UNDEFINED_GROUP);\\n          }\\n        } else if (!match.hasOwnProperty(item.backref)) {\\n          throw new ReferenceError(ERR_UNDEFINED_GROUP);\\n        }\\n\\n        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];\\n        matches.push(backrefValue || '');\\n      } else {\\n        matches.push(match[0]);\\n      }\\n    }\\n\\n    var _iteratorNormalCompletion3 = true;\\n    var _didIteratorError3 = false;\\n    var _iteratorError3 = undefined;\\n\\n    try {\\n      for (var _iterator3 = (0, _getIterator2.default)(values), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\\n        var value = _step3.value;\\n        XRegExp.forEach(value, item.regex, addMatch);\\n      }\\n    } catch (err) {\\n      _didIteratorError3 = true;\\n      _iteratorError3 = err;\\n    } finally {\\n      try {\\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\\n          _iterator3.return();\\n        }\\n      } finally {\\n        if (_didIteratorError3) {\\n          throw _iteratorError3;\\n        }\\n      }\\n    }\\n\\n    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\\n  }([str], 0);\\n};\\n/**\\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\\n * or regex, and the replacement can be a string or a function to be called for each match. To\\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\\n * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.\\n * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\\n * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp|String} search Search pattern to be replaced.\\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\\n *   Replacement strings can include special replacement syntax:\\n *     - $$ - Inserts a literal $ character.\\n *     - $&, $0 - Inserts the matched substring.\\n *     - $` - Inserts the string that precedes the matched substring (left context).\\n *     - $' - Inserts the string that follows the matched substring (right context).\\n *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\\n *       backreference n/nn.\\n *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing\\n *       group, inserts backreference n.\\n *   Replacement functions are invoked with three or more arguments:\\n *     - The matched substring (corresponds to $& above). Named backreferences are accessible as\\n *       properties of this first argument.\\n *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\\n *     - The zero-based index of the match within the total search string.\\n *     - The total string being searched.\\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\\n * @returns {String} New string with one or all matches replaced.\\n * @example\\n *\\n * // Regex search, using named backreferences in replacement string\\n * const name = XRegExp('(?<first>\\\\\\\\w+) (?<last>\\\\\\\\w+)');\\n * XRegExp.replace('John Smith', name, '$<last>, $<first>');\\n * // -> 'Smith, John'\\n *\\n * // Regex search, using named backreferences in replacement function\\n * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);\\n * // -> 'Smith, John'\\n *\\n * // String search, with replace-all\\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\\n * // -> 'XRegExp builds XRegExps'\\n */\\n\\n\\nXRegExp.replace = function (str, search, replacement, scope) {\\n  var isRegex = XRegExp.isRegExp(search);\\n  var global = search.global && scope !== 'one' || scope === 'all';\\n  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';\\n  var s2 = search;\\n\\n  if (isRegex) {\\n    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\\n    // `lastIndex` isn't updated *during* replacement iterations\\n\\n    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {\\n      addG: !!global,\\n      removeG: scope === 'one',\\n      isInternalOnly: true\\n    }));\\n  } else if (global) {\\n    s2 = new RegExp(XRegExp.escape(String(search)), 'g');\\n  } // Fixed `replace` required for named backreferences, etc.\\n\\n\\n  var result = fixed.replace.call(toObject(str), s2, replacement);\\n\\n  if (isRegex && search.global) {\\n    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\\n    search.lastIndex = 0;\\n  }\\n\\n  return result;\\n};\\n/**\\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\\n * array of replacement details. Later replacements operate on the output of earlier replacements.\\n * Replacement details are accepted as an array with a regex or string to search for, the\\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\\n * replacement text syntax, which supports named backreference properties via `${name}` or\\n * `$<name>`.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {Array} replacements Array of replacement detail arrays.\\n * @returns {String} New string with all replacements.\\n * @example\\n *\\n * str = XRegExp.replaceEach(str, [\\n *   [XRegExp('(?<name>a)'), 'z${name}'],\\n *   [/b/gi, 'y'],\\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\\n *   [/f/g, ($0) => $0.toUpperCase()]\\n * ]);\\n */\\n\\n\\nXRegExp.replaceEach = function (str, replacements) {\\n  var _iteratorNormalCompletion4 = true;\\n  var _didIteratorError4 = false;\\n  var _iteratorError4 = undefined;\\n\\n  try {\\n    for (var _iterator4 = (0, _getIterator2.default)(replacements), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\\n      var r = _step4.value;\\n      str = XRegExp.replace(str, r[0], r[1], r[2]);\\n    }\\n  } catch (err) {\\n    _didIteratorError4 = true;\\n    _iteratorError4 = err;\\n  } finally {\\n    try {\\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\\n        _iterator4.return();\\n      }\\n    } finally {\\n      if (_didIteratorError4) {\\n        throw _iteratorError4;\\n      }\\n    }\\n  }\\n\\n  return str;\\n};\\n/**\\n * Splits a string into an array of strings using a regex or string separator. Matches of the\\n * separator are not included in the result array. However, if `separator` is a regex that contains\\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\\n * cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to split.\\n * @param {RegExp|String} separator Regex or string to use for separating the string.\\n * @param {Number} [limit] Maximum number of items to include in the result array.\\n * @returns {Array} Array of substrings.\\n * @example\\n *\\n * // Basic use\\n * XRegExp.split('a b c', ' ');\\n * // -> ['a', 'b', 'c']\\n *\\n * // With limit\\n * XRegExp.split('a b c', ' ', 2);\\n * // -> ['a', 'b']\\n *\\n * // Backreferences in result array\\n * XRegExp.split('..word1..', /([a-z]+)(\\\\d+)/i);\\n * // -> ['..', 'word', '1', '..']\\n */\\n\\n\\nXRegExp.split = function (str, separator, limit) {\\n  return fixed.split.call(toObject(str), separator, limit);\\n};\\n/**\\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\\n * `sticky` arguments specify the search start position, and whether the match must start at the\\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\\n * updated for compatibility. Also fixes browser bugs compared to the native\\n * `RegExp.prototype.test` and can be used reliably cross-browser.\\n *\\n * @memberOf XRegExp\\n * @param {String} str String to search.\\n * @param {RegExp} regex Regex to search with.\\n * @param {Number} [pos=0] Zero-based index at which to start the search.\\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\\n * @returns {Boolean} Whether the regex matched the provided value.\\n * @example\\n *\\n * // Basic use\\n * XRegExp.test('abc', /c/); // -> true\\n *\\n * // With pos and sticky\\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\\n */\\n// Do this the easy way :-)\\n\\n\\nXRegExp.test = function (str, regex, pos, sticky) {\\n  return !!XRegExp.exec(str, regex, pos, sticky);\\n};\\n/**\\n * Uninstalls optional features according to the specified options. All optional features start out\\n * uninstalled, so this is used to undo the actions of `XRegExp.install`.\\n *\\n * @memberOf XRegExp\\n * @param {Object|String} options Options object or string.\\n * @example\\n *\\n * // With an options object\\n * XRegExp.uninstall({\\n *   // Disables support for astral code points in Unicode addons\\n *   astral: true,\\n *\\n *   // Don't add named capture groups to the `groups` property of matches\\n *   namespacing: true\\n * });\\n *\\n * // With an options string\\n * XRegExp.uninstall('astral namespacing');\\n */\\n\\n\\nXRegExp.uninstall = function (options) {\\n  options = prepareOptions(options);\\n\\n  if (features.astral && options.astral) {\\n    setAstral(false);\\n  }\\n\\n  if (features.namespacing && options.namespacing) {\\n    setNamespacing(false);\\n  }\\n};\\n/**\\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\\n * `flags` argument.\\n *\\n * @memberOf XRegExp\\n * @param {Array} patterns Regexes and strings to combine.\\n * @param {String} [flags] Any combination of XRegExp flags.\\n * @param {Object} [options] Options object with optional properties:\\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\\n * @returns {RegExp} Union of the provided regexes and strings.\\n * @example\\n *\\n * XRegExp.union(['a+b*c', /(dogs)\\\\1/, /(cats)\\\\1/], 'i');\\n * // -> /a\\\\+b\\\\*c|(dogs)\\\\1|(cats)\\\\2/i\\n *\\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\\n * // -> /manbearpig/i\\n */\\n\\n\\nXRegExp.union = function (patterns, flags, options) {\\n  options = options || {};\\n  var conjunction = options.conjunction || 'or';\\n  var numCaptures = 0;\\n  var numPriorCaptures;\\n  var captureNames;\\n\\n  function rewrite(match, paren, backref) {\\n    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group\\n\\n    if (paren) {\\n      ++numCaptures; // If the current capture has a name, preserve the name\\n\\n      if (name) {\\n        return \\\"(?<\\\".concat(name, \\\">\\\");\\n      } // Backreference\\n\\n    } else if (backref) {\\n      // Rewrite the backreference\\n      return \\\"\\\\\\\\\\\".concat(+backref + numPriorCaptures);\\n    }\\n\\n    return match;\\n  }\\n\\n  if (!(isType(patterns, 'Array') && patterns.length)) {\\n    throw new TypeError('Must provide a nonempty array of patterns to merge');\\n  }\\n\\n  var parts = /(\\\\()(?!\\\\?)|\\\\\\\\([1-9]\\\\d*)|\\\\\\\\[\\\\s\\\\S]|\\\\[(?:[^\\\\\\\\\\\\]]|\\\\\\\\[\\\\s\\\\S])*\\\\]/g;\\n  var output = [];\\n  var _iteratorNormalCompletion5 = true;\\n  var _didIteratorError5 = false;\\n  var _iteratorError5 = undefined;\\n\\n  try {\\n    for (var _iterator5 = (0, _getIterator2.default)(patterns), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\\n      var pattern = _step5.value;\\n\\n      if (XRegExp.isRegExp(pattern)) {\\n        numPriorCaptures = numCaptures;\\n        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\\n        // independently valid; helps keep this simple. Named captures are put back\\n\\n        output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));\\n      } else {\\n        output.push(XRegExp.escape(pattern));\\n      }\\n    }\\n  } catch (err) {\\n    _didIteratorError5 = true;\\n    _iteratorError5 = err;\\n  } finally {\\n    try {\\n      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\\n        _iterator5.return();\\n      }\\n    } finally {\\n      if (_didIteratorError5) {\\n        throw _iteratorError5;\\n      }\\n    }\\n  }\\n\\n  var separator = conjunction === 'none' ? '' : '|';\\n  return XRegExp(output.join(separator), flags);\\n}; // ==--------------------------==\\n// Fixed/extended native methods\\n// ==--------------------------==\\n\\n/**\\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\\n * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.\\n *\\n * @memberOf RegExp\\n * @param {String} str String to search.\\n * @returns {Array} Match array with named backreference properties, or `null`.\\n */\\n\\n\\nfixed.exec = function (str) {\\n  var origLastIndex = this.lastIndex;\\n  var match = nativ.exec.apply(this, arguments);\\n\\n  if (match) {\\n    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\\n    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\\n    // in standards mode follows the spec.\\n    if (!correctExecNpcg && match.length > 1 && match.indexOf('') !== -1) {\\n      var r2 = copyRegex(this, {\\n        removeG: true,\\n        isInternalOnly: true\\n      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\\n      // matching due to characters outside the match\\n\\n      nativ.replace.call(String(str).slice(match.index), r2, function () {\\n        var len = arguments.length; // Skip index 0 and the last 2\\n\\n        for (var i = 1; i < len - 2; ++i) {\\n          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {\\n            match[i] = undefined;\\n          }\\n        }\\n      });\\n    } // Attach named capture properties\\n\\n\\n    var groupsObject = match;\\n\\n    if (XRegExp.isInstalled('namespacing')) {\\n      // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\\n      match.groups = (0, _create.default)(null);\\n      groupsObject = match.groups;\\n    }\\n\\n    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\\n      // Skip index 0\\n      for (var i = 1; i < match.length; ++i) {\\n        var name = this[REGEX_DATA].captureNames[i - 1];\\n\\n        if (name) {\\n          groupsObject[name] = match[i];\\n        }\\n      }\\n    } // Fix browsers that increment `lastIndex` after zero-length matches\\n\\n\\n    if (this.global && !match[0].length && this.lastIndex > match.index) {\\n      this.lastIndex = match.index;\\n    }\\n  }\\n\\n  if (!this.global) {\\n    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\\n    this.lastIndex = origLastIndex;\\n  }\\n\\n  return match;\\n};\\n/**\\n * Fixes browser bugs in the native `RegExp.prototype.test`.\\n *\\n * @memberOf RegExp\\n * @param {String} str String to search.\\n * @returns {Boolean} Whether the regex matched the provided value.\\n */\\n\\n\\nfixed.test = function (str) {\\n  // Do this the easy way :-)\\n  return !!fixed.exec.call(this, str);\\n};\\n/**\\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\\n * bugs in the native `String.prototype.match`.\\n *\\n * @memberOf String\\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\\n *   the result of calling `regex.exec(this)`.\\n */\\n\\n\\nfixed.match = function (regex) {\\n  if (!XRegExp.isRegExp(regex)) {\\n    // Use the native `RegExp` rather than `XRegExp`\\n    regex = new RegExp(regex);\\n  } else if (regex.global) {\\n    var result = nativ.match.apply(this, arguments); // Fixes IE bug\\n\\n    regex.lastIndex = 0;\\n    return result;\\n  }\\n\\n  return fixed.exec.call(regex, toObject(this));\\n};\\n/**\\n * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement\\n * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also\\n * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex\\n * search value, and the value of a replacement regex's `lastIndex` property during replacement\\n * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third\\n * (`flags`) argument. Use via `XRegExp.replace`.\\n *\\n * @memberOf String\\n * @param {RegExp|String} search Search pattern to be replaced.\\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\\n * @returns {String} New string with one or all matches replaced.\\n */\\n\\n\\nfixed.replace = function (search, replacement) {\\n  var isRegex = XRegExp.isRegExp(search);\\n  var origLastIndex;\\n  var captureNames;\\n  var result;\\n\\n  if (isRegex) {\\n    if (search[REGEX_DATA]) {\\n      captureNames = search[REGEX_DATA].captureNames;\\n    } // Only needed if `search` is nonglobal\\n\\n\\n    origLastIndex = search.lastIndex;\\n  } else {\\n    search += ''; // Type-convert\\n  } // Don't use `typeof`; some older browsers return 'function' for regex objects\\n\\n\\n  if (isType(replacement, 'Function')) {\\n    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\\n    // functions isn't type-converted to a string\\n    result = nativ.replace.call(String(this), search, function () {\\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n        args[_key] = arguments[_key];\\n      }\\n\\n      if (captureNames) {\\n        var groupsObject;\\n\\n        if (XRegExp.isInstalled('namespacing')) {\\n          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\\n          groupsObject = (0, _create.default)(null);\\n          args.push(groupsObject);\\n        } else {\\n          // Change the `args[0]` string primitive to a `String` object that can store\\n          // properties. This really does need to use `String` as a constructor\\n          args[0] = new String(args[0]);\\n          groupsObject = args[0];\\n        } // Store named backreferences\\n\\n\\n        for (var i = 0; i < captureNames.length; ++i) {\\n          if (captureNames[i]) {\\n            groupsObject[captureNames[i]] = args[i + 1];\\n          }\\n        }\\n      } // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari\\n      // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\\n\\n\\n      if (isRegex && search.global) {\\n        search.lastIndex = args[args.length - 2] + args[0].length;\\n      } // ES6 specs the context for replacement functions as `undefined`\\n\\n\\n      return replacement.apply(void 0, args);\\n    });\\n  } else {\\n    // Ensure that the last value of `args` will be a string when given nonstring `this`,\\n    // while still throwing on null or undefined context\\n    result = nativ.replace.call(this == null ? this : String(this), search, function () {\\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\\n        args[_key2] = arguments[_key2];\\n      }\\n\\n      return nativ.replace.call(String(replacement), replacementToken, replacer);\\n\\n      function replacer($0, bracketed, angled, dollarToken) {\\n        bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces\\n\\n        if (bracketed) {\\n          // XRegExp behavior for `${n}` or `$<n>`:\\n          // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the\\n          //    entire match. Any number of leading zeros may be used.\\n          // 2. Backreference to named capture `n`, if it exists and is not an integer\\n          //    overridden by numbered capture. In practice, this does not overlap with\\n          //    numbered capture since XRegExp does not allow named capture to use a bare\\n          //    integer as the name.\\n          // 3. If the name or number does not refer to an existing capturing group, it's\\n          //    an error.\\n          var n = +bracketed; // Type-convert; drop leading zeros\\n\\n          if (n <= args.length - 3) {\\n            return args[n] || '';\\n          } // Groups with the same name is an error, else would need `lastIndexOf`\\n\\n\\n          n = captureNames ? captureNames.indexOf(bracketed) : -1;\\n\\n          if (n < 0) {\\n            throw new SyntaxError(\\\"Backreference to undefined group \\\".concat($0));\\n          }\\n\\n          return args[n + 1] || '';\\n        } // Else, special variable or numbered backreference without curly braces\\n\\n\\n        if (dollarToken === '$') {\\n          // $$\\n          return '$';\\n        }\\n\\n        if (dollarToken === '&' || +dollarToken === 0) {\\n          // $&, $0 (not followed by 1-9), $00\\n          return args[0];\\n        }\\n\\n        if (dollarToken === '`') {\\n          // $` (left context)\\n          return args[args.length - 1].slice(0, args[args.length - 2]);\\n        }\\n\\n        if (dollarToken === \\\"'\\\") {\\n          // $' (right context)\\n          return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\\n        } // Else, numbered backreference without braces\\n\\n\\n        dollarToken = +dollarToken; // Type-convert; drop leading zero\\n        // XRegExp behavior for `$n` and `$nn`:\\n        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.\\n        // - `$1` is an error if no capturing groups.\\n        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`\\n        //   instead.\\n        // - `$01` is `$1` if at least one capturing group, else it's an error.\\n        // - `$0` (not followed by 1-9) and `$00` are the entire match.\\n        // Native behavior, for comparison:\\n        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\\n        // - `$1` is a literal `$1` if no capturing groups.\\n        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\\n        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\\n        // - `$0` is a literal `$0`.\\n\\n        if (!isNaN(dollarToken)) {\\n          if (dollarToken > args.length - 3) {\\n            throw new SyntaxError(\\\"Backreference to undefined group \\\".concat($0));\\n          }\\n\\n          return args[dollarToken] || '';\\n        } // `$` followed by an unsupported char is an error, unlike native JS\\n\\n\\n        throw new SyntaxError(\\\"Invalid token \\\".concat($0));\\n      }\\n    });\\n  }\\n\\n  if (isRegex) {\\n    if (search.global) {\\n      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\\n      search.lastIndex = 0;\\n    } else {\\n      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\\n      search.lastIndex = origLastIndex;\\n    }\\n  }\\n\\n  return result;\\n};\\n/**\\n * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.\\n *\\n * @memberOf String\\n * @param {RegExp|String} separator Regex or string to use for separating the string.\\n * @param {Number} [limit] Maximum number of items to include in the result array.\\n * @returns {Array} Array of substrings.\\n */\\n\\n\\nfixed.split = function (separator, limit) {\\n  if (!XRegExp.isRegExp(separator)) {\\n    // Browsers handle nonregex split correctly, so use the faster native method\\n    return nativ.split.apply(this, arguments);\\n  }\\n\\n  var str = String(this);\\n  var output = [];\\n  var origLastIndex = separator.lastIndex;\\n  var lastLastIndex = 0;\\n  var lastLength; // Values for `limit`, per the spec:\\n  // If undefined: pow(2,32) - 1\\n  // If 0, Infinity, or NaN: 0\\n  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\\n  // If negative number: pow(2,32) - floor(abs(limit))\\n  // If other: Type-convert, then use the above rules\\n  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\\n  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\\n\\n  limit = (limit === undefined ? -1 : limit) >>> 0;\\n  XRegExp.forEach(str, separator, function (match) {\\n    // This condition is not the same as `if (match[0].length)`\\n    if (match.index + match[0].length > lastLastIndex) {\\n      output.push(str.slice(lastLastIndex, match.index));\\n\\n      if (match.length > 1 && match.index < str.length) {\\n        Array.prototype.push.apply(output, match.slice(1));\\n      }\\n\\n      lastLength = match[0].length;\\n      lastLastIndex = match.index + lastLength;\\n    }\\n  });\\n\\n  if (lastLastIndex === str.length) {\\n    if (!nativ.test.call(separator, '') || lastLength) {\\n      output.push('');\\n    }\\n  } else {\\n    output.push(str.slice(lastLastIndex));\\n  }\\n\\n  separator.lastIndex = origLastIndex;\\n  return output.length > limit ? output.slice(0, limit) : output;\\n}; // ==--------------------------==\\n// Built-in syntax/flag tokens\\n// ==--------------------------==\\n\\n/*\\n * Letter escapes that natively match literal characters: `\\\\a`, `\\\\A`, etc. These should be\\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\\n * consistency and to reserve their syntax, but lets them be superseded by addons.\\n */\\n\\n\\nXRegExp.addToken(/\\\\\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\\\dA-Fa-f]{4}|{[\\\\dA-Fa-f]+})|x(?![\\\\dA-Fa-f]{2}))/, function (match, scope) {\\n  // \\\\B is allowed in default scope only\\n  if (match[1] === 'B' && scope === defaultScope) {\\n    return match[0];\\n  }\\n\\n  throw new SyntaxError(\\\"Invalid escape \\\".concat(match[0]));\\n}, {\\n  scope: 'all',\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Unicode code point escape with curly braces: `\\\\u{N..}`. `N..` is any one or more digit\\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\\n * if you follow a `\\\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\\n * if you use the same in a character class.\\n */\\n\\nXRegExp.addToken(/\\\\\\\\u{([\\\\dA-Fa-f]+)}/, function (match, scope, flags) {\\n  var code = dec(match[1]);\\n\\n  if (code > 0x10FFFF) {\\n    throw new SyntaxError(\\\"Invalid Unicode code point \\\".concat(match[0]));\\n  }\\n\\n  if (code <= 0xFFFF) {\\n    // Converting to \\\\uNNNN avoids needing to escape the literal character and keep it\\n    // separate from preceding tokens\\n    return \\\"\\\\\\\\u\\\".concat(pad4(hex(code)));\\n  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\\n\\n\\n  if (hasNativeU && flags.indexOf('u') !== -1) {\\n    return match[0];\\n  }\\n\\n  throw new SyntaxError('Cannot use Unicode code point above \\\\\\\\u{FFFF} without flag u');\\n}, {\\n  scope: 'all',\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\\n * character class endings can't be determined.\\n */\\n\\nXRegExp.addToken(/\\\\[(\\\\^?)\\\\]/, // For cross-browser compatibility with ES3, convert [] to \\\\b\\\\B and [^] to [\\\\s\\\\S].\\n// (?!) should work like \\\\b\\\\B, but is unreliable in some versions of Firefox\\n\\n/* eslint-disable no-confusing-arrow */\\nfunction (match) {\\n  return match[1] ? '[\\\\\\\\s\\\\\\\\S]' : '\\\\\\\\b\\\\\\\\B';\\n},\\n/* eslint-enable no-confusing-arrow */\\n{\\n  leadChar: '['\\n});\\n/*\\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\\n * free-spacing mode (flag x).\\n */\\n\\nXRegExp.addToken(/\\\\(\\\\?#[^)]*\\\\)/, getContextualTokenSeparator, {\\n  leadChar: '('\\n});\\n/*\\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\\n */\\n\\nXRegExp.addToken(/\\\\s+|#[^\\\\n]*\\\\n?/, getContextualTokenSeparator, {\\n  flag: 'x'\\n});\\n/*\\n * Dot, in dotall mode (aka singleline mode, flag s) only.\\n */\\n\\nXRegExp.addToken(/\\\\./, function () {\\n  return '[\\\\\\\\s\\\\\\\\S]';\\n}, {\\n  flag: 's',\\n  leadChar: '.'\\n});\\n/*\\n * Named backreference: `\\\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\\n * and $ only. Also allows numbered backreferences as `\\\\k<n>`.\\n */\\n\\nXRegExp.addToken(/\\\\\\\\k<([\\\\w$]+)>/, function (match) {\\n  // Groups with the same name is an error, else would need `lastIndexOf`\\n  var index = isNaN(match[1]) ? this.captureNames.indexOf(match[1]) + 1 : +match[1];\\n  var endIndex = match.index + match[0].length;\\n\\n  if (!index || index > this.captureNames.length) {\\n    throw new SyntaxError(\\\"Backreference to undefined group \\\".concat(match[0]));\\n  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\\n  // inadvertedly changing `(?<n>)\\\\k<n>1` to `()\\\\11`.\\n\\n\\n  return \\\"\\\\\\\\\\\".concat(index).concat(endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');\\n}, {\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Numbered backreference or octal, plus any following digits: `\\\\0`, `\\\\11`, etc. Octals except `\\\\0`\\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\\\99` in regex syntax.\\n */\\n\\nXRegExp.addToken(/\\\\\\\\(\\\\d+)/, function (match, scope) {\\n  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {\\n    throw new SyntaxError(\\\"Cannot use octal escape or backreference to undefined group \\\".concat(match[0]));\\n  }\\n\\n  return match[0];\\n}, {\\n  scope: 'all',\\n  leadChar: '\\\\\\\\'\\n});\\n/*\\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\\n * Python-style named capture as octals.\\n */\\n\\nXRegExp.addToken(/\\\\(\\\\?P?<([\\\\w$]+)>/, function (match) {\\n  // Disallow bare integers as names because named backreferences are added to match arrays\\n  // and therefore numeric properties may lead to incorrect lookups\\n  if (!isNaN(match[1])) {\\n    throw new SyntaxError(\\\"Cannot use integer as capture name \\\".concat(match[0]));\\n  }\\n\\n  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {\\n    throw new SyntaxError(\\\"Cannot use reserved word as capture name \\\".concat(match[0]));\\n  }\\n\\n  if (this.captureNames.indexOf(match[1]) !== -1) {\\n    throw new SyntaxError(\\\"Cannot use same name for multiple groups \\\".concat(match[0]));\\n  }\\n\\n  this.captureNames.push(match[1]);\\n  this.hasNamedCapture = true;\\n  return '(';\\n}, {\\n  leadChar: '('\\n});\\n/*\\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\\n * groups. Also adds explicit capture mode (flag n).\\n */\\n\\nXRegExp.addToken(/\\\\((?!\\\\?)/, function (match, scope, flags) {\\n  if (flags.indexOf('n') !== -1) {\\n    return '(?:';\\n  }\\n\\n  this.captureNames.push(null);\\n  return '(';\\n}, {\\n  optionalFlags: 'n',\\n  leadChar: '('\\n});\\nvar _default = XRegExp;\\nexports.default = _default;\\nmodule.exports = exports[\\\"default\\\"];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"hasNativeFlag\",\"flag\",\"isSupported\",\"RegExp\",\"exception\",\"augment\",\"regex\",\"captureNames\",\"xSource\",\"xFlags\",\"isInternalOnly\",\"__proto__\",\"XRegExp\",\"prototype\",\"p\",\"source\",\"flags\",\"split\",\"sort\",\"join\",\"clipDuplicates\",\"str\",\"nativ\",\"replace\",\"call\",\"copyRegex\",\"options\",\"isRegExp\",\"TypeError\",\"xData\",\"hasFlagsProp\",\"exec\",\"toString\",\"flagsToAdd\",\"flagsToRemove\",\"xregexpSource\",\"xregexpFlags\",\"removeG\",\"removeY\",\"concat\",\"addG\",\"addY\",\"undefined\",\"slice\",\"dec\",\"hex\",\"_parseInt2\",\"default\",\"getContextualTokenSeparator\",\"match\",\"scope\",\"test\",\"indexOf\",\"pattern\",\"pos\",\"isType\",\"value\",\"type\",\"pad4\",\"length\",\"prepareFlags\",\"SyntaxError\",\"$0\",\"$1\",\"_iteratorNormalCompletion\",\"_didIteratorError\",\"_iteratorError\",\"_iterator\",\"_getIterator2\",\"_step\",\"done\",\"next\",\"registeredFlags\",\"err\",\"return\",\"prepareOptions\",\"forEach\",\"registerFlag\",\"Error\",\"toObject\",\"String\",\"isInstalled\",\"patternCache\",\"context\",\"hasNamedCapture\",\"defaultScope\",\"output\",\"applied\",\"appliedPattern\",\"appliedFlags\",\"i\",\"tokens\",\"leadChar\",\"result\",\"t\",\"matchLength\",\"handler\",\"reparse\",\"_XRegExp$exec\",\"nativeTokens\",\"token\",\"_XRegExp$exec2\",\"_slicedToArray2\",\"classScope\",\"captures\",\"generated\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"_create\",\"features\",\"astral\",\"namespacing\",\"fixed\",\"regexCache\",\"replacementToken\",\"correctExecNpcg\",\"_ref\",\"hasNativeU\",\"hasNativeY\",\"g\",\"m\",\"u\",\"y\",\"version\",\"_clipDuplicates\",\"_hasNativeFlag\",\"_dec\",\"_hex\",\"_pad4\",\"addToken\",\"XRegExp.addToken\",\"optionalFlags\",\"_iteratorNormalCompletion2\",\"_didIteratorError2\",\"_iteratorError2\",\"_iterator2\",\"_step2\",\"push\",\"cache\",\"flush\",\"XRegExp.cache\",\"XRegExp.cache.flush\",\"cacheName\",\"escape\",\"XRegExp.escape\",\"XRegExp.exec\",\"sticky\",\"cacheKey\",\"fakeY\",\"r2\",\"lastIndex\",\"pop\",\"XRegExp.forEach\",\"callback\",\"index\",\"globalize\",\"XRegExp.globalize\",\"install\",\"XRegExp.install\",\"on\",\"XRegExp.isInstalled\",\"feature\",\"XRegExp.isRegExp\",\"XRegExp.match\",\"matchChain\",\"XRegExp.matchChain\",\"chain\",\"recurseChain\",\"values\",\"level\",\"addMatch\",\"item\",\"backref\",\"ERR_UNDEFINED_GROUP\",\"isNamedBackref\",\"isNaN\",\"groups\",\"ReferenceError\",\"hasOwnProperty\",\"backrefValue\",\"matches\",\"_iteratorNormalCompletion3\",\"_didIteratorError3\",\"_iteratorError3\",\"_iterator3\",\"_step3\",\"XRegExp.replace\",\"search\",\"replacement\",\"isRegex\",\"s2\",\"replaceEach\",\"XRegExp.replaceEach\",\"replacements\",\"_iteratorNormalCompletion4\",\"_didIteratorError4\",\"_iteratorError4\",\"_iterator4\",\"_step4\",\"r\",\"XRegExp.split\",\"separator\",\"limit\",\"XRegExp.test\",\"uninstall\",\"XRegExp.uninstall\",\"union\",\"XRegExp.union\",\"patterns\",\"rewrite\",\"paren\",\"name\",\"numCaptures\",\"numPriorCaptures\",\"conjunction\",\"parts\",\"_iteratorNormalCompletion5\",\"_didIteratorError5\",\"_iteratorError5\",\"_iterator5\",\"_step5\",\"fixed.exec\",\"origLastIndex\",\"apply\",\"arguments\",\"len\",\"groupsObject\",\"fixed.test\",\"fixed.match\",\"fixed.replace\",\"_len\",\"args\",\"Array\",\"_key\",\"_len2\",\"_key2\",\"replacer\",\"bracketed\",\"angled\",\"dollarToken\",\"n\",\"fixed.split\",\"lastLastIndex\",\"lastLength\",\"code\",\"endIndex\",\"input\"]\n}\n"]